#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser


require "ruby_lexer"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-274,482,-495,-437,-495,-90,122,-274,-274,-274,-437,122,-274,-274,-274',
'600,-274,-87,357,-64,399,261,262,654,563,563,-274,-274,-87,598,563,261',
'262,599,409,-274,-274,-86,-274,-274,-274,-274,-274,-85,89,-89,326,314',
'315,316,317,318,33,325,482,482,-72,564,564,-437,700,482,482,564,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,359',
'360,-274,-274,-274,673,742,-274,-90,574,-274,123,738,-274,122,-274,123',
'-274,410,-274,-87,-274,-274,-274,-274,-274,-274,-274,-82,-274,266,-274',
'268,268,-486,484,268,270,270,601,-79,270,749,-280,-274,-274,-274,-274',
'-89,-274,-280,-280,-280,-274,-84,-83,-280,-280,268,-280,-87,673,-87',
'270,509,-87,-273,511,-81,-86,-77,-86,-85,-273,-86,-85,-351,-85,-280',
'-280,-85,-280,-280,-280,-280,-280,268,268,484,484,449,270,270,268,268',
'484,484,123,270,270,-86,268,509,671,783,527,270,-280,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-88,-273,-280,-280',
'-280,357,545,268,673,-435,-280,652,270,-77,-84,-83,-435,-280,651,-280',
'-490,-280,-280,-280,-280,-280,-280,-280,-84,-280,-77,-280,-85,357,-76',
'-75,268,552,671,563,298,270,-486,752,-280,-280,452,-80,-490,-280,-77',
'-88,-77,-280,-77,-490,-490,-490,266,298,-86,-490,-490,-487,-490,359',
'360,536,738,268,-490,294,564,-490,270,276,279,-490,357,756,-78,-88,-486',
'-490,-490,425,-490,-490,-490,-490,-490,-89,424,359,360,392,509,-79,357',
'514,-431,-80,357,-490,268,358,671,-431,509,270,298,514,-490,-490,-490',
'-490,-490,-490,-490,-490,-490,-490,-490,-490,-490,-490,-490,321,-490',
'-490,-490,738,544,524,-483,-484,-490,268,359,360,525,426,270,-490,-490',
'-490,587,-490,-490,-490,-490,-490,-490,-490,550,-490,-490,-490,359,360',
'530,-79,359,360,522,423,524,261,262,-281,-490,-490,422,-78,-506,-490',
'-281,-86,-79,-490,524,-506,-506,-506,-426,-429,-506,-506,-506,762,-506',
'-426,-429,528,-490,-77,-483,-484,-79,-85,-506,-490,-79,268,-282,768',
'-486,452,270,-506,-506,-282,-506,-506,-506,-506,-506,-483,-484,-280',
'733,396,-280,595,592,-281,-280,-490,-273,-280,594,-487,-280,451,-487',
'-273,706,-438,-281,-280,-426,-429,378,379,-487,-281,886,-327,-81,-506',
'-490,730,-89,885,-327,728,-506,-437,-281,102,-282,321,-506,268,-437',
'-281,101,-433,270,375,395,622,626,-282,-433,-280,374,394,-280,596,-282',
'-85,-83,-506,-273,746,738,-438,-280,155,398,-487,-487,-487,-281,-487',
'-506,266,-506,-487,-487,-506,887,-327,-487,507,-487,-487,-487,-487,-487',
'-487,-487,-437,-281,103,799,-487,-487,-487,-487,-487,-487,-487,652,376',
'396,726,-75,-282,-82,651,-83,-487,-90,-90,-487,-487,-487,-487,-487,-487',
'-487,-487,-487,-487,774,-487,-487,691,-487,-487,-487,707,261,262,263',
'264,-432,-436,-426,618,620,622,626,-432,-436,-426,261,262,433,266,-487',
'545,487,-487,-487,432,-487,-487,551,-487,-434,-487,776,-487,486,-487',
'617,-434,-76,623,627,629,-84,-487,746,738,-87,799,-487,-487,-487,-487',
'-487,-487,587,-429,-63,-487,-487,-486,-486,-486,-429,-486,261,262,-88',
'-486,-486,-79,743,453,-486,-87,-486,-486,-486,-486,-486,-486,-486,618',
'620,622,626,-486,-486,-486,-486,-486,-486,-486,618,620,622,626,725,298',
'440,724,587,-486,438,439,-486,-486,-486,-486,-486,-486,-486,-486,-486',
'-486,445,-486,-486,587,-486,-486,-486,298,-508,-508,-508,-508,284,287',
'294,609,-508,-508,276,279,282,285,444,283,286,441,-486,705,788,-486',
'-486,298,-486,-486,721,-486,637,-486,294,-486,297,-486,276,279,282,285',
'288,290,292,-486,296,298,791,-506,-486,-486,-486,-486,-486,-486,-506',
'-506,-506,-486,-486,-506,-506,-506,638,-506,298,298,-86,679,680,298',
'681,88,92,-506,801,399,294,266,803,131,276,279,-506,-506,806,-506,-506',
'-506,-506,-506,710,399,708,703,576,366,294,814,577,321,276,279,282,285',
'321,302,184,190,701,200,204,214,219,816,227,230,692,321,239,-262,428',
'819,-506,177,181,186,192,427,821,-506,411,321,407,405,321,-506,403,827',
'828,243,170,829,175,179,188,194,198,202,206,212,216,401,225,832,400',
'237,-506,314,315,316,317,318,298,399,18,22,26,30,35,-506,384,-506,52',
'63,-506,838,384,82,840,91,95,6,11,17,23,27,733,726,733,844,49,55,60',
'64,69,73,77,298,-261,97,847,849,390,851,664,28,37,41,44,45,50,58,67',
'70,74,78,83,88,92,384,9,15,321,25,29,34,298,299,275,278,281,284,287',
'289,291,293,295,854,300,277,855,321,283,286,857,40,313,587,53,381,587',
'72,76,266,87,-261,96,294,377,297,20,276,279,282,285,288,290,292,61,296',
'643,353,350,84,89,93,4,10,16,334,669,876,33,38,646,280,878,-217,665',
'451,14,18,22,26,30,35,881,882,733,52,63,302,301,273,82,-72,91,95,6,11',
'17,23,27,888,647,648,587,49,55,60,64,69,73,77,266,587,97,314,315,316',
'317,318,28,37,41,44,45,50,58,67,70,74,78,83,88,92,637,9,15,649,25,29',
'34,266,302,166,266,153,150,127,98,903,587,3,,,,,,,,,40,,,53,,,72,76',
',87,,96,,,,20,,617,,,623,627,629,61,,,,,84,89,93,4,10,16,,,,33,38,14',
'18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,618,620,622,626,49',
'55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92',
',9,15,,25,29,34,298,-508,-508,-508,-508,284,287,,,-508,-508,,,,,,283',
'286,,40,,,53,,,72,76,,87,,96,294,,297,20,276,279,282,285,288,290,292',
'61,296,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82',
',91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44',
'45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,298,-508,-508,-508,-508',
'284,287,,,-508,-508,,,,,,283,286,,40,,,53,,,72,76,,87,,96,294,,297,20',
'276,279,282,285,288,290,292,61,296,,,,84,89,93,4,10,16,,,,33,38,14,18',
'22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73',
'77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29',
'34,298,,,,,,,,,,,,,,,,283,286,,40,,,53,,,72,76,,87,,96,294,,297,20,276',
'279,282,285,,,292,61,296,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30',
'35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97',
',,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,298,-508',
'-508,-508,-508,284,287,,,-508,-508,,,,,,283,286,,40,,,53,,,72,76,,87',
',96,294,,297,20,276,279,282,285,288,290,292,61,296,,,,84,89,93,4,10',
'16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,',
',,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,298,-508,-508,-508,-508,284,287,,,-508,-508,,',
',,,283,286,,40,,,53,,,72,76,,87,,96,294,,297,20,276,279,282,285,288',
'290,292,61,296,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52',
'63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28',
'37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,298,299,275,278',
'281,284,287,289,291,293,295,,-508,-508,,,283,286,,40,,,53,,,72,76,,87',
',96,294,,297,20,276,279,282,285,288,290,292,61,296,,,,84,89,93,4,10',
'16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,',
',,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,298,299,275,278,281,284,287,289,291,293,295,,-508',
'-508,,,283,286,,40,,,53,,,72,76,,87,,96,294,,297,20,276,279,282,285',
'288,290,292,61,296,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,',
',52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,',
',28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,298,,,,,',
',,,,,,,,,,283,286,,40,,,311,,,72,76,,87,,96,294,,297,20,276,279,282',
'285,,,292,61,296,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52',
'63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28',
'37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,298,299,275,278',
'281,284,287,289,,293,295,,,,,,283,286,,40,,,53,,,72,76,,87,,96,294,',
'297,20,276,279,282,285,288,290,292,61,296,,,,84,89,93,4,10,16,,,,33',
'38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60',
'64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15',
',25,29,34,298,-508,-508,-508,-508,284,287,,,-508,-508,,,,,,283,286,',
'40,,,311,,,72,76,,87,,96,294,,297,20,276,279,282,285,288,290,292,61',
'296,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91',
'95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50',
'58,67,70,74,78,83,88,92,,9,15,,25,29,34,298,,,,,,,,,,,,,,,,283,286,',
'40,,,53,,,72,76,,87,,96,294,,297,20,276,279,282,285,,,292,61,296,,,',
'84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6',
'11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58',
'67,70,74,78,83,88,92,,9,15,,25,29,34,298,299,275,278,281,284,287,,,293',
'295,,,,,,283,286,,40,,,53,,,72,76,,87,,96,294,,297,20,276,279,282,285',
'288,290,292,61,296,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,',
',52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,',
',28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,298,,,,,',
',,,,,,,,,,283,286,,40,,,53,,,72,76,,87,,96,294,,297,20,276,279,282,285',
',,292,61,296,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63',
',,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37',
'41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,298,,,,,,,,,,,,',
',,,283,286,,40,,,53,,,72,76,,87,,96,294,,,20,276,279,282,285,,,,61,',
',,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95',
'6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58',
'67,70,74,78,83,88,92,,9,15,,25,29,34,298,,,,,,,,,,,,,,,,283,286,,40',
',,53,,,72,76,,87,,96,294,,297,20,276,279,282,285,,,,61,,,,,84,89,93',
'4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23',
'27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,298,,,,,,,,,,,,,,,,283,286,,40,,,53,,,72',
'76,,87,,96,294,,297,20,276,279,282,285,,,,61,,,,,84,89,93,4,10,16,,',
',33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49',
'55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92',
',9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87,,96,,,,20,,,',
',,,,61,,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82',
',91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44',
'45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,40',
',,53,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,14',
'18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69',
'73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87,,96,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6',
'11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58',
'67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72',
'76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26',
'30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,',
',97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,',
',,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89',
'93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17',
'23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70',
'74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87',
',96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35',
',,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,',
',,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,',
',,,,,,,,,,,,40,,,53,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10',
'16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,',
',,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87,,96,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63',
',,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37',
'41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,40,,,311,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,',
'33,38,14,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55',
'60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,',
'9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87,,96,,,,20,,,,',
',,,61,,,,,84,89,93,4,10,16,,,,33,38,14,18,22,26,30,35,,,,52,63,,,,82',
',91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44',
'45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,40',
',,53,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,14',
'18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69',
'73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87,,96,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,,,,,,,,37,',
',45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73',
'77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88',
'92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,-483,-483,-483,,-483,,,,-483',
'-483,,,,-483,,-483,-483,-483,-483,-483,-483,-483,,-483,,,-483,-483,-483',
'-483,-483,-483,-483,,,,,,,,,,-483,,,-483,-483,-483,-483,-483,-483,-483',
'-483,-483,-483,,-483,-483,,-483,-483,-483,,,,,,,,,,,,,,,,,,,,-483,,',
'-483,-483,,-483,-483,,-483,,-483,,-483,,-483,,,,,,,,-483,,-483,,,-483',
'-483,-483,-483,-483,-483,,,,-483,-483,18,22,26,,35,,,,52,63,,,,82,,91',
'95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67',
'70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35',
',,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,55,60,64,69,73,77,,,,',
',,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,',
',,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,33,38,-484,-484,-484,,-484,,,,-484,-484,,,,-484,,-484,-484,-484',
'-484,-484,-484,-484,,-484,,,-484,-484,-484,-484,-484,-484,-484,,,,,',
',,,,-484,,,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,,-484,-484',
',-484,-484,-484,,,,,,,,,,,,,,,,,,,,-484,,,-484,-484,,-484,-484,,-484',
',-484,,-484,,-484,,,,,,,,-484,,-484,,,-484,-484,-484,-484,-484,-484',
',,,-484,-484,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,',
'114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92',
',9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58',
'67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,-251,-251',
'-251,,-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251',
',,,,-251,-251,-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251',
'-251,-251,-251,-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,',
',,,,,,,,,,,,,-251,,,-251,313,,-251,-251,,-251,,-251,,-251,,-251,,,,',
',,,-251,,,,,-251,-251,-251,-251,-251,-251,,,,-251,-251,18,22,26,,35',
',,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,',
',,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,',
',,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,',
',,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,45,50,58,67,70',
'74,78,83,88,92,617,9,15,623,627,629,110,,,,,,,,,,,,,,,,,,,,871,,,139',
',,72,76,,87,,,630,,,,,,,618,620,622,626,,,,,,84,89,93,4,10,16,,,,33',
'38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29',
'34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,45,50,58,67,70,74,78',
'83,88,92,617,9,15,623,627,629,110,,,,,,,,,,,,,,,,,,,,162,,,139,,,72',
'76,,87,,,630,,,,,,,618,620,622,626,,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73',
'77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88',
'92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,55,60,64,69,73,77,,,,,,,,,,37,,,45,50',
'58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22',
'26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73',
'77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,55,60,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92',
',9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45',
'50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,760,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38',
'18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69',
'73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,55,60,64,69,73,77,,,,,,,,,,37,,,45',
'50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33',
'38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,112,,,45,50,58,67,70,74,78,83,88,92,,9,15,,,,110',
',,,,,,,,,,,,,,,,,,,113,,,53,,,72,76,,87,,96,,,,,,,,,,,697,,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,176,180,185,191,196,201',
'205,210,,,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215',
'221,249,252,254,256,241,242,244,168,171,173,178,183,189,199,203,207',
'246,247,248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,,,237,257,,,18,22,26,,35,,,38,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',861,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35',
',,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,858,,131,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,',
',,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92',
',9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58',
'67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,853,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22',
'26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77',
',,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'55,60,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15',
',25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,389,76,,87,,146,,131,,20,,',
',,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,',
'91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58',
'67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,',
'35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,894,,131,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,55,60,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88',
'92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,',
',45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73',
'77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88',
'92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45',
'50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,55,60,64,69,73,77,,,,,,,,,,37,,,45',
'50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38',
'18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,176,180,185,191,196,201',
'205,210,,,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215',
'221,249,252,254,256,241,242,244,168,171,173,178,183,189,199,203,207',
'246,247,248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,,,237,257,,,18,22,26,,35,,,38,52,63,,,,82,,91,95,6,11,17',
'23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78',
'83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37',
',,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,176,180,185,191,196,201,205,210,,,228,231,232,235',
'240,,,169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241',
'242,244,168,171,173,178,183,189,199,203,207,246,247,248,226,253,,255',
',,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,',
',,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,257',
',,18,22,26,,35,,,38,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64',
'69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112',
',,45,50,418,67,70,74,419,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,415',
',,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4,10,16,,,,33,38,18,22',
'26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77',
',,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15',
',25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,591,,131,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58',
'67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26',
',35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,585,,131,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83',
'88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,176,180,185,191,196,201',
'205,210,,,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215',
'221,249,252,254,256,241,242,244,168,171,173,178,183,189,199,203,207',
'246,247,248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,,,237,257,,,18,22,26,,35,,,38,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,112,,,45,50,58,67,70,74,78,83,88,92,,9,15,',
',,110,,,,,,,,,,,,,,,,,,,,162,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84',
'89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,45,50,418,67,70,74',
'419,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,415,,,139,,,72,76,,87,',
',,,,,,,,,,,,,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,',
'82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,',
'45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27',
',,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88',
'92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,45',
'50,58,67,70,74,78,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,162,,,163',
',,72,76,,87,,164,,,,,,,,,,,,,,,,,84,89,93,4,10,16,,,,33,38,18,22,26',
',35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,55,60,64,69,73,77',
',,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88',
'92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,520,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,',
',45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27',
',,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88',
'92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,572,,131',
',20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,',
',45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27',
',,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88',
'92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,55,60,64,69,73,77,,,,,,,,,,37,,,45,50',
'58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22',
'26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77',
',,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,',
',,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4',
'10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,',
'49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,',
'9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,',
',,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,55,60,64,69,73,77,,,,,,,,,,37,,,45,50,58',
'67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,585,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,785,,131,,20,,,,,,,,141,,,,',
'84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78',
'83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37',
',,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,449,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38',
'18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,55,60,64',
'69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,-251,-251,-251,,-251',
',,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251',
'-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251',
'-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251',
',,-251,321,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251',
'-251,-251,-251,-251,,,,-251,-251,18,22,26,,35,,,,52,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67',
'70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35',
',,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15',
',25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60',
'64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78,83,88,92,,9,15',
',25,29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87,,96,,,,20,,,,,,,,61',
',,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74',
'78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,782,,131,,20,,,,,,,',
'141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67',
'70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,779,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22',
'26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,55,60,64,69,73',
'77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78',
'83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,55,60,64,69,73,77,,,,,,,,,,37,',
',45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,490,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,',
',,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60',
'64,69,73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25',
'29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17',
'23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67,70,74,78',
'83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63',
',,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,',
'45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73',
'77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,33,38,18,22,26,30,35,,,,52,63,,,,82,,91,95,6,11,17,23,27',
',,,,49,55,60,64,69,73,77,,,97,,,,,,28,37,41,44,45,50,58,67,70,74,78',
'83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,40,,,53,,,72,76,,87,,96',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,55,60,64,69,73,77,,,,,,,,,,37,',
',45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33',
'38,-251,-251,-251,,-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251,-251',
'-251,-251,,,,,-251,-251,-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251',
'-251,-251,-251,-251,-251,-251,-251,-251,-251,,-251,-251,,-251,-251,-251',
',,,,,,,,,,,,,,,,,,,-251,,,-251,321,,-251,-251,,-251,,-251,,-251,,-251',
',,,,,,,-251,,,,,-251,-251,-251,-251,-251,-251,,,,-251,-251,18,22,26',
',35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,33,38,-488,-488,-488,,-488,,,,-488,-488,,,,-488,,-488,-488,-488',
'-488,-488,-488,-488,,,,,-488,-488,-488,-488,-488,-488,-488,,,,,,,,,',
'-488,,,-488,-488,-488,-488,-488,-488,-488,-488,-488,-488,,-488,-488',
',-488,-488,-488,,,,,,,,,,,,,,,,,,,,-488,,,-488,-488,,-488,-488,,-488',
',-488,,-488,,-488,,,,,,,,-488,,,,,-488,-488,-488,-488,-488,-488,,,,-488',
'-488,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,112,,,45,50,58,67,70,74,78,83,88,92,,9,15,',
',,110,,,,,,,,,,,,,,,,,,,,113,,,53,,,72,76,,87,,96,,,,,,,,,,,,,,,,,84',
'89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78',
'83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,662',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,-489,-489,-489,,-489',
',,,-489,-489,,,,-489,,-489,-489,-489,-489,-489,-489,-489,,,,,-489,-489',
'-489,-489,-489,-489,-489,,,,,,,,,,-489,,,-489,-489,-489,-489,-489,-489',
'-489,-489,-489,-489,,-489,-489,,-489,-489,-489,,,,,,,,,,,,,,,,,,,,-489',
',,-489,-489,,-489,-489,,-489,,-489,,-489,,-489,,,,,,,,-489,,,,,-489',
'-489,-489,-489,-489,-489,,,,-489,-489,18,22,26,,35,,,,52,63,,,,82,,91',
'95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,,,,,,,,37,,,45,50,58,67',
'70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35',
',,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15',
',25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11',
'17,23,27,,,,,49,55,60,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78',
'83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,520',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63',
',,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,',
'45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18',
'22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73',
'77,,,97,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,11,17,23,27,,',
',,49,55,60,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,',
'9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,',
',,,141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91',
'95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,97,,,,,,,37,,,45,50,58,67',
'70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35',
',,,52,63,,,,82,,91,95,6,11,17,23,27,,,,,49,55,60,64,69,73,77,,,,,,,',
',,37,,,45,50,58,67,70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,',
',,,,136,,,139,,,72,76,,87,,520,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67,70,74,78,83,88,92,,9,15',
',25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,765,,,,20,,,,,,',
',141,,,,,84,89,93,4,10,16,,,,33,38,18,22,26,,35,,,,52,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,37,,,45,50,58,67',
'70,74,78,83,88,92,,9,15,,25,29,34,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,38,176,180,185',
'191,196,201,205,210,,,228,231,232,235,240,,,169,172,174,182,187,193',
'197,,,211,215,221,224,229,233,236,241,242,244,168,171,173,178,183,189',
'199,203,207,213,218,223,226,70,74,234,83,,,,,,,184,190,,200,204,214',
'219,,227,230,,,239,,,,,177,181,186,192,,,,,,220,,,,,,,243,170,,175,179',
'188,194,198,202,206,212,216,,225,,,237,176,180,185,191,196,201,205,210',
',,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215,221,249',
'252,254,256,241,242,244,168,171,173,178,183,189,199,203,207,246,247',
'248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,,,237,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169',
'172,174,182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168',
'171,173,178,183,189,199,203,207,246,247,248,226,340,342,255,343,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,176,180',
'185,191,196,201,205,210,,,228,231,232,235,240,,,169,172,174,182,187',
'193,197,,,211,215,221,249,252,254,256,241,242,244,168,171,173,178,183',
'189,199,203,207,246,247,248,226,340,342,255,343,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,664,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,,,237,298,299,275,278,281,284,287',
'289,291,293,295,,300,277,,,283,286,,,,,,,,,,,,,,294,,297,,276,279,282',
'285,288,290,292,,296,,576,366,,,577,,,,,,,,184,190,280,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,578,371,237,,579,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,604,366,237,,605,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,606,371,237,,607,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,298,299',
'275,278,281,284,287,289,291,293,295,,300,277,,,283,286,,,,-217,,,,,',
',,,,294,,297,,276,279,282,285,288,290,292,,296,,,,,,,503,371,,,504,',
',,,280,,-217,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,503',
'371,237,,504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,503,371,237,,504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,554,366,237,,555,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,,,237,298,299,275,278,281,284,287,289,291,293,295,',
'300,277,,,283,286,,,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292',
',296,,,,,,,557,371,,,558,,,,,280,,587,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,899,371,237,,900,,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,897,366,237,,898,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,503,371,237,,504,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,365,366,237,,367,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,715,366,237',
',716,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,503',
'371,237,,504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,370,371,237,,372,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,578,371,237,,579,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,,,237,298,299,275,278,281,284,287,289,291,293,295,',
'300,277,,,283,286,,,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292',
',296,,298,299,275,278,281,284,287,289,291,293,295,,300,277,280,642,283',
'286,,,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292,,296,298,299',
'275,278,281,284,287,289,291,293,295,,300,277,,280,283,286,,,,,,,,,,',
',,,294,,297,,276,279,282,285,288,290,292,,296,298,299,275,278,281,284',
'287,289,291,293,295,,300,277,266,280,283,286,,,,,,,,,,,,,,294,,297,',
'276,279,282,285,288,290,292,,296,298,299,275,278,281,284,287,289,291',
'293,295,,300,277,,280,283,286,,,,,,,,,,,,,,294,,297,,276,279,282,285',
'288,290,292,,296,298,299,275,278,281,284,287,289,291,293,295,,300,277',
',280,283,286,,,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292,,296',
'298,299,275,278,281,284,287,289,291,293,295,,300,277,266,280,283,286',
',,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292,,296,298,299,275',
'278,281,284,287,289,291,293,295,,300,277,,280,283,286,,,,,,,,,,,,,,294',
',297,,276,279,282,285,288,290,292,,296,298,299,275,278,281,284,287,289',
'291,293,295,,300,277,,280,283,286,,,,,,,,,,,,,,294,,297,,276,279,282',
'285,288,290,292,,296,298,299,275,278,281,284,287,289,291,293,295,,300',
'277,,280,283,286,,,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292',
',296,298,299,275,278,281,284,287,289,291,293,295,,300,277,,280,283,286',
',,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292,,296,298,299,275',
'278,281,284,287,289,291,293,295,,300,277,,280,283,286,,,,,,,,,,,,,,294',
',297,,276,279,282,285,288,290,292,,296,298,299,275,278,281,284,287,289',
'291,293,295,,300,277,,280,283,286,,,,,,,,,,,,,,294,,297,,276,279,282',
'285,288,290,292,,296,298,299,275,278,281,284,287,289,291,293,295,,300',
'277,,280,283,286,,,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292',
',296,298,299,275,278,281,284,287,289,291,293,295,,300,277,,280,283,286',
',,,,,,,,,,,,,294,,297,,276,279,282,285,288,290,292,,296,298,299,275',
'278,281,284,287,289,291,293,295,,300,277,,280,283,286,,,,,,,,,,,,,,294',
',297,,276,279,282,285,288,290,292,,296,,,,,,,,,,,,,,,,280' ]
        racc_action_table = arr = Array.new(23912, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'67,763,82,870,82,108,8,67,67,67,870,105,67,67,67,417,67,558,391,647',
'569,631,631,500,561,386,67,67,900,415,481,639,639,415,149,67,67,897',
'67,67,67,67,67,899,51,381,66,57,57,57,57,57,51,66,846,813,647,561,386',
'870,569,307,324,481,67,67,67,67,67,67,67,67,67,67,67,67,67,67,391,391',
'67,67,67,539,639,67,108,391,67,8,636,67,7,67,105,67,149,67,558,67,67',
'67,67,67,67,67,108,67,631,67,82,763,897,763,600,82,763,417,558,600,650',
'367,67,67,67,67,381,67,367,367,367,67,692,111,367,367,417,367,900,693',
'900,417,331,900,159,331,381,897,606,897,557,159,897,899,7,899,367,367',
'899,367,367,367,367,367,846,813,846,813,380,846,813,307,324,307,324',
'7,307,324,554,539,345,539,708,345,539,367,367,367,367,367,367,367,367',
'367,367,367,367,367,367,555,159,367,367,367,352,367,521,535,218,367',
'499,521,606,692,111,218,367,499,367,715,367,367,367,367,367,367,367',
'708,367,606,367,557,128,692,111,693,373,693,385,464,693,554,653,367',
'367,400,367,365,367,606,367,557,367,606,365,365,365,499,635,554,365',
'365,555,365,352,352,352,655,789,715,464,385,365,789,464,464,715,341',
'660,554,555,715,365,365,158,365,365,365,365,365,400,158,128,128,128',
'333,607,348,333,229,555,99,715,535,99,535,229,347,535,634,347,365,365',
'365,365,365,365,365,365,365,365,365,365,365,365,715,363,365,365,365',
'874,365,874,418,419,365,39,341,341,341,158,39,365,604,365,406,365,365',
'365,365,365,365,365,370,365,365,365,348,348,348,607,99,99,337,156,337',
'593,593,888,365,365,156,365,505,365,888,365,607,365,667,505,505,505',
'418,419,505,505,505,668,505,418,419,346,604,370,418,419,607,370,505',
'604,607,619,721,676,604,273,619,505,505,721,505,505,505,505,505,418',
'419,716,628,156,605,413,409,888,716,604,869,605,413,716,898,335,605',
'869,578,135,428,898,418,419,110,110,898,428,868,79,273,505,604,624,273',
'868,79,621,505,161,599,5,721,505,505,713,161,599,5,233,713,104,130,733',
'733,903,233,716,104,130,605,413,903,578,135,505,869,873,873,36,898,19',
'132,577,577,577,428,577,505,330,505,577,577,505,868,79,577,328,577,577',
'577,577,577,577,577,161,599,5,840,577,577,577,577,577,577,577,754,104',
'130,617,36,903,19,754,36,577,19,132,577,577,577,577,577,577,577,577',
'577,577,696,577,577,552,577,577,577,579,327,327,34,34,224,213,223,840',
'840,840,840,224,213,223,31,31,208,754,577,577,310,577,577,208,577,577',
'372,577,236,577,699,577,309,577,728,236,552,728,728,728,552,577,645',
'645,579,730,577,577,577,577,577,577,702,234,308,577,577,576,576,576',
'234,576,306,306,577,576,576,372,641,274,576,372,576,576,576,576,576',
'576,576,728,728,728,728,576,576,576,576,576,576,576,730,730,730,730',
'616,462,253,615,709,576,253,253,576,576,576,576,576,576,576,576,576',
'576,264,576,576,712,576,576,576,474,474,474,474,474,474,474,462,429',
'474,474,462,462,462,462,263,474,474,260,576,576,717,576,576,258,576',
'576,608,576,446,576,474,576,474,576,474,474,474,474,474,474,474,576',
'474,461,722,502,576,576,576,576,576,576,502,502,502,576,576,502,502',
'502,447,502,455,465,576,541,541,458,541,541,541,502,732,589,461,735',
'736,587,461,461,502,502,739,502,502,502,502,502,586,584,580,573,394',
'394,465,747,394,750,465,465,465,465,751,753,394,394,570,394,394,394',
'394,755,394,394,559,556,394,759,162,761,502,394,394,394,394,160,764',
'502,150,553,147,145,502,502,144,773,775,394,394,778,394,394,394,394',
'394,394,394,394,394,143,394,780,136,394,502,148,148,148,148,148,473',
'134,269,269,269,269,269,502,546,502,269,269,502,790,542,269,796,269',
'269,269,269,269,269,269,797,799,800,802,269,269,269,269,269,269,269',
'477,809,269,810,812,127,815,517,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,121,269,269,120,269,269,269,517,517,517,517,517',
'517,517,517,517,517,517,823,517,517,824,116,517,517,826,269,115,831',
'269,113,834,269,269,112,269,533,269,517,109,517,269,517,517,517,517',
'517,517,517,269,517,480,94,90,269,269,269,269,269,269,81,523,856,269',
'269,485,517,859,517,519,269,139,139,139,139,139,139,864,865,866,139',
'139,48,44,40,139,487,139,139,139,139,139,139,139,871,488,489,877,139',
'139,139,139,139,139,139,37,880,139,450,450,450,450,450,139,139,139,139',
'139,139,139,139,139,139,139,139,139,139,884,139,139,496,139,139,139',
'506,497,24,498,18,16,10,3,901,902,1,,,,,,,,,139,,,139,,,139,139,,139',
',139,,,,139,,630,,,630,630,630,139,,,,,139,139,139,139,139,139,,,,139',
'139,522,522,522,522,522,522,,,,522,522,,,,522,,522,522,522,522,522,522',
'522,630,630,630,630,522,522,522,522,522,522,522,,,522,,,,,,522,522,522',
'522,522,522,522,522,522,522,522,522,522,522,,522,522,,522,522,522,460',
'460,460,460,460,460,460,,,460,460,,,,,,460,460,,522,,,522,,,522,522',
',522,,522,460,,460,522,460,460,460,460,460,460,460,522,460,,,,522,522',
'522,522,522,522,,,,522,522,483,483,483,483,483,483,,,,483,483,,,,483',
',483,483,483,483,483,483,483,,,,,483,483,483,483,483,483,483,,,483,',
',,,,483,483,483,483,483,483,483,483,483,483,483,483,483,483,,483,483',
',483,483,483,454,454,454,454,454,454,454,,,454,454,,,,,,454,454,,483',
',,483,,,483,483,,483,,483,454,,454,483,454,454,454,454,454,454,454,483',
'454,,,,483,483,483,483,483,483,,,,483,483,265,265,265,265,265,265,,',
',265,265,,,,265,,265,265,265,265,265,265,265,,,,,265,265,265,265,265',
'265,265,,,265,,,,,,265,265,265,265,265,265,265,265,265,265,265,265,265',
'265,,265,265,,265,265,265,466,,,,,,,,,,,,,,,,466,466,,265,,,265,,,265',
'265,,265,,265,466,,466,265,466,466,466,466,,,466,265,466,,,,265,265',
'265,265,265,265,,,,265,265,720,720,720,720,720,720,,,,720,720,,,,720',
',720,720,720,720,720,720,720,,,,,720,720,720,720,720,720,720,,,720,',
',,,,720,720,720,720,720,720,720,720,720,720,720,720,720,720,,720,720',
',720,720,720,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,,720',
',,720,,,720,720,,720,,720,478,,478,720,478,478,478,478,478,478,478,720',
'478,,,,720,720,720,720,720,720,,,,720,720,738,738,738,738,738,738,,',
',738,738,,,,738,,738,738,738,738,738,738,738,,,,,738,738,738,738,738',
'738,738,,,738,,,,,,738,738,738,738,738,738,738,738,738,738,738,738,738',
'738,,738,738,,738,738,738,472,472,472,472,472,472,472,,,472,472,,,,',
',472,472,,738,,,738,,,738,738,,738,,738,472,,472,738,472,472,472,472',
'472,472,472,738,472,,,,738,738,738,738,738,738,,,,738,738,745,745,745',
'745,745,745,,,,745,745,,,,745,,745,745,745,745,745,745,745,,,,,745,745',
'745,745,745,745,745,,,745,,,,,,745,745,745,745,745,745,745,745,745,745',
'745,745,745,745,,745,745,,745,745,745,479,479,479,479,479,479,479,479',
'479,479,479,,479,479,,,479,479,,745,,,745,,,745,745,,745,,745,479,,479',
'745,479,479,479,479,479,479,479,745,479,,,,745,745,745,745,745,745,',
',,745,745,540,540,540,540,540,540,,,,540,540,,,,540,,540,540,540,540',
'540,540,540,,,,,540,540,540,540,540,540,540,,,540,,,,,,540,540,540,540',
'540,540,540,540,540,540,540,540,540,540,,540,540,,540,540,540,456,456',
'456,456,456,456,456,456,456,456,456,,456,456,,,456,456,,540,,,540,,',
'540,540,,540,,540,456,,456,540,456,456,456,456,456,456,456,540,456,',
',,540,540,540,540,540,540,,,,540,540,163,163,163,163,163,163,,,,163',
'163,,,,163,,163,163,163,163,163,163,163,,,,,163,163,163,163,163,163',
'163,,,163,,,,,,163,163,163,163,163,163,163,163,163,163,163,163,163,163',
',163,163,,163,163,163,467,,,,,,,,,,,,,,,,467,467,,163,,,163,,,163,163',
',163,,163,467,,467,163,467,467,467,467,,,467,163,467,,,,163,163,163',
'163,163,163,,,,163,163,625,625,625,625,625,625,,,,625,625,,,,625,,625',
'625,625,625,625,625,625,,,,,625,625,625,625,625,625,625,,,625,,,,,,625',
'625,625,625,625,625,625,625,625,625,625,625,625,625,,625,625,,625,625',
'625,470,470,470,470,470,470,470,470,,470,470,,,,,,470,470,,625,,,625',
',,625,625,,625,,625,470,,470,625,470,470,470,470,470,470,470,625,470',
',,,625,625,625,625,625,625,,,,625,625,311,311,311,311,311,311,,,,311',
'311,,,,311,,311,311,311,311,311,311,311,,,,,311,311,311,311,311,311',
'311,,,311,,,,,,311,311,311,311,311,311,311,311,311,311,311,311,311,311',
',311,311,,311,311,311,457,457,457,457,457,457,457,,,457,457,,,,,,457',
'457,,311,,,311,,,311,311,,311,,311,457,,457,311,457,457,457,457,457',
'457,457,311,457,,,,311,311,311,311,311,311,,,,311,311,767,767,767,767',
'767,767,,,,767,767,,,,767,,767,767,767,767,767,767,767,,,,,767,767,767',
'767,767,767,767,,,767,,,,,,767,767,767,767,767,767,767,767,767,767,767',
'767,767,767,,767,767,,767,767,767,463,,,,,,,,,,,,,,,,463,463,,767,,',
'767,,,767,767,,767,,767,463,,463,767,463,463,463,463,,,463,767,463,',
',,767,767,767,767,767,767,,,,767,767,772,772,772,772,772,772,,,,772',
'772,,,,772,,772,772,772,772,772,772,772,,,,,772,772,772,772,772,772',
'772,,,772,,,,,,772,772,772,772,772,772,772,772,772,772,772,772,772,772',
',772,772,,772,772,772,468,468,468,468,468,468,468,,,468,468,,,,,,468',
'468,,772,,,772,,,772,772,,772,,772,468,,468,772,468,468,468,468,468',
'468,468,772,468,,,,772,772,772,772,772,772,,,,772,772,301,301,301,301',
'301,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,301,301,301',
'301,301,301,301,,,301,,,,,,301,301,301,301,301,301,301,301,301,301,301',
'301,301,301,,301,301,,301,301,301,469,,,,,,,,,,,,,,,,469,469,,301,,',
'301,,,301,301,,301,,301,469,,469,301,469,469,469,469,,,469,301,469,',
',,301,301,301,301,301,301,,,,301,301,698,698,698,698,698,698,,,,698',
'698,,,,698,,698,698,698,698,698,698,698,,,,,698,698,698,698,698,698',
'698,,,698,,,,,,698,698,698,698,698,698,698,698,698,698,698,698,698,698',
',698,698,,698,698,698,476,,,,,,,,,,,,,,,,476,476,,698,,,698,,,698,698',
',698,,698,476,,,698,476,476,476,476,,,,698,,,,,698,698,698,698,698,698',
',,,698,698,806,806,806,806,806,806,,,,806,806,,,,806,,806,806,806,806',
'806,806,806,,,,,806,806,806,806,806,806,806,,,806,,,,,,806,806,806,806',
'806,806,806,806,806,806,806,806,806,806,,806,806,,806,806,806,471,,',
',,,,,,,,,,,,,471,471,,806,,,806,,,806,806,,806,,806,471,,471,806,471',
'471,471,471,,,,806,,,,,806,806,806,806,806,806,,,,806,806,610,610,610',
'610,610,610,,,,610,610,,,,610,,610,610,610,610,610,610,610,,,,,610,610',
'610,610,610,610,610,,,610,,,,,,610,610,610,610,610,610,610,610,610,610',
'610,610,610,610,,610,610,,610,610,610,475,,,,,,,,,,,,,,,,475,475,,610',
',,610,,,610,610,,610,,610,475,,475,610,475,475,475,475,,,,610,,,,,610',
'610,610,610,610,610,,,,610,610,820,820,820,820,820,820,,,,820,820,,',
',820,,820,820,820,820,820,820,820,,,,,820,820,820,820,820,820,820,,',
'820,,,,,,820,820,820,820,820,820,820,820,820,820,820,820,820,820,,820',
'820,,820,820,820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820,820,,820,,820,,',
',820,,,,,,,,820,,,,,820,820,820,820,820,820,,,,820,820,825,825,825,825',
'825,825,,,,825,825,,,,825,,825,825,825,825,825,825,825,,,,,825,825,825',
'825,825,825,825,,,825,,,,,,825,825,825,825,825,825,825,825,825,825,825',
'825,825,825,,825,825,,825,825,825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825',
'825,,825,,825,,,,825,,,,,,,,825,,,,,825,825,825,825,825,825,,,,825,825',
'836,836,836,836,836,836,,,,836,836,,,,836,,836,836,836,836,836,836,836',
',,,,836,836,836,836,836,836,836,,,836,,,,,,836,836,836,836,836,836,836',
'836,836,836,836,836,836,836,,836,836,,836,836,836,,,,,,,,,,,,,,,,,,',
',836,,,836,,,836,836,,836,,836,,,,836,,,,,,,,836,,,,,836,836,836,836',
'836,836,,,,836,836,501,501,501,501,501,501,,,,501,501,,,,501,,501,501',
'501,501,501,501,501,,,,,501,501,501,501,501,501,501,,,501,,,,,,501,501',
'501,501,501,501,501,501,501,501,501,501,501,501,,501,501,,501,501,501',
',,,,,,,,,,,,,,,,,,,501,,,501,,,501,501,,501,,501,,,,501,,,,,,,,501,',
',,,501,501,501,501,501,501,,,,501,501,867,867,867,867,867,867,,,,867',
'867,,,,867,,867,867,867,867,867,867,867,,,,,867,867,867,867,867,867',
'867,,,867,,,,,,867,867,867,867,867,867,867,867,867,867,867,867,867,867',
',867,867,,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867,867,,867,,867',
',,,867,,,,,,,,867,,,,,867,867,867,867,867,867,,,,867,867,839,839,839',
'839,839,839,,,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,839,839',
'839,839,839,839,839,,,839,,,,,,839,839,839,839,839,839,839,839,839,839',
'839,839,839,839,,839,839,,839,839,839,,,,,,,,,,,,,,,,,,,,839,,,839,',
',839,839,,839,,839,,,,839,,,,,,,,839,,,,,839,839,839,839,839,839,,,',
'839,839,453,453,453,453,453,453,,,,453,453,,,,453,,453,453,453,453,453',
'453,453,,,,,453,453,453,453,453,453,453,,,453,,,,,,453,453,453,453,453',
'453,453,453,453,453,453,453,453,453,,453,453,,453,453,453,,,,,,,,,,',
',,,,,,,,,453,,,453,,,453,453,,453,,453,,,,453,,,,,,,,453,,,,,453,453',
'453,453,453,453,,,,453,453,695,695,695,695,695,695,,,,695,695,,,,695',
',695,695,695,695,695,695,695,,,,,695,695,695,695,695,695,695,,,695,',
',,,,695,695,695,695,695,695,695,695,695,695,695,695,695,695,,695,695',
',695,695,695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,,695,,695,,,,695',
',,,,,,,695,,,,,695,695,695,695,695,695,,,,695,695,53,53,53,53,53,53',
',,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,53,53,53,53,53,53,53,,,53,',
',,,,53,53,53,53,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53,,,,,',
',,,,,,,,,,,,,,53,,,53,,,53,53,,53,,53,,,,53,,,,,,,,53,,,,,53,53,53,53',
'53,53,,,,53,53,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,2,2,2,2,2',
'2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,',
',,,,2,,,2,,,2,2,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,850,850,850',
'850,850,850,,,,850,850,,,,850,,850,850,850,850,850,850,850,,,,,850,850',
'850,850,850,850,850,,,850,,,,,,850,850,850,850,850,850,850,850,850,850',
'850,850,850,850,,850,850,,850,850,850,,,,,,,,,,,,,,,,,,,,850,,,850,',
',850,850,,850,,850,,,,850,,,,,,,,850,,,,,850,850,850,850,850,850,,,',
'850,850,766,766,766,766,766,766,,,,766,766,,,,766,,766,766,766,766,766',
'766,766,,,,,766,766,766,766,766,766,766,,,766,,,,,,766,766,766,766,766',
'766,766,766,766,766,766,766,766,766,,766,766,,766,766,766,,,,,,,,,,',
',,,,,,,,,766,,,766,,,766,766,,766,,766,,,,766,,,,,,,,766,,,,,766,766',
'766,766,766,766,,,,766,766,286,286,286,,286,,,,286,286,,,,286,,286,286',
'286,286,286,286,286,,,,,286,286,286,286,286,286,286,,,,,,,,,,286,,,286',
'286,286,286,286,286,286,286,286,286,,286,286,,286,286,286,,,,,,,,,,',
',,,,,,,,,286,,,286,,,286,286,,286,,,,,,286,,,,,,,,286,,,,,286,286,286',
'286,286,286,,,,286,286,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61',
'61,,,,,61,61,61,61,61,61,61,,,,,,,,,,61,,,61,61,61,61,61,61,61,61,61',
'61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,61,,,,,,61,',
',,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,63,63,63,,63,,,,63,63,,,,63',
',63,63,63,63,63,63,63,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63',
'63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63',
',,63,63,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63,,,,63,63,853,853',
'853,,853,,,,853,853,,,,853,,853,853,853,853,853,853,853,,,,,853,853',
'853,853,853,853,853,,,,,,,,,,853,,,853,853,853,853,853,853,853,853,853',
'853,,853,853,,853,853,853,,,,,,,,,,,,,,,,,,,,853,,,853,,,853,853,,853',
',,,,,853,,,,,,,,853,,,,,853,853,853,853,853,853,,,,853,853,58,58,58',
',58,,,,58,58,,,,58,,58,58,58,58,58,58,58,,58,,,58,58,58,58,58,58,58',
',,,,,,,,,58,,,58,58,58,58,58,58,58,58,58,58,,58,58,,58,58,58,,,,,,,',
',,,,,,,,,,,,58,,,58,58,,58,58,,58,,58,,58,,58,,,,,,,,58,,58,,,58,58',
'58,58,58,58,,,,58,58,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72',
'72,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72',
'72,72,,72,72,,72,72,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,72,,,,,,72',
',,,,,,,72,,,,,72,72,72,72,72,72,,,,72,72,76,76,76,,76,,,,76,76,,,,76',
',76,76,76,76,76,76,76,,,,,76,76,76,76,76,76,76,,,,,,,,,,76,,,76,76,76',
'76,76,76,76,76,76,76,,76,76,,76,76,76,,,,,,,,,,,,,,,,,,,,76,,,76,,,76',
'76,,76,,76,,,,76,,,,,,,,76,,,,,76,76,76,76,76,76,,,,76,76,78,78,78,',
'78,,,,78,78,,,,78,,78,78,78,78,78,78,78,,78,,,78,78,78,78,78,78,78,',
',,,,,,,,78,,,78,78,78,78,78,78,78,78,78,78,,78,78,,78,78,78,,,,,,,,',
',,,,,,,,,,,78,,,78,78,,78,78,,78,,78,,78,,78,,,,,,,,78,,78,,,78,78,78',
'78,78,78,,,,78,78,572,572,572,,572,,,,572,572,,,,572,,572,572,572,572',
'572,572,572,,,,,572,572,572,572,572,572,572,,,,,,,,,,572,,,572,572,572',
'572,572,572,572,572,572,572,,572,572,,572,572,572,,,,,,,,,,,,,,,,,,',
',572,,,572,,,572,572,,572,,,,,,572,,,,,,,,572,,,,,572,572,572,572,572',
'572,,,,572,572,858,858,858,,858,,,,858,858,,,,858,,858,858,858,858,858',
'858,858,,,,,858,858,858,858,858,858,858,,,,,,,,,,858,,,858,858,858,858',
'858,858,858,858,858,858,,858,858,,858,858,858,,,,,,,,,,,,,,,,,,,,858',
',,858,,,858,858,,858,,,,,,858,,,,,,,,858,,,,,858,858,858,858,858,858',
',,,858,858,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55,55,55,55,,,,,55',
'55,55,55,55,55,55,,,,,,,,,,55,,,55,55,55,55,55,55,55,55,55,55,,55,55',
',55,55,55,,,,,,,,,,,,,,,,,,,,55,,,55,55,,55,55,,55,,55,,55,,55,,,,,',
',,55,,,,,55,55,55,55,55,55,,,,55,55,52,52,52,,52,,,,52,52,,,,52,,52',
'52,52,52,52,52,52,,,,,52,52,52,52,52,52,52,,,52,,,,,,,52,,,52,52,52',
'52,52,52,52,52,52,52,,52,52,,52,52,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,52',
'52,,52,,,,,,52,,,,,,,,52,,,,,52,52,52,52,52,52,,,,52,52,87,87,87,,87',
',,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,87,87,87,87,87,87,87,,,,,,',
',,,87,,,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,,,,,,,,,',
',,,,,,87,,,87,,,87,87,,87,,,,,,87,,,,,,,,87,,,,,87,87,87,87,87,87,,',
',87,87,847,847,847,,847,,,,847,847,,,,847,,847,847,847,847,847,847,847',
',,,,847,847,847,847,847,847,847,,,,,,,,,,847,,,847,847,847,847,847,847',
'847,847,847,847,435,847,847,435,435,435,847,,,,,,,,,,,,,,,,,,,,847,',
',847,,,847,847,,847,,,435,,,,,,,435,435,435,435,,,,,,847,847,847,847',
'847,847,,,,847,847,585,585,585,,585,,,,585,585,,,,585,,585,585,585,585',
'585,585,585,,,,,585,585,585,585,585,585,585,,,,,,,,,,585,,,585,585,585',
'585,585,585,585,585,585,585,,585,585,,585,585,585,,,,,,,,,,,,,,,,,,',
',585,,,585,,,585,585,,585,,,,,,585,,,,,,,,585,,,,,585,585,585,585,585',
'585,,,,585,585,96,96,96,,96,,,,96,96,,,,96,,96,96,96,96,96,96,96,,,',
',96,96,96,96,96,96,96,,,,,,,,,,96,,,96,96,96,96,96,96,96,96,96,96,792',
'96,96,792,792,792,96,,,,,,,,,,,,,,,,,,,,96,,,96,,,96,96,,96,,,792,,',
',,,,792,792,792,792,,,,,,96,96,96,96,96,96,,,,96,96,97,97,97,,97,,,',
'97,97,,,,97,,97,97,97,97,97,97,97,,,,,97,97,97,97,97,97,97,,,97,,,,',
',,97,,,97,97,97,97,97,97,97,97,97,97,,97,97,,97,97,97,,,,,,,,,,,,,,',
',,,,,97,,,97,,,97,97,,97,,,,,,97,,,,,,,,97,,,,,97,97,97,97,97,97,,,',
'97,97,591,591,591,,591,,,,591,591,,,,591,,591,591,591,591,591,591,591',
',,,,591,591,591,591,591,591,591,,,,,,,,,,591,,,591,591,591,591,591,591',
'591,591,591,591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,',
',591,591,,591,,,,,,591,,,,,,,,591,,,,,591,591,591,591,591,591,,,,591',
'591,596,596,596,,596,,,,596,596,,,,596,,596,596,596,596,596,596,596',
',,,,596,596,596,596,596,596,596,,,,,,,,,,596,,,596,596,596,596,596,596',
'596,596,596,596,,596,596,,596,596,596,,,,,,,,,,,,,,,,,,,,596,,,596,',
',596,596,,596,,596,,,,596,,,,,,,,596,,,,,596,596,596,596,596,596,,,',
'596,596,861,861,861,,861,,,,861,861,,,,861,,861,861,861,861,861,861',
'861,,,,,861,861,861,861,861,861,861,,,,,,,,,,861,,,861,861,861,861,861',
'861,861,861,861,861,,861,861,,861,861,861,,,,,,,,,,,,,,,,,,,,861,,,861',
',,861,861,,861,,,,,,861,,,,,,,,861,,,,,861,861,861,861,861,861,,,,861',
'861,103,103,103,,103,,,,103,103,,,,103,,103,103,103,103,103,103,103',
',,,,103,103,103,103,103,103,103,,,,,,,,,,103,,,103,103,103,103,103,103',
'103,103,103,103,,103,103,,103,103,103,,,,,,,,,,,,,,,,,,,,103,,,103,',
',103,103,,103,,103,,,,103,,,,,,,,103,,,,,103,103,103,103,103,103,,,',
'103,103,665,665,665,,665,,,,665,665,,,,665,,665,665,665,665,665,665',
'665,,,,,665,665,665,665,665,665,665,,,,,,,,,,665,,,665,665,665,665,665',
'665,665,665,665,665,,665,665,,665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665',
',,665,665,,665,,665,,,,665,,,,,,,,665,,,,,665,665,665,665,665,665,,',
',665,665,449,449,449,,449,,,,449,449,,,,449,,449,449,449,449,449,449',
'449,,,,,449,449,449,449,449,449,449,,,449,,,,,,,449,,,449,449,449,449',
'449,449,449,449,449,449,,449,449,,449,449,449,,,,,,,,,,,,,,,,,,,,449',
',,449,,,449,449,,449,,,,,,449,,,,,,,,449,,,,,449,449,449,449,449,449',
',,,449,449,445,445,445,,445,,,,445,445,,,,445,,445,445,445,445,445,445',
'445,,,,,445,445,445,445,445,445,445,,,,,,,,,,445,,,445,445,445,445,445',
'445,445,445,445,445,,445,445,,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445',
',,445,445,,445,,,,,,445,,,,,,,,445,,,,,445,445,445,445,445,445,,,,445',
'445,49,49,49,,49,,,,49,49,,,,49,,49,49,49,49,49,49,49,,,,,49,49,49,49',
'49,49,49,,,,,,,,,,49,,,49,49,49,49,49,49,49,49,49,49,,49,49,,49,49,49',
',,,,,,,,,,,,,,,,,,,49,,,49,,,49,49,,49,,49,,49,,49,,,,,,,,49,,,,,49',
'49,49,49,49,49,,,,49,49,564,564,564,,564,,,,564,564,,,,564,,564,564',
'564,564,564,564,564,,,,,564,564,564,564,564,564,564,,,,,,,,,,564,,,564',
'564,564,564,564,564,564,564,564,564,,564,564,,,,564,,,,,,,,,,,,,,,,',
',,,564,,,564,,,564,564,,564,,564,,,,,,,,,,,564,,,,,,564,564,564,564',
'564,564,,,,564,564,444,444,444,,444,,,,444,444,,,,444,,444,444,444,444',
'444,444,444,,,,,444,444,444,444,444,444,444,,,,,,,,,,444,,,444,444,444',
'444,444,444,444,444,444,444,,444,444,,444,444,444,,,,,,,,,,,,,,,,,,',
',444,,,444,,,444,444,,444,,,,,,444,,,,,,,,444,,,,,444,444,444,444,444',
'444,,,,444,444,437,437,437,437,437,437,437,437,,,437,437,437,437,437',
',,437,437,437,437,437,437,437,,,437,437,437,437,437,437,437,437,437',
'437,437,437,437,437,437,437,437,437,437,437,437,437,437,,,437,,,,,,',
',437,437,,437,437,437,437,,437,437,,,437,,,,,437,437,437,437,,,,,,,',
',,,,,437,437,,437,437,437,437,437,437,437,437,437,,437,,,437,437,,,832',
'832,832,,832,,,437,832,832,,,,832,,832,832,832,832,832,832,832,,,,,832',
'832,832,832,832,832,832,,,,,,,,,,832,,,832,832,832,832,832,832,832,832',
'832,832,,832,832,,832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832,,,832,832',
',832,,832,,832,,832,,,,,,,,832,,,,,832,832,832,832,832,832,,,,832,832',
'829,829,829,,829,,,,829,829,,,,829,,829,829,829,829,829,829,829,,,,',
'829,829,829,829,829,829,829,,,,,,,,,,829,,,829,829,829,829,829,829,829',
'829,829,829,,829,829,,829,829,829,,,,,,,,,,,,,,,,,,,,829,,,829,,,829',
'829,,829,,829,,829,,829,,,,,,,,829,,,,,829,829,829,829,829,829,,,,829',
'829,560,560,560,,560,,,,560,560,,,,560,,560,560,560,560,560,560,560',
',,,,560,560,560,560,560,560,560,,,560,,,,,,,560,,,560,560,560,560,560',
'560,560,560,560,560,,560,560,,560,560,560,,,,,,,,,,,,,,,,,,,,560,,,560',
',,560,560,,560,,,,,,560,,,,,,,,560,,,,,560,560,560,560,560,560,,,,560',
'560,821,821,821,,821,,,,821,821,,,,821,,821,821,821,821,821,821,821',
',,,,821,821,821,821,821,821,821,,,,,,,,,,821,,,821,821,821,821,821,821',
'821,821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,,,,,,,,821,,,821,',
',821,821,,821,,821,,,,821,,,,,,,,821,,,,,821,821,821,821,821,821,,,',
'821,821,551,551,551,,551,,,,551,551,,,,551,,551,551,551,551,551,551',
'551,,,,,551,551,551,551,551,551,551,,,,,,,,,,551,,,551,551,551,551,551',
'551,551,551,551,551,,551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551',
',,551,551,,551,,,,,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551',
'551,124,124,124,,124,,,,124,124,,,,124,,124,124,124,124,124,124,124',
',,,,124,124,124,124,124,124,124,,,,,,,,,,124,,,124,124,124,124,124,124',
'124,124,124,124,,124,124,,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,',
',124,124,,124,,124,,124,,124,,,,,,,,124,,,,,124,124,124,124,124,124',
',,,124,124,436,436,436,,436,,,,436,436,,,,436,,436,436,436,436,436,436',
'436,,,,,436,436,436,436,436,436,436,,,436,,,,,,,436,,,436,436,436,436',
'436,436,436,436,436,436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436',
',,436,,,436,436,,436,,,,,,436,,,,,,,,436,,,,,436,436,436,436,436,436',
',,,436,436,878,878,878,,878,,,,878,878,,,,878,,878,878,878,878,878,878',
'878,,,,,878,878,878,878,878,878,878,,,,,,,,,,878,,,878,878,878,878,878',
'878,878,878,878,878,,878,878,,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878',
',,878,878,,878,,878,,878,,878,,,,,,,,878,,,,,878,878,878,878,878,878',
',,,878,878,426,426,426,,426,,,,426,426,,,,426,,426,426,426,426,426,426',
'426,,,,,426,426,426,426,426,426,426,,,,,,,,,,426,,,426,426,426,426,426',
'426,426,426,426,426,,426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426',
',,426,426,,426,,426,,,,426,,,,,,,,426,,,,,426,426,426,426,426,426,,',
',426,426,131,131,131,,131,,,,131,131,,,,131,,131,131,131,131,131,131',
'131,,,,,131,131,131,131,131,131,131,,,,,,,,,,131,,,131,131,131,131,131',
'131,131,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131',
',,131,131,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131',
'131,550,550,550,,550,,,,550,550,,,,550,,550,550,550,550,550,550,550',
',,,,550,550,550,550,550,550,550,,,,,,,,,,550,,,550,550,550,550,550,550',
'550,550,550,550,,550,550,,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550,',
',550,550,,550,,,,,,550,,,,,,,,550,,,,,550,550,550,550,550,550,,,,550',
'550,785,785,785,,785,,,,785,785,,,,785,,785,785,785,785,785,785,785',
',,,,785,785,785,785,785,785,785,,,,,,,,,,785,,,785,785,785,785,785,785',
'785,785,785,785,,785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,',
',785,785,,785,,,,,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785',
'785,783,783,783,,783,,,,783,783,,,,783,,783,783,783,783,783,783,783',
',,,,783,783,783,783,783,783,783,,,,,,,,,,783,,,783,783,783,783,783,783',
'783,783,783,783,,783,783,,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,',
',783,783,,783,,,,,,783,,,,,,,,783,,,,,783,783,783,783,783,783,,,,783',
'783,782,782,782,,782,,,,782,782,,,,782,,782,782,782,782,782,782,782',
',,,,782,782,782,782,782,782,782,,,,,,,,,,782,,,782,782,782,782,782,782',
'782,782,782,782,,782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,',
',782,782,,782,,,,,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782',
'782,545,545,545,,545,,,,545,545,,,,545,,545,545,545,545,545,545,545',
',,,,545,545,545,545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545,545',
'545,545,545,545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,',
',545,545,,545,,,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545',
'545,887,887,887,,887,,,,887,887,,,,887,,887,887,887,887,887,887,887',
',,,,887,887,887,887,887,887,887,,,,,,,,,,887,,,887,887,887,887,887,887',
'887,887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,',
',887,887,,887,,887,,,,887,,,,,,,,887,,,,,887,887,887,887,887,887,,,',
'887,887,141,141,141,,141,,,,141,141,,,,141,,141,141,141,141,141,141',
'141,,,,,141,141,141,141,141,141,141,,,,,,,,,,141,,,141,141,141,141,141',
'141,141,141,141,141,,141,141,,141,141,141,,,,,,,,,,,,,,,,,,,,141,,,141',
',,141,141,,141,,,,,,141,,,,,,,,141,,,,,141,141,141,141,141,141,,,,141',
'141,779,779,779,,779,,,,779,779,,,,779,,779,779,779,779,779,779,779',
',,,,779,779,779,779,779,779,779,,,,,,,,,,779,,,779,779,779,779,779,779',
'779,779,779,779,,779,779,,779,779,779,,,,,,,,,,,,,,,,,,,,779,,,779,',
',779,779,,779,,,,,,779,,,,,,,,779,,,,,779,779,779,779,779,779,,,,779',
'779,30,30,30,30,30,30,30,30,,,30,30,30,30,30,,,30,30,30,30,30,30,30',
',,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30',
'30,,,30,,,,,,,,30,30,,30,30,30,30,,30,30,,,30,,,,,30,30,30,30,,,,,,',
',,,,,,30,30,,30,30,30,30,30,30,30,30,30,,30,,,30,30,,,412,412,412,,412',
',,30,412,412,,,,412,,412,412,412,412,412,412,412,,,,,412,412,412,412',
'412,412,412,,,412,,,,,,,412,,,412,412,412,412,412,412,412,412,412,412',
',412,412,,412,412,412,,,,,,,,,,,,,,,,,,,,412,,,412,,,412,412,,412,,',
',,,412,,,,,,,,412,,,,,412,412,412,412,412,412,,,,412,412,146,146,146',
',146,,,,146,146,,,,146,,146,146,146,146,146,146,146,,,,,146,146,146',
'146,146,146,146,,,,,,,,,,146,,,146,146,146,146,146,146,146,146,146,146',
',146,146,,146,146,146,,,,,,,,,,,,,,,,,,,,146,,,146,,,146,146,,146,,',
',,,146,,,,,,,,146,,,,,146,146,146,146,146,146,,,,146,146,29,29,29,,29',
',,,29,29,,,,29,,29,29,29,29,29,29,29,,,,,29,29,29,29,29,29,29,,,,,,',
',,,29,,,29,29,29,29,29,29,29,29,29,29,,29,29,,29,29,29,,,,,,,,,,,,,',
',,,,,,29,,,29,,,29,29,,29,,,,,,29,,,,,,,,29,,,,,29,29,29,29,29,29,,',
',29,29,28,28,28,28,28,28,28,28,,,28,28,28,28,28,,,28,28,28,28,28,28',
'28,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,,28,,,,,,,,28,28,,28,28,28,28,,28,28,,,28,,,,,28,28,28,28,',
',,,,,,,,,,,28,28,,28,28,28,28,28,28,28,28,28,,28,,,28,28,,,544,544,544',
',544,,,28,544,544,,,,544,,544,544,544,544,544,544,544,,,,,544,544,544',
'544,544,544,544,,,,,,,,,,544,,,544,544,544,544,544,544,544,544,544,544',
',544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,544,,',
',,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544,544,765,765,765',
',765,,,,765,765,,,,765,,765,765,765,765,765,765,765,,,,,765,765,765',
'765,765,765,765,,,,,,,,,,765,,,765,765,765,765,765,765,765,765,765,765',
',765,765,,765,765,765,,,,,,,,,,,,,,,,,,,,765,,,765,,,765,765,,765,,',
',,,765,,,,,,,,765,,,,,765,765,765,765,765,765,,,,765,765,154,154,154',
',154,,,,154,154,,,,154,,154,154,154,154,154,154,154,,,,,154,154,154',
'154,154,154,154,,,,,,,,,,154,,,154,154,154,154,154,154,154,154,154,154',
',154,154,,,,154,,,,,,,,,,,,,,,,,,,,154,,,154,,,154,154,,154,,,,,,,,',
',,,,,,,,,,154,154,154,154,154,154,,,,154,154,155,155,155,,155,,,,155',
'155,,,,155,,155,155,155,155,155,155,155,,,,,155,155,155,155,155,155',
'155,,,,,,,,,,155,,,155,155,155,155,155,155,155,155,155,155,,155,155',
',155,155,155,,,,,,,,,,,,,,,,,,,,155,,,155,,,155,155,,155,,,,,,155,,',
',,,,,155,,,,,155,155,155,155,155,155,,,,155,155,407,407,407,,407,,,',
'407,407,,,,407,,407,407,407,407,407,407,407,,,,,407,407,407,407,407',
'407,407,,,,,,,,,,407,,,407,407,407,407,407,407,407,407,407,407,,407',
'407,,407,407,407,,,,,,,,,,,,,,,,,,,,407,,,407,,,407,407,,407,,407,,407',
',407,,,,,,,,407,,,,,407,407,407,407,407,407,,,,407,407,405,405,405,',
'405,,,,405,405,,,,405,,405,405,405,405,405,405,405,,,,,405,405,405,405',
'405,405,405,,,,,,,,,,405,,,405,405,405,405,405,405,405,405,405,405,',
'405,405,,405,405,405,,,,,,,,,,,,,,,,,,,,405,,,405,,,405,405,,405,,,',
',,405,,,,,,,,405,,,,,405,405,405,405,405,405,,,,405,405,403,403,403',
',403,,,,403,403,,,,403,,403,403,403,403,403,403,403,,,,,403,403,403',
'403,403,403,403,,,,,,,,,,403,,,403,403,403,403,403,403,403,403,403,403',
',403,403,,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403,403,,403,,403',
',403,,403,,,,,,,,403,,,,,403,403,403,403,403,403,,,,403,403,401,401',
'401,,401,,,,401,401,,,,401,,401,401,401,401,401,401,401,,,,,401,401',
'401,401,401,401,401,,,,,,,,,,401,,,401,401,401,401,401,401,401,401,401',
'401,,401,401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,401',
',,,,,401,,,,,,,,401,,,,,401,401,401,401,401,401,,,,401,401,633,633,633',
'633,633,633,633,633,,,633,633,633,633,633,,,633,633,633,633,633,633',
'633,,,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,,,633,,,,,,,,633,633,,633,633,633,633,,633',
'633,,,633,,,,,633,633,633,633,,,,,,,,,,,,,633,633,,633,633,633,633,633',
'633,633,633,633,,633,,,633,633,,,760,760,760,,760,,,633,760,760,,,,760',
',760,760,760,760,760,760,760,,,,,760,760,760,760,760,760,760,,,,,,,',
',,760,,,760,760,760,760,760,760,760,760,760,760,,760,760,,760,760,760',
',,,,,,,,,,,,,,,,,,,760,,,760,,,760,760,,760,,,,,,760,,,,,,,,760,,,,',
'760,760,760,760,760,760,,,,760,760,25,25,25,,25,,,,25,25,,,,25,,25,25',
'25,25,25,25,25,,,,,25,25,25,25,25,25,25,,,,,,,,,,25,,,25,25,25,25,25',
'25,25,25,25,25,,25,25,,25,25,25,,,,,,,,,,,,,,,,,,,,25,,,25,,,25,25,',
'25,,,,,,25,,,,,,,,25,,,,,25,25,25,25,25,25,,,,25,25,164,164,164,,164',
',,,164,164,,,,164,,164,164,164,164,164,164,164,,,,,164,164,164,164,164',
'164,164,,,,,,,,,,164,,,164,164,164,164,164,164,164,164,164,164,,164',
'164,,,,164,,,,,,,,,,,,,,,,,,,,164,,,164,,,164,164,,164,,,,,,,,,,,,,',
',,,,,164,164,164,164,164,164,,,,164,164,165,165,165,,165,,,,165,165',
',,,165,,165,165,165,165,165,165,165,,,,,165,165,165,165,165,165,165',
',,,,,,,,,165,,,165,165,165,165,165,165,165,165,165,165,,165,165,,,,165',
',,,,,,,,,,,,,,,,,,,165,,,165,,,165,165,,165,,,,,,,,,,,,,,,,,,,165,165',
'165,165,165,165,,,,165,165,399,399,399,,399,,,,399,399,,,,399,,399,399',
'399,399,399,399,399,,,,,399,399,399,399,399,399,399,,,,,,,,,,399,,,399',
'399,399,399,399,399,399,399,399,399,,399,399,,399,399,399,,,,,,,,,,',
',,,,,,,,,399,,,399,,,399,399,,399,,,,,,399,,,,,,,,399,,,,,399,399,399',
'399,399,399,,,,399,399,398,398,398,,398,,,,398,398,,,,398,,398,398,398',
'398,398,398,398,,,,,398,398,398,398,398,398,398,,,,,,,,,,398,,,398,398',
'398,398,398,398,398,398,398,398,,398,398,,398,398,398,,,,,,,,,,,,,,',
',,,,,398,,,398,,,398,398,,398,,,,,,398,,,,,,,,398,,,,,398,398,398,398',
'398,398,,,,398,398,746,746,746,,746,,,,746,746,,,,746,,746,746,746,746',
'746,746,746,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746',
'746,746,746,746,746,746,746,746,,746,746,,746,746,746,,,,,,,,,,,,,,',
',,,,,746,,,746,,,746,746,,746,,,,,,746,,,,,,,,746,,,,,746,746,746,746',
'746,746,,,,746,746,21,21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21',
',,,,21,21,21,21,21,21,21,,,,,,,,,,21,,,21,21,21,21,21,21,21,21,21,21',
',21,21,,,,21,,,,,,,,,,,,,,,,,,,,21,,,21,,,21,21,,21,,21,,,,,,,,,,,,',
',,,,21,21,21,21,21,21,,,,21,21,396,396,396,,396,,,,396,396,,,,396,,396',
'396,396,396,396,396,396,,,,,396,396,396,396,396,396,396,,,,,,,,,,396',
',,396,396,396,396,396,396,396,396,396,396,,396,396,,396,396,396,,,,',
',,,,,,,,,,,,,,,396,,,396,,,396,396,,396,,396,,,,396,,,,,,,,396,,,,,396',
'396,396,396,396,396,,,,396,396,741,741,741,,741,,,,741,741,,,,741,,741',
'741,741,741,741,741,741,,,,,741,741,741,741,741,741,741,,,,,,,,,,741',
',,741,741,741,741,741,741,741,741,741,741,,741,741,,741,741,741,,,,',
',,,,,,,,,,,,,,,741,,,741,,,741,741,,741,,741,,,,741,,,,,,,,741,,,,,741',
'741,741,741,741,741,,,,741,741,20,20,20,,20,,,,20,20,,,,20,,20,20,20',
'20,20,20,20,,,,,20,20,20,20,20,20,20,,,,,,,,,,20,,,20,20,20,20,20,20',
'20,20,20,20,,20,20,,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,20',
',,,,,20,,,,,,,,20,,,,,20,20,20,20,20,20,,,,20,20,726,726,726,,726,,',
',726,726,,,,726,,726,726,726,726,726,726,726,,,,,726,726,726,726,726',
'726,726,,,,,,,,,,726,,,726,726,726,726,726,726,726,726,726,726,,726',
'726,,726,726,726,,,,,,,,,,,,,,,,,,,,726,,,726,,,726,726,,726,,,,,,726',
',,,,,,,726,,,,,726,726,726,726,726,726,,,,726,726,389,389,389,,389,',
',,389,389,,,,389,,389,389,389,389,389,389,389,,,,,389,389,389,389,389',
'389,389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389,389,389,,389',
'389,,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,389,,389,,389',
',389,,,,,,,,389,,,,,389,389,389,389,389,389,,,,389,389,894,894,894,',
'894,,,,894,894,,,,894,,894,894,894,894,894,894,894,,,,,894,894,894,894',
'894,894,894,,,,,,,,,,894,,,894,894,894,894,894,894,894,894,894,894,',
'894,894,,894,894,894,,,,,,,,,,,,,,,,,,,,894,,,894,,,894,894,,894,,,',
',,894,,,,,,,,894,,,,,894,894,894,894,894,894,,,,894,894,642,642,642',
',642,,,,642,642,,,,642,,642,642,642,642,642,642,642,,,,,642,642,642',
'642,642,642,642,,,,,,,,,,642,,,642,642,642,642,642,642,642,642,642,642',
',642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,642,,',
',,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,719,719,719',
',719,,,,719,719,,,,719,,719,719,719,719,719,719,719,,,,,719,719,719',
'719,719,719,719,,,719,,,,,,,719,,,719,719,719,719,719,719,719,719,719',
'719,,719,719,,719,719,719,,,,,,,,,,,,,,,,,,,,719,,,719,,,719,719,,719',
',,,,,719,,,,,,,,719,,,,,719,719,719,719,719,719,,,,719,719,376,376,376',
',376,,,,376,376,,,,376,,376,376,376,376,376,376,376,,,,,376,376,376',
'376,376,376,376,,,,,,,,,,376,,,376,376,376,376,376,376,376,376,376,376',
',376,376,,376,376,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376,376,,376,,376',
',,,376,,,,,,,,376,,,,,376,376,376,376,376,376,,,,376,376,261,261,261',
',261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,261,261,261',
'261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,261',
'261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,261',
',,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,262,262,262',
',262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,262,262,262',
'262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,262',
'262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,262',
',,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,654,654,654',
',654,,,,654,654,,,,654,,654,654,654,654,654,654,654,,,,,654,654,654',
'654,654,654,654,,,,,,,,,,654,,,654,654,654,654,654,654,654,654,654,654',
',654,654,,654,654,654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,654,,654',
',654,,654,,,,,,,,654,,,,,654,654,654,654,654,654,,,,654,654,710,710',
'710,,710,,,,710,710,,,,710,,710,710,710,710,710,710,710,,,,,710,710',
'710,710,710,710,710,,,,,,,,,,710,,,710,710,710,710,710,710,710,710,710',
'710,,710,710,,710,710,710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,710',
',710,,710,,710,,,,,,,,710,,,,,710,710,710,710,710,710,,,,710,710,527',
'527,527,,527,,,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,527',
'527,527,527,527,527,527,,,,,,,,,,527,,,527,527,527,527,527,527,527,527',
'527,527,,527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527',
',527,,,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527,267',
'267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,267',
'267,267,267,267,267,267,,,,,,,,,,267,,,267,267,267,267,267,267,267,267',
'267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,267,,267',
'267,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267',
'17,17,17,,17,,,,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17,17,17,17',
'17,17,,,,,,,,,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17,,17,17,17,',
',,,,,,,,,,,,,,,,,,17,,,17,,,17,17,,17,,17,,17,,17,,,,,,,,17,,,,,17,17',
'17,17,17,17,,,,17,17,707,707,707,,707,,,,707,707,,,,707,,707,707,707',
'707,707,707,707,,,,,707,707,707,707,707,707,707,,,,,,,,,,707,,,707,707',
'707,707,707,707,707,707,707,707,,707,707,,707,707,707,,,,,,,,,,,,,,',
',,,,,707,,,707,,,707,707,,707,,,,,,707,,,,,,,,707,,,,,707,707,707,707',
'707,707,,,,707,707,706,706,706,,706,,,,706,706,,,,706,,706,706,706,706',
'706,706,706,,,,,706,706,706,706,706,706,706,,,,,,,,,,706,,,706,706,706',
'706,706,706,706,706,706,706,,706,706,,706,706,706,,,,,,,,,,,,,,,,,,',
',706,,,706,,,706,706,,706,,,,,,706,,,,,,,,706,,,,,706,706,706,706,706',
'706,,,,706,706,275,275,275,,275,,,,275,275,,,,275,,275,275,275,275,275',
'275,275,,,,,275,275,275,275,275,275,275,,,,,,,,,,275,,,275,275,275,275',
'275,275,275,275,275,275,,275,275,,275,275,275,,,,,,,,,,,,,,,,,,,,275',
',,275,,,275,275,,275,,,,,,275,,,,,,,,275,,,,,275,275,275,275,275,275',
',,,275,275,276,276,276,,276,,,,276,276,,,,276,,276,276,276,276,276,276',
'276,,,,,276,276,276,276,276,276,276,,,,,,,,,,276,,,276,276,276,276,276',
'276,276,276,276,276,,276,276,,276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276',
',,276,276,,276,,,,,,276,,,,,,,,276,,,,,276,276,276,276,276,276,,,,276',
'276,277,277,277,,277,,,,277,277,,,,277,,277,277,277,277,277,277,277',
',,,,277,277,277,277,277,277,277,,,,,,,,,,277,,,277,277,277,277,277,277',
'277,277,277,277,,277,277,,277,277,277,,,,,,,,,,,,,,,,,,,,277,,,277,',
',277,277,,277,,,,,,277,,,,,,,,277,,,,,277,277,277,277,277,277,,,,277',
'277,278,278,278,,278,,,,278,278,,,,278,,278,278,278,278,278,278,278',
',,,,278,278,278,278,278,278,278,,,,,,,,,,278,,,278,278,278,278,278,278',
'278,278,278,278,,278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,',
',278,278,,278,,,,,,278,,,,,,,,278,,,,,278,278,278,278,278,278,,,,278',
'278,279,279,279,,279,,,,279,279,,,,279,,279,279,279,279,279,279,279',
',,,,279,279,279,279,279,279,279,,,,,,,,,,279,,,279,279,279,279,279,279',
'279,279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279,,,279,',
',279,279,,279,,,,,,279,,,,,,,,279,,,,,279,279,279,279,279,279,,,,279',
'279,280,280,280,,280,,,,280,280,,,,280,,280,280,280,280,280,280,280',
',,,,280,280,280,280,280,280,280,,,,,,,,,,280,,,280,280,280,280,280,280',
'280,280,280,280,,280,280,,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,',
',280,280,,280,,,,,,280,,,,,,,,280,,,,,280,280,280,280,280,280,,,,280',
'280,281,281,281,,281,,,,281,281,,,,281,,281,281,281,281,281,281,281',
',,,,281,281,281,281,281,281,281,,,,,,,,,,281,,,281,281,281,281,281,281',
'281,281,281,281,,281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,',
',281,281,,281,,,,,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281',
'281,282,282,282,,282,,,,282,282,,,,282,,282,282,282,282,282,282,282',
',,,,282,282,282,282,282,282,282,,,,,,,,,,282,,,282,282,282,282,282,282',
'282,282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,',
',282,282,,282,,,,,,282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282',
'282,283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283',
',,,,283,283,283,283,283,283,283,,,,,,,,,,283,,,283,283,283,283,283,283',
'283,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,',
',283,283,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283',
'283,284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284,284',
',,,,284,284,284,284,284,284,284,,,,,,,,,,284,,,284,284,284,284,284,284',
'284,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,',
',284,284,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284',
'284,285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285,285,285',
',,,,285,285,285,285,285,285,285,,,,,,,,,,285,,,285,285,285,285,285,285',
'285,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,',
',285,285,,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285',
'285,60,60,60,,60,,,,60,60,,,,60,,60,60,60,60,60,60,60,,,,,60,60,60,60',
'60,60,60,,,,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60,60',
',,,,,,,,,,,,,,,,,,,60,,,60,60,,60,60,,60,,60,,60,,60,,,,,,,,60,,,,,60',
'60,60,60,60,60,,,,60,60,287,287,287,,287,,,,287,287,,,,287,,287,287',
'287,287,287,287,287,,,,,287,287,287,287,287,287,287,,,,,,,,,,287,,,287',
'287,287,287,287,287,287,287,287,287,,287,287,,287,287,287,,,,,,,,,,',
',,,,,,,,,287,,,287,,,287,287,,287,,,,,,287,,,,,,,,287,,,,,287,287,287',
'287,287,287,,,,287,287,288,288,288,,288,,,,288,288,,,,288,,288,288,288',
'288,288,288,288,,,,,288,288,288,288,288,288,288,,,,,,,,,,288,,,288,288',
'288,288,288,288,288,288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,,',
',,,,,288,,,288,,,288,288,,288,,,,,,288,,,,,,,,288,,,,,288,288,288,288',
'288,288,,,,288,288,289,289,289,,289,,,,289,289,,,,289,,289,289,289,289',
'289,289,289,,,,,289,289,289,289,289,289,289,,,,,,,,,,289,,,289,289,289',
'289,289,289,289,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,',
',289,,,289,,,289,289,,289,,,,,,289,,,,,,,,289,,,,,289,289,289,289,289',
'289,,,,289,289,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290',
'290,290,,,,,290,290,290,290,290,290,290,,,,,,,,,,290,,,290,290,290,290',
'290,290,290,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290',
',,290,,,290,290,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290',
',,,290,290,291,291,291,,291,,,,291,291,,,,291,,291,291,291,291,291,291',
'291,,,,,291,291,291,291,291,291,291,,,,,,,,,,291,,,291,291,291,291,291',
'291,291,291,291,291,,291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291',
',,291,291,,291,,,,,,291,,,,,,,,291,,,,,291,291,291,291,291,291,,,,291',
'291,292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292,292,292',
',,,,292,292,292,292,292,292,292,,,,,,,,,,292,,,292,292,292,292,292,292',
'292,292,292,292,,292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,',
',292,292,,292,,,,,,292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292',
'292,293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293',
',,,,293,293,293,293,293,293,293,,,,,,,,,,293,,,293,293,293,293,293,293',
'293,293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,',
',293,293,,293,,,,,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293',
'293,294,294,294,,294,,,,294,294,,,,294,,294,294,294,294,294,294,294',
',,,,294,294,294,294,294,294,294,,,,,,,,,,294,,,294,294,294,294,294,294',
'294,294,294,294,,294,294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,',
',294,294,,294,,,,,,294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294',
'294,295,295,295,,295,,,,295,295,,,,295,,295,295,295,295,295,295,295',
',,,,295,295,295,295,295,295,295,,,,,,,,,,295,,,295,295,295,295,295,295',
'295,295,295,295,,295,295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,',
',295,295,,295,,,,,,295,,,,,,,,295,,,,,295,295,295,295,295,295,,,,295',
'295,296,296,296,,296,,,,296,296,,,,296,,296,296,296,296,296,296,296',
',,,,296,296,296,296,296,296,296,,,,,,,,,,296,,,296,296,296,296,296,296',
'296,296,296,296,,296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,',
',296,296,,296,,,,,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296',
'296,297,297,297,,297,,,,297,297,,,,297,,297,297,297,297,297,297,297',
',,,,297,297,297,297,297,297,297,,,,,,,,,,297,,,297,297,297,297,297,297',
'297,297,297,297,,297,297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,',
',297,297,,297,,,,,,297,,,,,,,,297,,,,,297,297,297,297,297,297,,,,297',
'297,298,298,298,,298,,,,298,298,,,,298,,298,298,298,298,298,298,298',
',,,,298,298,298,298,298,298,298,,,,,,,,,,298,,,298,298,298,298,298,298',
'298,298,298,298,,298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,',
',298,298,,298,,,,,,298,,,,,,,,298,,,,,298,298,298,298,298,298,,,,298',
'298,299,299,299,,299,,,,299,299,,,,299,,299,299,299,299,299,299,299',
',,,,299,299,299,299,299,299,299,,,,,,,,,,299,,,299,299,299,299,299,299',
'299,299,299,299,,299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,',
',299,299,,299,,,,,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299',
'299,300,300,300,,300,,,,300,300,,,,300,,300,300,300,300,300,300,300',
',,,,300,300,300,300,300,300,300,,,,,,,,,,300,,,300,300,300,300,300,300',
'300,300,300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,',
',300,300,,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300',
'300,14,14,14,14,14,,,,14,14,,,,14,,14,14,14,14,14,14,14,,,,,14,14,14',
'14,14,14,14,,,14,,,,,,14,14,14,14,14,14,14,14,14,14,14,14,14,14,,14',
'14,,14,14,14,,,,,,,,,,,,,,,,,,,,14,,,14,,,14,14,,14,,14,,,,14,,,,,,',
',14,,,,,14,14,14,14,14,14,,,,14,14,705,705,705,,705,,,,705,705,,,,705',
',705,705,705,705,705,705,705,,,,,705,705,705,705,705,705,705,,,,,,,',
',,705,,,705,705,705,705,705,705,705,705,705,705,,705,705,,705,705,705',
',,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,705,,,,,,705,,,,,,,,705,,,,',
'705,705,705,705,705,705,,,,705,705,662,662,662,,662,,,,662,662,,,,662',
',662,662,662,662,662,662,662,,,,,662,662,662,662,662,662,662,,,,,,,',
',,662,,,662,662,662,662,662,662,662,662,662,662,,662,662,,662,662,662',
',,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,662,,,,,,662,,,,,,,,662,,,,',
'662,662,662,662,662,662,,,,662,662,703,703,703,,703,,,,703,703,,,,703',
',703,703,703,703,703,703,703,,,,,703,703,703,703,703,703,703,,,,,,,',
',,703,,,703,703,703,703,703,703,703,703,703,703,,703,703,,703,703,703',
',,,,,,,,,,,,,,,,,,,703,,,703,,,703,703,,703,,703,,703,,703,,,,,,,,703',
',,,,703,703,703,703,703,703,,,,703,703,700,700,700,,700,,,,700,700,',
',,700,,700,700,700,700,700,700,700,,,,,700,700,700,700,700,700,700,',
',,,,,,,,700,,,700,700,700,700,700,700,700,700,700,700,,700,700,,700',
'700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,700,,700,,700,,700,',
',,,,,,700,,,,,700,700,700,700,700,700,,,,700,700,11,11,11,,11,,,,11',
'11,,,,11,,11,11,11,11,11,11,11,,,,,11,11,11,11,11,11,11,,,,,,,,,,11',
',,11,11,11,11,11,11,11,11,11,11,,11,11,,11,11,11,,,,,,,,,,,,,,,,,,,',
'11,,,11,,,11,11,,11,,11,,11,,11,,,,,,,,11,,,,,11,11,11,11,11,11,,,,11',
'11,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520,520,520,520,',
',,,520,520,520,520,520,520,520,,,,,,,,,,520,,,520,520,520,520,520,520',
'520,520,520,520,,520,520,,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,',
',520,520,,520,,,,,,520,,,,,,,,520,,,,,520,520,520,520,520,520,,,,520',
'520,313,313,313,,313,,,,313,313,,,,313,,313,313,313,313,313,313,313',
',,,,313,313,313,313,313,313,313,,,,,,,,,,313,,,313,313,313,313,313,313',
'313,313,313,313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,',
'313,313,313,,313,,313,,313,,313,,,,,,,,313,,,,,313,313,313,313,313,313',
',,,313,313,314,314,314,,314,,,,314,314,,,,314,,314,314,314,314,314,314',
'314,,,,,314,314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314,314',
'314,314,314,314,314,314,,314,314,,314,314,314,,,,,,,,,,,,,,,,,,,,314',
',,314,,,314,314,,314,,,,,,314,,,,,,,,314,,,,,314,314,314,314,314,314',
',,,314,314,315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315,315',
'315,,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,315,315',
'315,315,315,315,315,315,,315,315,,315,315,315,,,,,,,,,,,,,,,,,,,,315',
',,315,,,315,315,,315,,,,,,315,,,,,,,,315,,,,,315,315,315,315,315,315',
',,,315,315,316,316,316,,316,,,,316,316,,,,316,,316,316,316,316,316,316',
'316,,,,,316,316,316,316,316,316,316,,,316,,,,,,,316,,,316,316,316,316',
'316,316,316,316,316,316,,316,316,,316,316,316,,,,,,,,,,,,,,,,,,,,316',
',,316,,,316,316,,316,,,,,,316,,,,,,,,316,,,,,316,316,316,316,316,316',
',,,316,316,317,317,317,,317,,,,317,317,,,,317,,317,317,317,317,317,317',
'317,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317,317',
'317,317,317,317,317,317,,317,317,,317,317,317,,,,,,,,,,,,,,,,,,,,317',
',,317,,,317,317,,317,,,,,,317,,,,,,,,317,,,,,317,317,317,317,317,317',
',,,317,317,318,318,318,318,318,,,,318,318,,,,318,,318,318,318,318,318',
'318,318,,,,,318,318,318,318,318,318,318,,,318,,,,,,318,318,318,318,318',
'318,318,318,318,318,318,318,318,318,,318,318,,318,318,318,,,,,,,,,,',
',,,,,,,,,318,,,318,,,318,318,,318,,318,,,,318,,,,,,,,318,,,,,318,318',
'318,318,318,318,,,,318,318,321,321,321,,321,,,,321,321,,,,321,,321,321',
'321,321,321,321,321,,,,,321,321,321,321,321,321,321,,,,,,,,,,321,,,321',
'321,321,321,321,321,321,321,321,321,,321,321,,321,321,321,,,,,,,,,,',
',,,,,,,,,321,,,321,,,321,321,,321,,321,,321,,321,,,,,,,,321,,,,,321',
'321,321,321,321,321,,,,321,321,368,368,368,,368,,,,368,368,,,,368,,368',
'368,368,368,368,368,368,,,,,368,368,368,368,368,368,368,,,,,,,,,,368',
',,368,368,368,368,368,368,368,368,368,368,,368,368,,368,368,368,,,,',
',,,,,,,,,,,,,,,368,,,368,368,,368,368,,368,,368,,368,,368,,,,,,,,368',
',,,,368,368,368,368,368,368,,,,368,368,514,514,514,,514,,,,514,514,',
',,514,,514,514,514,514,514,514,514,,,,,514,514,514,514,514,514,514,',
',,,,,,,,514,,,514,514,514,514,514,514,514,514,514,514,,514,514,,514',
'514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,514,,,,,,514,,,,,,,',
'514,,,,,514,514,514,514,514,514,,,,514,514,366,366,366,,366,,,,366,366',
',,,366,,366,366,366,366,366,366,366,,,,,366,366,366,366,366,366,366',
',,,,,,,,,366,,,366,366,366,366,366,366,366,366,366,366,,366,366,,366',
'366,366,,,,,,,,,,,,,,,,,,,,366,,,366,366,,366,366,,366,,366,,366,,366',
',,,,,,,366,,,,,366,366,366,366,366,366,,,,366,366,6,6,6,,6,,,,6,6,,',
',6,,6,6,6,6,6,6,6,,,,,6,6,6,6,6,6,6,,,,,,,,,,6,,,6,6,6,6,6,6,6,6,6,6',
',6,6,,,,6,,,,,,,,,,,,,,,,,,,,6,,,6,,,6,6,,6,,6,,,,,,,,,,,,,,,,,6,6,6',
'6,6,6,,,,6,6,511,511,511,,511,,,,511,511,,,,511,,511,511,511,511,511',
'511,511,,,,,511,511,511,511,511,511,511,,,,,,,,,,511,,,511,511,511,511',
'511,511,511,511,511,511,,511,511,,511,511,511,,,,,,,,,,,,,,,,,,,,511',
',,511,,,511,511,,511,,511,,,,511,,,,,,,,511,,,,,511,511,511,511,511',
'511,,,,511,511,364,364,364,,364,,,,364,364,,,,364,,364,364,364,364,364',
'364,364,,,,,364,364,364,364,364,364,364,,,,,,,,,,364,,,364,364,364,364',
'364,364,364,364,364,364,,364,364,,364,364,364,,,,,,,,,,,,,,,,,,,,364',
',,364,364,,364,364,,364,,364,,364,,364,,,,,,,,364,,,,,364,364,364,364',
'364,364,,,,364,364,691,691,691,,691,,,,691,691,,,,691,,691,691,691,691',
'691,691,691,,,,,691,691,691,691,691,691,691,,,,,,,,,,691,,,691,691,691',
'691,691,691,691,691,691,691,,691,691,,691,691,691,,,,,,,,,,,,,,,,,,',
',691,,,691,,,691,691,,691,,,,,,691,,,,,,,,691,,,,,691,691,691,691,691',
'691,,,,691,691,332,332,332,,332,,,,332,332,,,,332,,332,332,332,332,332',
'332,332,,,,,332,332,332,332,332,332,332,,,,,,,,,,332,,,332,332,332,332',
'332,332,332,332,332,332,,332,332,,332,332,332,,,,,,,,,,,,,,,,,,,,332',
',,332,,,332,332,,332,,,,,,332,,,,,,,,332,,,,,332,332,332,332,332,332',
',,,332,332,664,664,664,,664,,,,664,664,,,,664,,664,664,664,664,664,664',
'664,,,,,664,664,664,664,664,664,664,,,,,,,,,,664,,,664,664,664,664,664',
'664,664,664,664,664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664',
',,664,664,,664,,,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664',
'664,334,334,334,,334,,,,334,334,,,,334,,334,334,334,334,334,334,334',
',,,,334,334,334,334,334,334,334,,,,,,,,,,334,,,334,334,334,334,334,334',
'334,334,334,334,,334,334,,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,',
',334,334,,334,,334,,,,334,,,,,,,,334,,,,,334,334,334,334,334,334,,,',
'334,334,354,354,354,,354,,,,354,354,,,,354,,354,354,354,354,354,354',
'354,,,,,354,354,354,354,354,354,354,,,354,,,,,,,354,,,354,354,354,354',
'354,354,354,354,354,354,,354,354,,354,354,354,,,,,,,,,,,,,,,,,,,,354',
',,354,,,354,354,,354,,,,,,354,,,,,,,,354,,,,,354,354,354,354,354,354',
',,,354,354,336,336,336,,336,,,,336,336,,,,336,,336,336,336,336,336,336',
'336,,,,,336,336,336,336,336,336,336,,,336,,,,,,,336,,,336,336,336,336',
'336,336,336,336,336,336,,336,336,,336,336,336,,,,,,,,,,,,,,,,,,,,336',
',,336,,,336,336,,336,,,,,,336,,,,,,,,336,,,,,336,336,336,336,336,336',
',,,336,336,353,353,353,,353,,,,353,353,,,,353,,353,353,353,353,353,353',
'353,,,,,353,353,353,353,353,353,353,,,,,,,,,,353,,,353,353,353,353,353',
'353,353,353,353,353,,353,353,,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353',
',,353,353,,353,,,,,,353,,,,,,,,353,,,,,353,353,353,353,353,353,,,,353',
'353,351,351,351,,351,,,,351,351,,,,351,,351,351,351,351,351,351,351',
',,,,351,351,351,351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351',
'351,351,351,351,351,,351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351',
',,351,351,,351,,,,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351',
'351,350,350,350,,350,,,,350,350,,,,350,,350,350,350,350,350,350,350',
',,,,350,350,350,350,350,350,350,,,,,,,,,,350,,,350,350,350,350,350,350',
'350,350,350,350,,350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,',
',350,350,,350,,350,,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,,,',
'350,350,670,670,670,,670,,,,670,670,,,,670,,670,670,670,670,670,670',
'670,,,,,670,670,670,670,670,670,670,,,,,,,,,,670,,,670,670,670,670,670',
'670,670,670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670',
',,670,670,,670,,670,,,,670,,,,,,,,670,,,,,670,670,670,670,670,670,,',
',670,670,452,452,452,,452,,,,452,452,,,,452,,452,452,452,452,452,452',
'452,,,,,452,452,452,452,452,452,452,,,,,,,,,,452,,,452,452,452,452,452',
'452,452,452,452,452,,452,452,,452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452',
',,452,452,,452,,,,,,452,,,,,,,,452,,,,,452,452,452,452,452,452,,,,452',
'452,26,26,26,26,26,26,26,26,,,26,26,26,26,26,,,26,26,26,26,26,26,26',
',,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,,,,,,,26,26,,26,26,26,26,,26,26,,,26,,,,,26,26,26,26',
',,,,,26,,,,,,,26,26,,26,26,26,26,26,26,26,26,26,,26,,,26,611,611,611',
'611,611,611,611,611,,,611,611,611,611,611,,,611,611,611,611,611,611',
'611,,,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611',
'611,611,611,611,611,611,611,,,611,,,,,,,,611,611,,611,611,611,611,,611',
'611,,,611,,,,,611,611,611,611,,,,,,,,,,,,,611,611,,611,611,611,611,611',
'611,611,611,611,,611,,,611,84,84,84,84,84,84,84,84,,,84,84,84,84,84',
',,84,84,84,84,84,84,84,,,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,84,,,,,,,84,84,,84,84,84,84,,84,84',
',,84,,,,,84,84,84,84,,,,,,,,,,,,,84,84,,84,84,84,84,84,84,84,84,84,',
'84,,,84,257,257,257,257,257,257,257,257,,,257,257,257,257,257,,,257',
'257,257,257,257,257,257,,,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,,,,',
',,257,257,,257,257,257,257,,257,257,,,257,,,,,257,257,257,257,,,,,,',
',582,,,,,257,257,,257,257,257,257,257,257,257,257,257,,257,,,257,582',
'582,582,582,582,582,582,582,582,582,582,,582,582,,,582,582,,,,,,,,,',
',,,,582,,582,,582,582,582,582,582,582,582,,582,,422,422,,,422,,,,,,',
',422,422,582,422,422,422,422,,422,422,,,422,,,,,422,422,422,422,,,,',
',,,,,,,,422,422,,422,422,422,422,422,422,422,422,422,,422,423,423,422',
',423,,,,,,,,423,423,,423,423,423,423,,423,423,,,423,,,,,423,423,423',
'423,,,,,,,,,,,,,423,423,,423,423,423,423,423,423,423,423,423,,423,424',
'424,423,,424,,,,,,,,424,424,,424,424,424,424,,424,424,,,424,,,,,424',
'424,424,424,,,,,,,,,,,,,424,424,,424,424,424,424,424,424,424,424,424',
',424,425,425,424,,425,,,,,,,,425,425,,425,425,425,425,,425,425,,,425',
',,,,425,425,425,425,,,,,,,,,,,,,425,425,,425,425,425,425,425,425,425',
'425,425,,425,,,425,571,571,571,571,571,571,571,571,571,571,571,,571',
'571,,,571,571,,,,571,,,,,,,,,,571,,571,,571,571,571,571,571,571,571',
',571,,,,,,,326,326,,,326,,,,,571,,571,326,326,,326,326,326,326,,326',
'326,,,326,,,,,326,326,326,326,,,,,,,,,,,,,326,326,,326,326,326,326,326',
'326,326,326,326,,326,325,325,326,,325,,,,,,,,325,325,,325,325,325,325',
',325,325,,,325,,,,,325,325,325,325,,,,,,,,,,,,,325,325,,325,325,325',
'325,325,325,325,325,325,,325,652,652,325,,652,,,,,,,,652,652,,652,652',
'652,652,,652,652,,,652,,,,,652,652,652,652,,,,,,,,,,,,,652,652,,652',
'652,652,652,652,652,652,652,652,,652,374,374,652,,374,,,,,,,,374,374',
',374,374,374,374,,374,374,,,374,,,,,374,374,374,374,,,,,,,,,,,,,374',
'374,,374,374,374,374,374,374,374,374,374,,374,,,374,835,835,835,835',
'835,835,835,835,835,835,835,,835,835,,,835,835,,,,,,,,,,,,,,835,,835',
',835,835,835,835,835,835,835,,835,,,,,,,375,375,,,375,,,,,835,,835,375',
'375,,375,375,375,375,,375,375,,,375,,,,,375,375,375,375,,,,,,,,,,,,',
'375,375,,375,375,375,375,375,375,375,375,375,,375,886,886,375,,886,',
',,,,,,886,886,,886,886,886,886,,886,886,,,886,,,,,886,886,886,886,,',
',,,,,,,,,,886,886,,886,886,886,886,886,886,886,886,886,,886,885,885',
'886,,885,,,,,,,,885,885,,885,885,885,885,,885,885,,,885,,,,,885,885',
'885,885,,,,,,,,,,,,,885,885,,885,885,885,885,885,885,885,885,885,,885',
'651,651,885,,651,,,,,,,,651,651,,651,651,651,651,,651,651,,,651,,,,',
'651,651,651,651,,,,,,,,,,,,,651,651,,651,651,651,651,651,651,651,651',
'651,,651,101,101,651,,101,,,,,,,,101,101,,101,101,101,101,,101,101,',
',101,,,,,101,101,101,101,,,,,,,,,,,,,101,101,,101,101,101,101,101,101',
'101,101,101,,101,594,594,101,,594,,,,,,,,594,594,,594,594,594,594,,594',
'594,,,594,,,,,594,594,594,594,,,,,,,,,,,,,594,594,,594,594,594,594,594',
'594,594,594,594,,594,595,595,594,,595,,,,,,,,595,595,,595,595,595,595',
',595,595,,,595,,,,,595,595,595,595,,,,,,,,,,,,,595,595,,595,595,595',
'595,595,595,595,595,595,,595,102,102,595,,102,,,,,,,,102,102,,102,102',
'102,102,,102,102,,,102,,,,,102,102,102,102,,,,,,,,,,,,,102,102,,102',
'102,102,102,102,102,102,102,102,,102,395,395,102,,395,,,,,,,,395,395',
',395,395,395,395,,395,395,,,395,,,,,395,395,395,395,,,,,,,,,,,,,395',
'395,,395,395,395,395,395,395,395,395,395,,395,,,395,459,459,459,459',
'459,459,459,459,459,459,459,,459,459,,,459,459,,,,,,,,,,,,,,459,,459',
',459,459,459,459,459,459,459,,459,,420,420,420,420,420,420,420,420,420',
'420,420,,420,420,459,459,420,420,,,,,,,,,,,,,,420,,420,,420,420,420',
'420,420,420,420,,420,512,512,512,512,512,512,512,512,512,512,512,,512',
'512,,420,512,512,,,,,,,,,,,,,,512,,512,,512,512,512,512,512,512,512',
',512,685,685,685,685,685,685,685,685,685,685,685,,685,685,512,512,685',
'685,,,,,,,,,,,,,,685,,685,,685,685,685,685,685,685,685,,685,758,758',
'758,758,758,758,758,758,758,758,758,,758,758,,685,758,758,,,,,,,,,,',
',,,758,,758,,758,758,758,758,758,758,758,,758,757,757,757,757,757,757',
'757,757,757,757,757,,757,757,,758,757,757,,,,,,,,,,,,,,757,,757,,757',
'757,757,757,757,757,757,,757,744,744,744,744,744,744,744,744,744,744',
'744,,744,744,757,757,744,744,,,,,,,,,,,,,,744,,744,,744,744,744,744',
'744,744,744,,744,448,448,448,448,448,448,448,448,448,448,448,,448,448',
',744,448,448,,,,,,,,,,,,,,448,,448,,448,448,448,448,448,448,448,,448',
'683,683,683,683,683,683,683,683,683,683,683,,683,683,,448,683,683,,',
',,,,,,,,,,,683,,683,,683,683,683,683,683,683,683,,683,687,687,687,687',
'687,687,687,687,687,687,687,,687,687,,683,687,687,,,,,,,,,,,,,,687,',
'687,,687,687,687,687,687,687,687,,687,689,689,689,689,689,689,689,689',
'689,689,689,,689,689,,687,689,689,,,,,,,,,,,,,,689,,689,,689,689,689',
'689,689,689,689,,689,43,43,43,43,43,43,43,43,43,43,43,,43,43,,689,43',
'43,,,,,,,,,,,,,,43,,43,,43,43,43,43,43,43,43,,43,137,137,137,137,137',
'137,137,137,137,137,137,,137,137,,43,137,137,,,,,,,,,,,,,,137,,137,',
'137,137,137,137,137,137,137,,137,537,537,537,537,537,537,537,537,537',
'537,537,,537,537,,137,537,537,,,,,,,,,,,,,,537,,537,,537,537,537,537',
'537,537,537,,537,640,640,640,640,640,640,640,640,640,640,640,,640,640',
',537,640,640,,,,,,,,,,,,,,640,,640,,640,640,640,640,640,640,640,,640',
'769,769,769,769,769,769,769,769,769,769,769,,769,769,,640,769,769,,',
',,,,,,,,,,,769,,769,,769,769,769,769,769,769,769,,769,,,,,,,,,,,,,,',
',769' ]
        racc_action_check = arr = Array.new(23912, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1034,  4106,  1031,   nil,   383, 19916,    67,   -19,   nil,
   904, 18476,   nil,   nil, 17876,   nil,   903, 14396,   948,   404,
 12836, 12476,   nil,   nil,   901, 11756, 21596,   nil, 10452, 10332,
  9980,   532,   nil,   nil,   497,   nil,   402,   873,   nil,   214,
   921,   nil,   nil, 23612,   865,   nil,   nil,   nil,   945,  7348,
   nil,   -68,  5788,  3985,   nil,  5668,   nil,     9,  4948,   nil,
 16076,  4588,   nil,  4708,   nil,   nil,   -29,     0,   nil,   nil,
   nil,   nil,  5068,   nil,   nil,   nil,  5188,   nil,  5308,   371,
   nil,   821,   -12,   nil, 21814,   nil,   nil,  5908,   nil,   nil,
   814,   nil,   nil,   nil,   858,   nil,  6268,  6388,   nil,   244,
   nil, 22844, 23021,  6868,   393,   -14,   nil,   nil,   -19,   905,
   383,   109,   802,   867,   nil,   830,   825,   nil,   nil,   nil,
   806,   797,   nil,   nil,  8420,   nil,   nil,   754,   175,   nil,
   394,  8900,   405,   nil,   749,   352,   772, 23656,   nil,   960,
   nil,  9740,   nil,   693,   682,   720, 10212,   678,   790,   -23,
   682,   nil,   nil,   nil, 10804, 10924,   289,   nil,   209,    69,
   673,   381,   738,  1928, 11876, 11996,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   494,   nil,
   nil,   nil,   nil,   483,   nil,   nil,   nil,   nil,   133,   nil,
   nil,   nil,   nil,   484,   482,   nil,   nil,   nil,   nil,   224,
   nil,   nil,   nil,   391,   531,   nil,   506,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   598,   nil,   nil,   nil, 21923,   632,   nil,
   565, 13676, 13796,   623,   601,  1323,   nil, 14276,   nil,   833,
   nil,   nil,   nil,   322,   514, 14756, 14876, 14996, 15116, 15236,
 15356, 15476, 15596, 15716, 15836, 15956,  4468, 16196, 16316, 16436,
 16556, 16676, 16796, 16916, 17036, 17156, 17276, 17396, 17516, 17636,
 17756,  2533,   nil,   nil,   nil,   nil,   580,    49,   519,   497,
   485,  2170,   nil, 18716, 18836, 18956, 19076, 19196, 19316,   nil,
   nil, 19436,   nil,   nil,    50, 22378, 22319,   518,   413,   nil,
   374,    20, 20396,   173, 20636,   305, 20876,   349,   nil,   nil,
   nil,   220,   nil,   nil,   nil,    58,   283,   185,   240,   nil,
 21236, 21116,   147, 20996, 20756,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   239, 20156,   247, 19796,   121, 19556,   nil,
   269,   nil,   495,   145, 22496, 22608, 13556,   nil,   nil,   nil,
    81,    21,   nil,   nil,   nil,   166,   -47,   nil,   nil, 13076,
   nil,   -39,   nil,   nil,   716, 23080, 12596,   nil, 12236, 12116,
   161, 11404,   nil, 11284,   nil, 11164,   220, 11044,   nil,   297,
   nil,   nil, 10092,   347,   nil,   -20,   nil,    14,   308,   309,
 23172,   nil, 22030, 22089, 22148, 22207,  8780,   nil,   362,   592,
   nil,   nil,   nil,   nil,   nil,  6036,  8540,  7708,   nil,   nil,
   nil,   nil,   nil,   nil,  7588,  7228,   694,   724, 23436,  7108,
   960,   nil, 21476,  3743,  1202,   671,  1807,  2170,   676, 23127,
  1081,   652,   584,  2291,   175,   672,  1323,  1928,  2412,  2533,
  2049,  2775,  1565,   769,   608,  2896,  2654,   804,  1444,  1686,
   832,   -42,   nil,  1202,   nil,   943,   nil,   851,   897,   898,
   nil,   nil,   nil,   nil,   nil,   nil,   932,   998,   905,   135,
  -102,  3380,   718,   nil,   nil,   373,   902,   nil,   nil,   nil,
   nil, 20036, 23216,   nil, 19676,   nil,   nil,   833,   nil,   834,
 18596,    84,  1081,   942,   nil,   nil,   nil, 14156,   nil,   nil,
   nil,   nil,   nil,   801,   nil,   181,   nil, 23700,   nil,    57,
  1807,   687,   754,   nil, 10564,  9500,   748,   nil,   nil,   nil,
  9020,  8300,   464,   715,   154,   175,   701,   126,    -7,   696,
  8060,   -48,   nil,   nil,  7468,   nil,   nil,   nil,   nil,   -65,
   691, 22254,  5428,   639,   nil,   nil,   608,   488,   351,   468,
   672,   nil, 21970,   nil,   677,  6148,   636,   654,   nil,   661,
   nil,  6508,   nil,   331, 22903, 22962,  6628,   nil,   nil,   382,
    -8,   nil,   nil,   nil,   318,   346,   124,   272,   608,   nil,
  2896, 21705,   nil,   nil,   nil,   601,   598,   397,   nil,   280,
   nil,   329,   nil,   nil,   325,  2049,   nil,   nil,   294,   nil,
  1011,   -14,   nil, 11524,   245,   194,    76,   nil,   nil,    -4,
 23744,   512, 13316,   nil,   nil,   582,   nil,   -69,   nil,   nil,
    32, 22785, 22437,   154, 13916,   253,   nil,   nil,   nil,   nil,
   190,   nil, 18116,   nil, 20516,  6988,   nil,   363,   379,   nil,
 21356,   nil,   nil,   nil,   nil,   nil,   295,   nil,   nil,   nil,
   nil,   nil,   nil, 23480,   nil, 23260,   nil, 23524,   nil, 23568,
   nil, 20276,   108,   113,   nil,  3864,   440,   nil,  2654,   495,
 18356,   nil,   480, 18236,   nil, 17996, 14636, 14516,    98,   526,
 14036,   nil,   543,   340,   nil,   194,   343,   602,   nil, 13436,
  1444,   328,   708,   nil,   nil,   nil, 12956,   nil,   538,   nil,
   549,   nil,   736,   374,   nil,   626,   661,   nil,  1565,   747,
   nil, 12716,   nil,   nil, 23392,  1686, 12356,   759,   nil,   nil,
   683,   688,   nil,   749,   448,   775,   nil, 23348, 23304,   665,
 11636,   783,   nil,   -11,   674, 10684,  4348,  2291,   nil, 23788,
   nil,   nil,  2412,   799,   nil,   700,   nil,   nil,   687,  9860,
   699,   nil,  9380,  9260,   nil,  9140,   nil,   nil,   nil,   146,
   837,   nil,  6276,   nil,   nil,   nil,   724,   732,   nil,   729,
   734,   nil,   772,   nil,   nil,   nil,  2775,   nil,   nil,   744,
   786,   nil,   863,    43,   nil,   786,   nil,   nil,   nil,   nil,
  3017,  8180,   nil,   899,   902,  3138,   806,   nil,   nil,  7940,
   nil,   793,  7820,   nil,   796, 22543,  3259,   nil,   nil,  3622,
   466,   nil,   nil,   nil,   nil,   nil,    42,  6028,   nil,   nil,
  4227,   nil,   nil,  4828,   nil,   nil,   943,   nil,  5548,   832,
   nil,  6748,   nil,   nil,   958,   959,   844,  3501,   370,   352,
   -72,   931,   nil,   471,   316,   nil,   nil,   862,  8660,   nil,
   871,   nil,   nil,   nil,  1010, 22726, 22667,  9620,   293,   nil,
   nil,   nil,   nil,   nil, 13196,   nil,   nil,    25,   356,    31,
    16,   941,   908,   397,   nil ]

racc_action_default = [
    -1,  -508,  -506,  -508,  -506,  -508,  -508,  -251,  -291,  -422,
  -506,  -323,   -61,    -2,  -508,  -423,  -506,  -324,  -308,  -273,
  -508,   -65,  -315,  -325,  -508,  -508,  -508,  -326,  -508,  -508,
  -508,   -34,   -71,  -389,  -508,  -275,  -437,  -497,  -416,  -495,
  -508,   -20,  -382,   -40,  -508,  -436,  -384,    -5,   -42,  -285,
  -435,  -385,  -508,  -506,   -43,  -288,  -266,    -6,  -426,  -386,
  -357,  -508,  -267,  -508,  -432,  -383,   -47,  -485,  -268,  -431,
  -428,  -269,  -508,  -433,  -427,  -270,  -506,  -434,  -429,  -216,
  -271,  -508,  -301,  -430,  -506,  -272,   -35,  -506,  -439,  -506,
  -508,  -295,  -440,  -506,  -508,  -298,   -70,  -508,   905,  -508,
  -404,  -508,  -508,  -506,  -508,  -351,  -323,  -324,  -273,  -508,
  -508,  -437,  -497,  -508,  -285,  -288,  -357,  -327,  -339,  -340,
  -508,   -53,  -361,  -358,  -508,  -290,  -292,  -508,  -508,  -394,
  -508,  -508,  -273,  -238,  -261,  -437,  -508,  -217,  -230,  -506,
   -45,  -508,  -480,  -508,  -507,  -508,  -508,  -507,    -8,  -508,
  -508,  -400,   -46,  -311,  -508,  -508,  -508,  -209,  -508,   -82,
   -66,   -75,  -508,  -506,   -68,  -508,   -73,  -193,  -168,  -150,
  -121,  -169,  -139,  -170,  -153,  -108,  -141,  -129,  -171,  -126,
  -152,  -130,  -157,  -172,  -127,  -142,  -117,  -159,  -124,  -136,
  -128,  -165,  -118,  -151,  -123,  -437,  -138,  -144,  -119,  -143,
  -125,  -158,  -120,  -134,  -109,  -148,  -115,  -135,  -508,  -318,
  -147,  -160,  -113,  -132,  -110,  -167,  -106,   -99,  -133,  -111,
  -475,  -162,  -100,   -96,  -161,  -107,   -98,  -114,  -163,  -154,
  -116,  -146,  -145,  -164,   -97,  -140,  -149,  -131,  -474,  -112,
  -166,  -137,  -156,  -122,  -155,  -101,  -132,  -133,   -96,  -161,
  -102,    -9,  -154,  -508,  -164,   -97,  -149,  -508,  -194,  -103,
   -14,  -508,  -508,  -424,  -425,  -506,  -498,  -508,  -503,  -496,
  -502,  -504,    -4,  -281,  -508,  -508,  -508,  -508,  -508,  -508,
  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,
  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,
  -508,  -506,  -345,  -348,   -44,  -387,   -41,  -508,   -61,  -508,
  -508,  -506,   -60,  -508,  -508,  -508,  -508,  -508,  -508,   -59,
  -356,  -506,  -208,   -39,  -508,  -508,  -508,  -277,  -508,  -218,
  -497,  -499,  -508,  -499,  -508,  -496,  -508,  -508,  -415,  -417,
  -419,  -508,  -418,  -420,  -477,  -499,  -508,  -499,  -508,  -402,
  -508,  -508,  -508,  -508,  -508,   -69,   -38,  -406,  -391,  -409,
  -407,  -405,  -355,  -251,  -492,  -486,  -491,  -487,  -506,  -489,
  -486,  -488,  -487,  -508,  -508,  -508,  -506,  -305,  -424,  -425,
  -508,  -281,  -352,   -54,   -50,  -506,  -506,  -252,  -253,  -254,
  -392,  -508,  -393,  -396,  -508,  -508,  -506,  -258,  -508,  -508,
  -281,  -508,  -260,  -508,  -231,  -508,  -507,  -508,  -233,  -508,
  -399,  -398,  -508,  -508,  -273,  -508,   -94,  -508,   -91,   -92,
  -182,   -30,  -508,  -508,  -508,  -508,  -506,   -74,   -81,  -508,
   -67,  -316,  -494,  -493,  -320,  -455,  -508,  -508,   -13,   -12,
   -11,  -104,   -36,   -37,  -508,  -508,  -374,  -508,  -214,  -508,
    -7,  -505,  -508,  -506,  -203,  -189,  -184,  -204,  -188,  -508,
  -205,  -185,  -210,  -200,  -186,  -211,  -202,  -201,  -212,  -199,
  -213,  -195,  -206,  -187,  -207,  -196,  -197,  -190,  -198,  -183,
  -508,  -506,  -330,  -506,  -329,  -328,  -279,   -62,  -508,  -508,
  -287,   -15,   -16,   -17,   -18,   -19,  -508,  -230,  -497,  -497,
  -507,  -506,  -251,  -486,  -487,  -251,  -497,  -283,  -219,  -500,
  -220,  -501,  -497,  -222,  -501,   -31,  -261,  -173,   -23,  -508,
  -508,  -495,  -506,  -508,  -364,  -421,  -479,  -501,  -284,  -478,
  -388,  -403,   -33,   -32,   -24,  -508,  -390,  -175,   -25,  -508,
  -506,  -508,   -57,  -354,  -508,  -508,   -55,  -229,  -353,  -228,
  -508,  -508,  -282,  -508,  -490,  -280,  -506,  -486,  -487,  -508,
  -508,  -506,  -362,  -343,  -508,  -341,  -359,  -250,  -256,  -508,
  -508,   -40,  -508,  -507,  -395,  -397,  -490,  -280,  -486,  -487,
  -508,  -482,  -173,  -259,  -262,  -508,  -507,  -508,  -237,  -508,
  -481,  -508,  -401,  -312,  -508,  -508,  -506,   -93,   -91,   -92,
  -508,  -442,  -309,  -441,   -78,   -80,  -486,  -487,  -508,   -72,
  -506,  -508,  -454,  -460,  -463,  -468,  -508,  -459,  -466,  -508,
  -465,  -473,  -470,  -457,  -473,  -506,  -469,  -456,  -473,  -458,
  -455,  -497,   -10,  -508,  -191,  -192,  -506,  -372,  -276,  -508,
  -181,  -508,  -508,   -22,  -346,  -506,  -331,   -62,  -286,  -224,
  -508,  -508,  -508,  -508,  -508,  -506,   -49,  -350,   -48,  -349,
  -508,  -262,  -508,  -223,  -508,  -508,  -265,  -508,  -508,  -303,
  -508,  -333,  -296,  -334,  -332,  -299,  -508,  -414,  -408,  -411,
  -412,  -413,   -58,  -179,   -29,  -180,   -56,  -177,   -27,  -178,
   -28,  -508,  -282,  -508,   -51,  -506,  -508,  -342,  -506,  -508,
  -508,  -255,  -507,  -508,  -243,  -508,  -508,  -508,  -282,  -507,
  -508,  -235,  -507,  -508,   -95,   -91,   -92,  -508,  -444,  -508,
  -506,   -76,  -508,  -321,  -467,  -471,  -508,  -446,  -508,  -450,
  -508,  -452,  -508,  -508,  -453,  -497,  -508,  -105,  -506,  -506,
  -337,  -506,  -289,   -21,  -215,  -506,  -508,  -508,  -335,  -225,
  -506,  -506,  -226,  -508,  -497,  -508,  -278,  -497,  -174,  -263,
  -508,  -508,  -304,  -508,  -367,  -508,  -506,  -506,  -410,  -176,
   -26,  -306,  -506,  -508,  -344,  -508,  -257,  -240,  -507,  -508,
  -507,  -249,  -508,  -508,  -232,  -508,  -234,  -313,  -282,  -508,
  -508,  -317,  -455,  -462,  -472,  -461,  -473,  -473,  -464,  -508,
  -473,  -319,  -508,  -476,  -338,    -3,  -506,  -381,  -376,  -375,
  -506,  -377,  -508,  -508,  -293,  -508,  -294,  -221,  -264,  -302,
  -506,  -508,  -369,  -508,  -508,  -506,  -508,  -363,  -360,  -508,
  -239,  -507,  -508,  -245,  -507,  -507,  -506,  -443,  -310,  -506,
  -508,  -448,  -449,  -451,  -445,  -380,  -508,  -508,  -379,  -347,
  -506,  -227,  -365,  -508,  -297,  -300,  -508,   -52,  -508,  -507,
  -241,  -508,  -244,  -236,  -508,  -508,  -473,  -506,  -508,   -90,
   -83,  -508,  -378,  -506,  -506,  -368,  -307,  -507,  -508,  -246,
  -507,  -314,  -322,  -447,  -374,  -508,  -508,  -506,   -89,  -336,
  -371,  -370,  -366,  -242,  -508,  -247,  -373,  -490,   -88,  -486,
  -487,  -508,  -507,   -84,  -248 ]

clist = [
'5,117,109,328,104,323,119,636,138,130,209,250,5,250,138,130,117,447',
'307,158,251,217,259,217,483,217,147,144,523,324,373,133,147,144,121',
'383,515,133,499,590,625,501,272,747,612,393,138,130,310,597,130,5,532',
'99,320,729,672,739,731,130,675,130,734,308,147,144,140,798,339,133,130',
'148,152,330,130,271,755,355,417,217,562,566,312,745,797,337,800,319',
'238,431,657,117,346,659,158,130,364,126,570,421,330,130,347,345,304',
'387,363,368,568,510,320,513,267,633,382,160,602,772,271,561,208,138',
'130,526,434,529,265,506,351,766,354,767,336,341,560,825,154,5,720,147',
'144,412,352,713,133,430,590,836,165,117,610,435,413,130,611,792,481',
'699,429,117,117,5,158,413,386,698,385,695,763,892,670,874,810,308,846',
'741,644,798,305,388,348,274,128,391,437,149,678,380,541,540,719,735',
'796,260,269,805,866,795,2,436,1,,,7,,,,,,,,,7,,771,7,,,7,,,,,,,,,,714',
',841,842,,,843,,,,,612,,339,,,,,,,,,7,,217,7,7,,694,,,130,130,,7,5,7',
'531,,5,,,,889,,7,,,,7,518,,491,492,493,494,,,,,,,,,,,534,891,,538,7',
'5,883,,521,559,7,,488,,575,5,138,130,130,130,130,130,5,535,497,130,539',
'308,,580,,7,450,,147,144,502,505,130,133,130,590,147,500,657,659,7,133',
'590,,,,,,130,130,519,130,130,608,,,7,543,761,,,,722,,7,,519,,489,364',
',754,,330,130,495,498,732,,,556,,,,,,,130,,364,542,,,330,130,546,,839',
',363,368,612,100,,573,508,,,129,567,130,,,,151,,,364,586,364,250,,,330',
'130,,,,556,632,556,,217,,130,,,,,,,,,808,,896,,130,408,,,5,,603,,,682',
',,,686,,7,7,590,,7,,,,7,,790,,329,,,,,,820,5,100,,,344,,349,684,,,100',
',,688,690,,,,5,,329,7,,,,,,,,590,,7,,7,7,7,7,7,7,5,,7,717,667,,693,',
',656,850,,658,,,7,,7,5,,,,130,,,,,543,130,130,,7,7,,7,7,,271,130,117',
'696,,104,867,119,890,,,,,,674,,650,653,674,,7,,,,660,,,,,,663,864,364',
'7,865,,330,130,723,,7,,,556,,,,,,217,,5,,,,,7,,,250,,,,,,,5,,737,,7',
'217,,,,,,,770,718,7,,,,,,,,,,,,,7,753,130,,7,727,750,751,,,,,,,,,,,',
'586,,,,,,,,,,,,,,,7,789,764,,,130,,,,5,,,5,,,,,,7,,,,736,588,,,,,813',
',,780,778,130,5,496,777,,,7,,,,,,674,,,,,,,5,,,,,7,,5,130,7,,,,787,',
'7,7,,,,,519,,,,7,,,5,5,549,,,,5,,,,329,,,,,,,,,565,565,,,,,,,,,,329',
',,7,,,,,,,5,,,,,,802,7,,,901,,,,5,,,,,5,329,837,7,,,815,,,817,,5,,,5',
',,137,,117,,859,868,137,,5,157,,,,,167,7,,,258,,,,,,,5,,,,,,,,,704,',
',,137,565,364,,,,330,130,,711,,,322,556,7,,,,7,,,7,549,,,549,,137,,',
',,81,,,,118,,137,,,,7,7,81,,,,,,,,94,,137,,,,,,,7,,,94,,,,7,7,,,,,,137',
'549,,,,,565,137,81,,,,,,7,7,,322,,,7,,137,,,,,,94,,,420,,,,,,,,,,329',
',,,,,,,,781,,,,7,,,784,,,786,,,,,,,,7,,,,,7,,,,,,,,740,,,7,,,7,,,740',
',,,81,,13,,7,,740,,,,,,,,,,,,,,94,7,,,81,,,,,,,,830,,833,,,,,,,7,,,94',
',,,,448,,,,309,,,,454,455,456,457,458,459,460,461,462,463,464,465,466',
'467,468,469,470,471,472,473,474,475,476,477,478,479,,,860,,,862,863',
'807,,811,,,137,,,,,,549,549,137,,,,,,,,,,879,512,,517,19,,,,108,,,,',
'81,,,19,81,893,137,,895,537,159,,,309,,,,,,,94,,,,94,,,,,,904,,137,',
',848,81,309,,,,,19,,,571,81,,,,,,137,81,420,137,94,582,,137,,537,,137',
',,94,,,,,,,94,,,,,,,,,137,,,159,,,,,,,,,,,,,740,740,634,635,,,,,,,640',
',,,329,,,,,,,,,,,,,,306,,19,,,,,,,,397,306,,,,,,414,,,327,,,,,406,19',
'159,414,,,,,,,,,,,,,137,,,137,356,,,,480,137,,,,36,,,137,111,309,,,81',
',,,36,,,,,,,161,683,685,,,195,,687,689,94,,,,,,,,,,81,,,,,,,,,,137,',
',36,,,,,81,,94,,,137,,,,,,137,,,,,137,,19,,94,81,19,,,,,,,,,,,,,,,,161',
'81,,94,,,,,,,,,,,,,19,,,,,94,,,744,118,19,,,,,,,19,,,137,,,,,,,36,757',
',758,137,,,,,137,641,,,,,195,,,442,443,,,516,,36,161,195,,81,,769,,',
',,,,,533,137,645,,137,81,683,687,689,,94,137,,,,,,,,,655,,,,,94,,137',
',,,,,306,306,306,306,,,569,,668,137,,,,,,,581,,,,584,,306,,589,,676',
',137,,,,,137,,,,306,,,306,,81,,,81,,137,,,137,769,,835,19,36,,,,36,',
',94,,,94,,81,,,,,,,,327,,,,,,,,,19,81,,94,,137,,36,81,,,,,137,593,,137',
'36,19,,,94,,,36,,,,94,81,81,,,,,81,,137,631,19,,,137,,661,137,,589,',
'94,94,639,,666,,94,,19,677,,661,,137,,,,,,,81,,137,,,,,,,137,,,108,',
'81,,,,,81,94,,,,,,,,773,,81,775,,81,94,,702,,,94,,872,,,81,,,,,709,94',
',,94,,712,,,19,,,81,,,94,,,,,,,804,,19,,,,,812,,,94,,,,,,,,,36,,,306',
',,,,,823,824,,,,,826,,,,,,,,,,,,,584,,36,,,,,,,,,759,,,,,516,,,,36,845',
',,,19,,,19,,,,,,,852,,,,,856,36,,,,,,,,589,19,,,,,,589,,,36,,,,,,873',
',,19,,,,793,,,19,,,,,,,884,111,,,,809,,,,,,,,,19,19,,,,,19,,,,818,,',
',,822,,,,,,,,,,,,,,831,,,834,36,,,,,306,,19,,,,,,,,36,,,,,,19,,,,,19',
',,,,,306,,,,,19,661,,19,,,,,,584,,869,589,,19,,,,,,,,,,,,,,,,,19,,875',
',,,,877,,,880,,,,,,,36,,,36,,,,,,,589,,,,,,,,,,,,,,,36,902,,,,,,,,,',
',,,,,,,36,,,,,,,36,,,,,,,,,,,,,,,,,,,,,36,36,,,,,36,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,36,,,,,36,,,,,,,,,,,36,,,36,,,,,,,',
'870,,,36,,,,,,,,,,,,,,,,,36' ]
        racc_goto_table = arr = Array.new(2219, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'20,54,82,21,20,17,18,5,29,20,48,51,20,51,29,20,54,3,15,20,13,49,13,49',
'78,49,57,55,81,15,21,61,57,55,34,35,23,61,32,149,85,78,9,79,143,131',
'29,20,41,46,20,20,23,128,58,142,80,6,142,20,80,20,142,40,57,55,31,145',
'48,61,20,11,31,29,20,84,6,44,47,49,36,36,34,109,141,9,141,34,74,47,59',
'54,75,59,20,20,49,76,65,17,29,20,57,55,31,63,33,33,62,56,58,56,53,52',
'58,43,83,38,84,37,86,29,20,56,87,56,88,89,90,91,92,93,94,128,95,96,97',
'20,98,57,55,99,128,100,61,44,149,101,102,54,103,104,20,20,105,106,108',
'66,41,54,54,20,20,20,112,113,114,115,116,117,118,119,120,40,121,122',
'36,145,126,31,127,27,129,130,26,132,133,53,134,135,137,138,140,14,12',
'7,141,144,4,148,1,,,39,,,,,,,,,39,,80,39,,,39,,,,,,,,,,46,,142,142,',
',142,,,,,143,,48,,,,,,,,,39,,49,39,39,,36,,,20,20,,39,20,39,131,,20',
',,,79,,39,,,,39,17,,15,15,15,15,,,,,,,,,,,17,6,,17,39,20,142,,15,21',
'39,,41,,131,20,29,20,20,20,20,20,20,15,29,20,15,40,,21,,39,11,,57,55',
'33,33,20,61,20,149,57,55,59,59,39,61,149,,,,,,20,20,55,20,20,21,,,39',
'58,81,,,,3,,39,,55,,31,49,,32,,29,20,11,31,3,,,33,,,,,,,20,,49,34,,',
'29,20,34,,85,,33,33,143,10,,57,53,,,10,61,20,,,,10,,,49,57,49,51,,,29',
'20,,,,33,13,33,,49,,20,,,,,,,,,23,,5,,20,60,,,20,,84,,,35,,,,35,,39',
'39,149,,39,,,,39,,3,,10,,,,,,78,20,10,,,10,,10,17,,,10,,,17,17,,,,20',
',10,39,,,,,,,,149,,39,,39,39,39,39,39,39,20,,39,21,9,,15,,,34,78,,34',
',,39,,39,20,,,,20,,,,,58,20,20,,39,39,,39,39,,84,20,54,82,,20,78,18',
'81,,,,,,84,,53,53,84,,39,,,,53,,,,,,53,3,49,39,3,,29,20,48,,39,,,33',
',,,,,49,,20,,,,,39,,,51,,,,,,,20,,13,,39,49,,,,,,,17,84,39,,,,,,,,,',
',,,39,29,20,,39,84,33,33,,,,,,,,,,,,57,,,,,,,,,,,,,,,39,15,55,,,20,',
',,20,,,20,,,,,,39,,,,53,60,,,,,15,,,57,55,20,20,10,61,,,39,,,,,,84,',
',,,,,20,,,,,39,,20,20,39,,,,84,,39,39,,,,,55,,,,39,,,20,20,10,,,,20',
',,,10,,,,,,,,,10,10,,,,,,,,,,10,,,39,,,,,,,20,,,,,,53,39,,,21,,,,20',
',,,,20,10,84,39,,,53,,,53,,20,,,20,,,28,,54,,57,20,28,,20,28,,,,,28',
'39,,,28,,,,,,,20,,,,,,,,,60,,,,28,10,49,,,,29,20,,60,,,28,33,39,,,,39',
',,39,10,,,10,,28,,,,,16,,,,16,,28,,,,39,39,16,,,,,,,,19,,28,,,,,,,39',
',,19,,,,39,39,,,,,,28,10,,,,,10,28,16,,,,,,39,39,,28,,,39,,28,,,,,,19',
',,28,,,,,,,,,,10,,,,,,,,,60,,,,39,,,60,,,60,,,,,,,,39,,,,,39,,,,,,,',
'10,,,39,,,39,,,10,,,,16,,2,,39,,10,,,,,,,,,,,,,,19,39,,,16,,,,,,,,60',
',60,,,,,,,39,,,19,,,,,28,,,,2,,,,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,60,,,60,60,10,,10,,,28,',
',,,,10,10,28,,,,,,,,,,60,28,,28,22,,,,22,,,,,16,,,22,16,60,28,,60,28',
'22,,,2,,,,,,,19,,,,19,,,,,,60,,28,,,10,16,2,,,,,22,,,28,16,,,,,,28,16',
'28,28,19,28,,28,,28,,28,,,19,,,,,,,19,,,,,,,,,28,,,22,,,,,,,,,,,,,10',
'10,28,28,,,,,,,28,,,,10,,,,,,,,,,,,,,25,,22,,,,,,,,24,25,,,,,,22,,,25',
',,,,24,22,22,22,,,,,,,,,,,,,28,,,28,25,,,,2,28,,,,45,,,28,45,2,,,16',
',,,45,,,,,,,45,28,28,,,45,,28,28,19,,,,,,,,,,16,,,,,,,,,,28,,,45,,,',
',16,,19,,,28,,,,,,28,,,,,28,,22,,19,16,22,,,,,,,,,,,,,,,,45,16,,19,',
',,,,,,,,,,,22,,,,,19,,,28,16,22,,,,,,,22,,,28,,,,,,,45,28,,28,28,,,',
',28,2,,,,,45,,,25,25,,,24,,45,45,45,,16,,28,,,,,,,,24,28,2,,28,16,28',
'28,28,,19,28,,,,,,,,,2,,,,,19,,28,,,,,,25,25,25,25,,,24,,2,28,,,,,,',
'24,,,,24,,25,,24,,2,,28,,,,,28,,,,25,,,25,,16,,,16,,28,,,28,28,,28,22',
'45,,,,45,,,19,,,19,,16,,,,,,,,25,,,,,,,,,22,16,,19,,28,,45,16,,,,,28',
'25,,28,45,22,,,19,,,45,,,,19,16,16,,,,,16,,28,25,22,,,28,,24,28,,24',
',19,19,25,,24,,19,,22,22,,24,,28,,,,,,,16,,28,,,,,,,28,,,22,,16,,,,',
'16,19,,,,,,,,2,,16,2,,16,19,,24,,,19,,16,,,16,,,,,24,19,,,19,,24,,,22',
',,16,,,19,,,,,,,2,,22,,,,,2,,,19,,,,,,,,,45,,,25,,,,,,2,2,,,,,2,,,,',
',,,,,,,,24,,45,,,,,,,,,24,,,,,24,,,,45,2,,,,22,,,22,,,,,,,2,,,,,2,45',
',,,,,,,24,22,,,,,,24,,,45,,,,,,2,,,22,,,,24,,,22,,,,,,,2,45,,,,24,,',
',,,,,,22,22,,,,,22,,,,24,,,,,24,,,,,,,,,,,,,,24,,,24,45,,,,,25,,22,',
',,,,,,45,,,,,,22,,,,,22,,,,,,25,,,,,22,24,,22,,,,,,24,,22,24,,22,,,',
',,,,,,,,,,,,,22,,24,,,,,24,,,24,,,,,,,45,,,45,,,,,,,24,,,,,,,,,,,,,',
',45,24,,,,,,,,,,,,,,,,,45,,,,,,,45,,,,,,,,,,,,,,,,,,,,,45,45,,,,,45',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,45,,,,,,,,,,,,,,45,,,,,45,,,,,,,,,',
',45,,,45,,,,,,,,45,,,45,,,,,,,,,,,,,,,,,45' ]
        racc_goto_check = arr = Array.new(2219, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   200,  1047,  -248,   198,  -439,  -579,  -544,   nil,     3,
   398,    57,   155,    -8,   163,   -34,   908,   -56,     0,   928,
    -2,   -73,  1162,  -298,  1178,  1247,   -67,   140,   829,    -3,
   nil,    55,  -283,     5,    27,   -86,  -305,  -265,  -577,   201,
    10,    -5,   nil,    94,   -19,  1351,  -366,   -76,   -16,    -5,
   nil,   -17,  -328,    75,    -5,    16,  -222,    15,    -6,  -412,
   301,    20,  -281,   -19,   nil,  -291,  -411,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    62,     5,    89,   nil,  -283,  -602,
  -479,  -309,    -4,  -301,    36,  -395,    94,   -84,    91,  -200,
    37,  -543,    35,  -544,    50,  -243,  -636,   118,  -464,   -12,
  -450,  -640,   126,  -281,   -58,  -280,  -568,   nil,  -146,  -561,
   nil,   nil,    41,  -401,    44,  -395,  -502,  -705,  -354,  -681,
  -569,  -636,  -462,   nil,   nil,   nil,   127,    91,    49,   172,
    55,   -83,   169,  -355,  -172,  -170,   nil,  -411,  -439,   nil,
  -536,  -644,  -566,  -391,  -531,  -663,   nil,   nil,   -21,  -368 ]

racc_goto_default = [
   nil,   nil,   446,   nil,   nil,   nil,   748,   nil,    39,   nil,
    47,    57,   335,   nil,   nil,   nil,   143,    86,    90,   145,
   156,   nil,   132,   nil,   134,    31,   nil,   nil,    43,    48,
    54,   nil,    66,   553,   nil,   nil,   nil,   nil,   nil,   105,
    12,   nil,    21,    24,    32,   135,   416,   nil,   245,   369,
   222,    65,   nil,   nil,    79,   331,   nil,   333,   547,   548,
   404,   583,   nil,   nil,   124,   nil,   nil,   402,    56,    62,
    68,    71,    75,    80,    85,   nil,   125,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   485,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   303,   nil,   nil,
   362,   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    42,    46,    51,    59,   nil,   nil,   nil,
   nil,   361,   nil,   nil,   nil,   nil,   338,   nil,   619,   621,
   624,   628,   nil,   794,   613,   614,   615,   616,   nil,   142 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 145, :_reduce_101,
  1, 145, :_reduce_102,
  1, 146, :_reduce_103,
  0, 184, :_reduce_104,
  4, 146, :_reduce_105,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_173,
  5, 160, :_reduce_174,
  3, 160, :_reduce_175,
  6, 160, :_reduce_176,
  5, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  4, 160, :_reduce_181,
  3, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  4, 160, :_reduce_191,
  4, 160, :_reduce_192,
  2, 160, :_reduce_193,
  2, 160, :_reduce_194,
  3, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  2, 160, :_reduce_208,
  2, 160, :_reduce_209,
  3, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  5, 160, :_reduce_215,
  1, 160, :_reduce_none,
  1, 156, :_reduce_217,
  1, 153, :_reduce_none,
  2, 153, :_reduce_219,
  2, 153, :_reduce_220,
  5, 153, :_reduce_221,
  2, 153, :_reduce_222,
  3, 153, :_reduce_223,
  3, 190, :_reduce_224,
  4, 190, :_reduce_225,
  4, 190, :_reduce_226,
  6, 190, :_reduce_227,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 163, :_reduce_230,
  2, 163, :_reduce_231,
  5, 163, :_reduce_232,
  2, 163, :_reduce_233,
  5, 163, :_reduce_234,
  4, 163, :_reduce_235,
  7, 163, :_reduce_236,
  3, 163, :_reduce_237,
  1, 163, :_reduce_none,
  4, 194, :_reduce_239,
  3, 194, :_reduce_240,
  5, 194, :_reduce_241,
  7, 194, :_reduce_242,
  2, 194, :_reduce_243,
  5, 194, :_reduce_244,
  4, 194, :_reduce_245,
  6, 194, :_reduce_246,
  7, 194, :_reduce_247,
  9, 194, :_reduce_248,
  3, 194, :_reduce_249,
  1, 194, :_reduce_none,
  0, 196, :_reduce_251,
  2, 166, :_reduce_252,
  1, 195, :_reduce_none,
  0, 197, :_reduce_254,
  3, 195, :_reduce_255,
  0, 198, :_reduce_256,
  4, 195, :_reduce_257,
  2, 193, :_reduce_258,
  2, 192, :_reduce_259,
  1, 192, :_reduce_none,
  1, 187, :_reduce_261,
  3, 187, :_reduce_262,
  3, 155, :_reduce_263,
  4, 155, :_reduce_264,
  2, 155, :_reduce_265,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_274,
  0, 220, :_reduce_275,
  4, 186, :_reduce_276,
  0, 221, :_reduce_277,
  5, 186, :_reduce_278,
  3, 186, :_reduce_279,
  3, 186, :_reduce_280,
  2, 186, :_reduce_281,
  4, 186, :_reduce_282,
  3, 186, :_reduce_283,
  3, 186, :_reduce_284,
  1, 186, :_reduce_285,
  4, 186, :_reduce_286,
  3, 186, :_reduce_287,
  1, 186, :_reduce_288,
  5, 186, :_reduce_289,
  2, 186, :_reduce_290,
  1, 186, :_reduce_none,
  2, 186, :_reduce_292,
  6, 186, :_reduce_293,
  6, 186, :_reduce_294,
  0, 222, :_reduce_295,
  0, 223, :_reduce_296,
  7, 186, :_reduce_297,
  0, 224, :_reduce_298,
  0, 225, :_reduce_299,
  7, 186, :_reduce_300,
  0, 226, :_reduce_301,
  6, 186, :_reduce_302,
  4, 186, :_reduce_303,
  5, 186, :_reduce_304,
  0, 227, :_reduce_305,
  0, 228, :_reduce_306,
  9, 186, :_reduce_307,
  0, 229, :_reduce_308,
  0, 230, :_reduce_309,
  7, 186, :_reduce_310,
  0, 231, :_reduce_311,
  0, 232, :_reduce_312,
  0, 233, :_reduce_313,
  9, 186, :_reduce_314,
  0, 234, :_reduce_315,
  0, 235, :_reduce_316,
  6, 186, :_reduce_317,
  0, 236, :_reduce_318,
  6, 186, :_reduce_319,
  0, 237, :_reduce_320,
  0, 238, :_reduce_321,
  9, 186, :_reduce_322,
  1, 186, :_reduce_323,
  1, 186, :_reduce_324,
  1, 186, :_reduce_325,
  1, 186, :_reduce_326,
  1, 152, :_reduce_327,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 211, :_reduce_none,
  5, 211, :_reduce_336,
  1, 138, :_reduce_none,
  2, 138, :_reduce_338,
  1, 214, :_reduce_none,
  1, 214, :_reduce_340,
  1, 168, :_reduce_none,
  2, 168, :_reduce_342,
  1, 168, :_reduce_343,
  3, 168, :_reduce_344,
  0, 240, :_reduce_345,
  0, 241, :_reduce_346,
  6, 239, :_reduce_347,
  2, 164, :_reduce_348,
  4, 164, :_reduce_349,
  4, 164, :_reduce_350,
  0, 243, :_reduce_351,
  3, 209, :_reduce_352,
  4, 209, :_reduce_353,
  4, 209, :_reduce_354,
  3, 209, :_reduce_355,
  2, 209, :_reduce_356,
  1, 209, :_reduce_357,
  0, 244, :_reduce_358,
  0, 245, :_reduce_359,
  6, 208, :_reduce_360,
  0, 246, :_reduce_361,
  0, 247, :_reduce_362,
  6, 208, :_reduce_363,
  0, 250, :_reduce_364,
  0, 251, :_reduce_365,
  7, 213, :_reduce_366,
  1, 248, :_reduce_none,
  4, 248, :_reduce_368,
  2, 248, :_reduce_369,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  0, 254, :_reduce_372,
  7, 137, :_reduce_373,
  0, 137, :_reduce_374,
  1, 252, :_reduce_375,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  2, 253, :_reduce_378,
  1, 253, :_reduce_none,
  2, 139, :_reduce_380,
  1, 139, :_reduce_none,
  1, 200, :_reduce_382,
  1, 200, :_reduce_383,
  1, 200, :_reduce_none,
  1, 201, :_reduce_385,
  1, 257, :_reduce_none,
  2, 257, :_reduce_387,
  3, 258, :_reduce_388,
  1, 258, :_reduce_389,
  3, 202, :_reduce_390,
  3, 203, :_reduce_391,
  3, 204, :_reduce_392,
  3, 204, :_reduce_393,
  1, 261, :_reduce_394,
  3, 261, :_reduce_395,
  1, 262, :_reduce_none,
  2, 262, :_reduce_397,
  3, 205, :_reduce_398,
  3, 205, :_reduce_399,
  1, 264, :_reduce_400,
  3, 264, :_reduce_401,
  1, 259, :_reduce_402,
  2, 259, :_reduce_403,
  1, 260, :_reduce_404,
  2, 260, :_reduce_405,
  1, 263, :_reduce_406,
  0, 266, :_reduce_407,
  3, 263, :_reduce_408,
  0, 267, :_reduce_409,
  4, 263, :_reduce_410,
  1, 265, :_reduce_411,
  1, 265, :_reduce_412,
  1, 265, :_reduce_413,
  1, 265, :_reduce_none,
  2, 183, :_reduce_415,
  1, 183, :_reduce_416,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  3, 256, :_reduce_421,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_424,
  2, 255, :_reduce_425,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_431,
  1, 177, :_reduce_432,
  1, 177, :_reduce_433,
  1, 177, :_reduce_434,
  1, 177, :_reduce_435,
  1, 177, :_reduce_436,
  1, 206, :_reduce_437,
  1, 151, :_reduce_438,
  1, 154, :_reduce_439,
  1, 154, :_reduce_440,
  1, 215, :_reduce_441,
  0, 269, :_reduce_442,
  4, 215, :_reduce_443,
  2, 215, :_reduce_444,
  4, 217, :_reduce_445,
  2, 217, :_reduce_446,
  6, 270, :_reduce_447,
  4, 270, :_reduce_448,
  4, 270, :_reduce_449,
  2, 270, :_reduce_450,
  4, 270, :_reduce_451,
  2, 270, :_reduce_452,
  2, 270, :_reduce_453,
  1, 270, :_reduce_454,
  0, 270, :_reduce_455,
  1, 276, :_reduce_456,
  1, 276, :_reduce_457,
  1, 276, :_reduce_458,
  1, 276, :_reduce_459,
  1, 271, :_reduce_460,
  3, 271, :_reduce_461,
  3, 277, :_reduce_462,
  1, 272, :_reduce_463,
  3, 272, :_reduce_464,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  2, 273, :_reduce_467,
  1, 273, :_reduce_468,
  1, 279, :_reduce_none,
  1, 279, :_reduce_none,
  2, 275, :_reduce_471,
  2, 274, :_reduce_472,
  0, 274, :_reduce_473,
  1, 218, :_reduce_none,
  0, 280, :_reduce_475,
  5, 218, :_reduce_476,
  1, 207, :_reduce_477,
  2, 207, :_reduce_478,
  2, 207, :_reduce_479,
  1, 189, :_reduce_none,
  3, 189, :_reduce_481,
  3, 281, :_reduce_482,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 216, :_reduce_502,
  1, 216, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_505,
  0, 142, :_reduce_506,
  0, 199, :_reduce_507 ]

racc_reduce_n = 508

racc_shift_n = 905

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tSYMBOL => 121,
  :tNL => 122,
  :tEH => 123,
  :tCOLON => 124,
  :tCOMMA => 125,
  :tSPACE => 126,
  :tSEMI => 127,
  :tLAST_TOKEN => 128,
  :tEQL => 129,
  :tLOWEST => 130,
  "[" => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "\"[\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "@28",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "when_args",
  "cases",
  "@36",
  "@37",
  "exc_list",
  "exc_var",
  "@38",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@42",
  "assoc" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2]).endline(self.lexer.lineno)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_22(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = s(:return, ret_args(val[1]))
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:break, ret_args(val[1]))
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:next, ret_args(val[1]))
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.endline = self.lexer.lineno
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_80(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_101(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

def _reduce_102(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_103(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_104(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_105(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

def _reduce_173(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_174(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], s(:resbody, s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_175(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_176(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_180(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_183(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      result = new_call val[0], :+, s(:arglist, val[2])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :-, s(:arglist, val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :*, s(:arglist, val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :"/", s(:arglist, val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :%, s(:arglist, val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :**, s(:arglist, val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_193(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@", s(:arglist)
                      end
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_call val[1], :"-@", s(:arglist)
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[0], :"|", s(:arglist, val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"^", s(:arglist, val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"&", s(:arglist, val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"<=>", s(:arglist, val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :">", s(:arglist, val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">=", s(:arglist, val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :"<", s(:arglist, val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<=", s(:arglist, val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"==", s(:arglist, val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"===", s(:arglist, val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                    
    result
end

def _reduce_206(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_207(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_209(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~", s(:arglist)
                    
    result
end

def _reduce_210(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", s(:arglist, val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", s(:arglist, val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 216 omitted

def _reduce_217(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 218 omitted

def _reduce_219(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_221(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_224(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_226(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_227(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 228 omitted

# reduce 229 omitted

def _reduce_230(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = self.arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = self.arg_concat val[0], val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      args = self.list_prepend val[0], val[2]
                      result = self.arg_blk_pass args, val[3]
                    
    result
end

def _reduce_240(val, _values, result)
                      result = self.arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = self.arg_concat s(:array, val[0]), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = self.arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values))
                      result = self.arg_blk_pass result, val[5]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = self.arg_blk_pass result, val[8]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_252(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_256(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_257(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_262(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_275(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_276(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                      result.endline = self.lexer.lineno
                    
    result
end

def _reduce_277(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_278(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_280(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_290(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line ||= iter.line
                    
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_295(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_298(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_299(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_301(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_case(val[2], val[4]).line(val[1]).endline(self.lexer.lineno)
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_case nil, val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_308(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_309(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_class val
                      result.endline = self.lexer.lineno
                      self.env.unextend
                    
    result
end

def _reduce_311(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_313(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_sclass val
                      result.endline = self.lexer.lineno
                      self.env.unextend
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_316(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_module val
                      result.endline = self.lexer.lineno
                      self.env.unextend
                    
    result
end

def _reduce_318(val, _values, result)
                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = lexer.lineno, lexer.src.beginning_of_line?
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_defn val
                      result.endline = lexer.lineno
                      self.env.unextend
                      self.in_def = false
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_321(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_defs val
                      result.endline = self.lexer.lineno
                      self.env.unextend
                      self.in_single -= 1
                    
    result
end

def _reduce_323(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      result = 0
                    
    result
end

def _reduce_343(val, _values, result)
                      result = 0
                    
    result
end

def _reduce_344(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_345(val, _values, result)
                      self.env.extend :dynamic
                    
    result
end

def _reduce_346(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_347(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body

                      self.env.unextend
                    
    result
end

def _reduce_348(val, _values, result)
                      raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_call(nil, val[0].to_sym, val[2]).endline(self.lexer.lineno)
                    
    result
end

def _reduce_353(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_356(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_358(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_359(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_360(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.endline = self.lexer.lineno
                      result.line = val[1]
                    
    result
end

def _reduce_361(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_362(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_363(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.endline = self.lexer.lineno
                      result.line = val[1]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_365(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_366(val, _values, result)
                      result = s(:when, val[2], val[4])
                      result.line = val[1]
                      result.endline = val[5]
                      result << val[6] if val[6]
                    
    result
end

# reduce 367 omitted

def _reduce_368(val, _values, result)
                      result = self.list_append val[0], s(:when, val[3], nil)
                    
    result
end

def _reduce_369(val, _values, result)
                      result = s(:array, s(:when, val[1], nil))
                    
    result
end

# reduce 370 omitted

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_373(val, _values, result)
                      klasses, var, body, rest = val[2], val[3], val[5], val[6]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = s(:resbody, klasses, body)
                      result.line = val[1]
                      result.endline = self.lexer.lineno
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_374(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_375(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 376 omitted

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_383(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 386 omitted

def _reduce_387(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_391(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_393(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_394(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_395(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_400(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_401(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_402(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_403(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_405(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_406(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_407(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_408(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_409(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
                    
    result
end

def _reduce_410(val, _values, result)
                      lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
                    
    result
end

def _reduce_411(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_412(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_413(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 414 omitted

def _reduce_415(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_416(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 417 omitted

# reduce 418 omitted

# reduce 419 omitted

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 422 omitted

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_425(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

def _reduce_431(val, _values, result)
 result = :nil      
    result
end

def _reduce_432(val, _values, result)
 result = :self     
    result
end

def _reduce_433(val, _values, result)
 result = :true     
    result
end

def _reduce_434(val, _values, result)
 result = :false    
    result
end

def _reduce_435(val, _values, result)
 result = :__FILE__ 
    result
end

def _reduce_436(val, _values, result)
 result = :__LINE__ 
    result
end

def _reduce_437(val, _values, result)
                      result = self.gettable val[0]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_439(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_440(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_441(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_442(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_444(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_446(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = args val[0], val[2], val[4], val[5]
                    
    result
end

def _reduce_448(val, _values, result)
                      result = args val[0], val[2],    nil, val[3]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = args val[0],    nil, val[2], val[3]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = args val[0],    nil,    nil, val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = args    nil, val[0], val[2], val[3]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = args    nil, val[0],    nil, val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = args    nil,    nil, val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = args    nil,    nil,    nil, val[0]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = args    nil,    nil,    nil,    nil
                    
    result
end

def _reduce_456(val, _values, result)
                      yyerror "formal argument cannot be a constant: #{val[0]}"
                    
    result
end

def _reduce_457(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_458(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_459(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_461(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_463(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = self.append_to_block val[0], val[2]
                    
    result
end

# reduce 465 omitted

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_468(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 469 omitted

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = nil
                    
    result
end

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_479(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 480 omitted

def _reduce_481(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_482(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

def _reduce_502(val, _values, result)
 yyerrok 
    result
end

# reduce 503 omitted

# reduce 504 omitted

def _reduce_505(val, _values, result)
 yyerrok 
    result
end

def _reduce_506(val, _values, result)
 result = nil 
    result
end

def _reduce_507(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
