#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser


require "ruby_lexer"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-274,482,261,262,122,-89,399,-274,-274,-274,-64,-84,-274,-274,-274,600',
'-274,-87,783,563,598,410,-281,89,599,122,-274,-274,-87,-281,509,33,482',
'514,692,-274,-274,652,-274,-274,-274,-274,-274,482,651,707,700,-72,521',
'652,523,-83,564,673,-85,482,651,261,262,357,738,482,358,-84,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-281,673',
'-274,-274,-274,411,266,-274,-89,123,-274,266,-87,-274,-84,-274,299,-274',
'266,-274,-87,-274,-274,-274,-274,-274,-274,-274,-81,-274,123,-274,742',
'268,-76,484,378,379,270,601,-79,359,360,-488,-274,-274,-274,-274,102',
'-274,-488,-488,-488,-274,-83,101,-488,-488,268,-488,-87,-86,-87,270',
'268,-87,484,563,-488,270,299,268,749,671,-75,268,270,484,-488,-488,270',
'-488,-488,-488,-488,-488,-85,268,-85,484,299,-85,270,268,706,484,-436',
'268,270,671,564,295,270,-79,103,277,280,-488,-488,-488,-488,-488,-488',
'-488,-488,-488,-488,-488,-488,-488,-488,-280,299,-488,-488,-488,752',
'544,-280,-280,-280,-488,-90,673,-280,-280,-484,-280,-488,-85,-488,-83',
'-488,-488,-488,-488,-488,-488,-488,122,-488,-488,-488,299,398,-77,-280',
'-280,-85,-280,-280,-280,-280,-280,-86,-488,-488,-79,-78,691,-488,-86',
'-86,-86,-488,-424,-86,-88,268,563,261,262,-424,270,-79,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-90,-432,-280',
'-280,-280,-79,545,738,-432,-79,-280,-76,-350,564,-90,-84,357,-280,756',
'-280,-77,-280,-280,-280,-280,-280,-280,-280,-484,-280,268,-280,671,123',
'-82,270,-280,-77,261,262,-85,-485,799,-280,-280,-280,-86,-80,-485,-280',
'452,-88,155,-280,-485,-485,-485,-77,-485,-88,-77,-77,-485,-485,357,563',
'-78,-485,299,-485,-485,-485,-485,-485,-485,-485,359,360,531,-80,-485',
'-485,-485,-485,-485,-485,-485,618,620,622,625,357,-280,-82,357,-89,-485',
'-90,564,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485,-434,-485',
'-485,-433,-485,-485,-485,-434,268,268,-433,638,326,270,270,359,360,268',
'-488,325,-481,-482,270,268,574,357,-485,545,270,-485,-485,-430,-485',
'-485,738,-485,523,-485,-430,-485,637,-485,359,360,393,359,360,536,-488',
'-485,622,625,761,-504,-485,-485,-485,-485,-485,-485,-504,-504,-504,-485',
'-485,-504,-504,-504,-488,-504,-424,-427,-88,509,375,-488,514,-424,-427',
'-504,-484,374,-481,-482,609,359,360,525,-504,-504,-429,-504,-504,-504',
'-504,-504,765,-429,-488,-280,768,-488,-282,-481,-482,-488,-280,-504',
'268,-282,-484,-485,732,270,-504,-504,-504,592,-435,-504,-504,-504,-273',
'-504,-488,-435,-424,-427,-504,-273,376,-488,595,-504,587,-504,730,-326',
'728,594,321,-504,-504,-504,-326,-504,-504,-504,-504,-504,425,550,423',
'886,-488,-280,-281,424,-282,422,885,-280,-504,-281,-273,-281,551,509',
'-280,-436,527,-273,-281,-485,-435,-504,433,-504,-273,395,-504,509,-504',
'432,511,449,394,552,596,-504,-435,-282,-77,-326,321,-504,-85,-435,-282',
'678,679,321,680,88,92,774,426,-79,396,887,-75,-87,-281,799,-83,727,-504',
'-280,746,738,-273,-281,452,-427,-484,-484,-484,776,-484,-504,-427,-504',
'-484,-484,-504,396,528,-484,587,-484,-484,-484,-484,-484,-484,-484,-435',
'-282,746,738,-484,-484,-484,-484,-484,-484,-484,299,618,620,622,625',
'725,-81,724,299,-484,-89,451,-484,-484,-484,-484,-484,-484,-484,-484',
'-484,-484,-431,-484,-484,299,-484,-484,-484,-431,643,295,263,264,587',
'277,280,283,286,295,261,262,721,277,280,283,286,587,-484,705,646,-484',
'-484,266,-484,-484,507,-484,788,-484,-72,-484,299,-484,616,261,262,623',
'626,629,440,-484,487,486,438,439,-484,-484,-484,-484,-484,-484,791,-63',
'743,-484,-484,18,22,26,453,36,647,295,-86,53,63,277,280,801,82,266,91',
'95,6,11,17,23,27,618,620,622,625,51,56,60,64,69,73,77,803,445,97,806',
'444,441,299,664,648,38,814,321,47,52,59,67,70,74,78,83,88,92,321,9,15',
'303,25,29,35,299,300,276,279,282,285,288,290,292,294,296,649,301,278',
'816,303,284,287,266,136,-262,654,139,399,820,72,76,131,87,710,266,295',
'399,298,20,277,280,283,286,289,291,293,61,297,428,826,827,84,89,93,4',
'10,16,828,427,831,33,39,268,281,409,-217,665,270,18,22,26,30,36,407',
'708,837,53,63,405,839,732,82,727,91,95,6,11,17,23,27,732,843,403,845',
'51,56,60,64,69,73,77,-261,848,97,401,850,400,399,664,28,38,43,46,47',
'52,59,67,70,74,78,83,88,92,853,9,15,854,25,29,35,299,300,276,279,282',
'285,288,290,292,294,296,390,301,278,856,384,284,287,587,42,321,587,54',
'321,313,72,76,381,87,266,96,295,668,298,20,277,280,283,286,289,291,293',
'61,297,377,353,523,84,89,93,4,10,16,350,877,334,33,39,879,281,-261,882',
'883,451,14,18,22,26,30,36,732,703,303,53,63,302,888,384,82,384,91,95',
'6,11,17,23,27,587,273,587,701,51,56,60,64,69,73,77,266,321,97,314,315',
'316,317,318,28,38,43,46,47,52,59,67,70,74,78,83,88,92,321,9,15,637,25',
'29,35,314,315,316,317,318,314,315,316,317,318,166,153,149,127,98,901',
'587,3,,42,,,54,,,72,76,,87,,96,,,,20,,616,,,623,626,629,61,,,,,84,89',
'93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,618,620,622,625,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47',
'52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,299,300,276,279,282,285,288',
'290,292,294,296,,-506,-506,,,284,287,,42,,,54,,,72,76,,87,,96,295,,298',
'20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,33,39,14',
'18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69',
'73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,299,-506,-506,-506,-506,285,288,,,-506,-506,,,,,,284,287,,42,',
',54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,',
',,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59',
'67,70,74,78,83,88,92,,9,15,,25,29,35,299,-506,-506,-506,-506,285,288',
',,-506,-506,,,,,,284,287,,42,,,54,,,72,76,,87,,96,295,,298,20,277,280',
'283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26',
'30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,299',
'-506,-506,-506,-506,285,288,,,-506,-506,,,,,,284,287,,42,,,54,,,72,76',
',87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4',
'10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78',
'83,88,92,,9,15,,25,29,35,299,,,,,,,,,,,,,,,,284,287,,42,,,54,,,72,76',
',87,,96,295,,298,20,277,280,283,286,,,293,61,297,,,,84,89,93,4,10,16',
',,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,299,300,276,279,282,285,288,,,294,296,,,,,,284,287,',
'42,,,311,,,72,76,,87,,96,295,,298,20,277,280,283,286,289,291,293,61',
'297,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52',
'59,67,70,74,78,83,88,92,,9,15,,25,29,35,299,,,,,,,,,,,,,,,,284,287,',
'42,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,,,293,61,297,,,',
'84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6',
'11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59',
'67,70,74,78,83,88,92,,9,15,,25,29,35,299,300,276,279,282,285,288,290',
',294,296,,,,,,284,287,,42,,,54,,,72,76,,87,,96,295,,298,20,277,280,283',
'286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,299,-506',
'-506,-506,-506,285,288,,,-506,-506,,,,,,284,287,,42,,,54,,,72,76,,87',
',96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10',
'16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,299,-506,-506,-506,-506,285,288,,,-506,-506,,',
',,,284,287,,42,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289',
'291,293,61,297,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28',
'38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,299,-506,-506',
'-506,-506,285,288,,,-506,-506,,,,,,284,287,,42,,,54,,,72,76,,87,,96',
'295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,',
',,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,299,300,276,279,282,285,288,290,292,294,296,,-506,-506',
',,284,287,,42,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289,291',
'293,61,297,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,',
',,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43',
'46,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,299,,,,,,,,,,,,,,,',
'284,287,,42,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,,,293,61',
'297,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52',
'59,67,70,74,78,83,88,92,,9,15,,25,29,35,299,,,,,,,,,,,,,,,,284,287,',
'42,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,,,293,61,297,,,',
'84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6',
'11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59',
'67,70,74,78,83,88,92,,9,15,,25,29,35,299,,,,,,,,,,,,,,,,284,287,,42',
',,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,,,,61,,,,,84,89,93',
'4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,299,,,,,,,,,,,,,,,,284,287,,42,,,54,,,72',
'76,,87,,96,295,,,20,277,280,283,286,,,,61,,,,,84,89,93,4,10,16,,,,33',
'39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15',
',25,29,35,299,,,,,,,,,,,,,,,,284,287,,42,,,54,,,72,76,,87,,96,295,,298',
'20,277,280,283,286,,,,61,,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30',
'36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97',
',,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,',
',,,,,,,,,,,,,,42,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4',
'10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78',
'83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,42,,,311,,,72,76,,87,,96',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28',
'38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,',
',,,,,,42,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,',
',,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,42,,,54,,,72,76,,87,,96,,,,20,,,',
',,,,61,,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82',
',91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46',
'47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,42',
',,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,14',
'18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69',
'73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,42,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6',
'11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59',
'67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,42,,,311,,,72',
'76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26',
'30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,',
',,,,,,,,,,,,,,,,,,42,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89',
'93,4,10,16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70',
'74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,42,,,54,,,72,76,,87',
',96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,14,18,22,26,30,36',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,',
',,,,,,,,,,,,42,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10',
'16,,,,33,39,14,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,42,,,54,,,72,76,,87,,96,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,',
'82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,38,,,47,52',
'59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,520,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22',
'26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,97,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,',
',,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4',
'10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,',
',,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,33,39,-251,-251,-251,,-251,,,,-251,-251',
',,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251,-251,-251',
'-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251,-251,-251',
'-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251',
'321,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251,-251',
'-251,-251,-251,,,,-251,-251,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,38,',
',47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39',
'-482,-482,-482,,-482,,,,-482,-482,,,,-482,,-482,-482,-482,-482,-482',
'-482,-482,,-482,,,-482,-482,-482,-482,-482,-482,-482,,,,,,,,,,-482,',
',-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,,-482,-482,,-482',
'-482,-482,,,,,,,,,,,,,,,,,,,,-482,,,-482,-482,,-482,-482,,-482,,-482',
',-482,,-482,,,,,,,,-482,,-482,,,-482,-482,-482,-482,-482,-482,,,,-482',
'-482,-481,-481,-481,,-481,,,,-481,-481,,,,-481,,-481,-481,-481,-481',
'-481,-481,-481,,-481,,,-481,-481,-481,-481,-481,-481,-481,,,,,,,,,,-481',
',,-481,-481,-481,-481,-481,-481,-481,-481,-481,-481,,-481,-481,,-481',
'-481,-481,,,,,,,,,,,,,,,,,,,,-481,,,-481,-481,,-481,-481,,-481,,-481',
',-481,,-481,,,,,,,,-481,,-481,,,-481,-481,-481,-481,-481,-481,,,,-481',
'-481,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,38',
',,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39',
'18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,-251,-251,-251,,-251,,,',
'-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251',
'-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251',
'-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251',
',,-251,313,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251',
'-251,-251,-251,-251,,,,-251,-251,18,22,26,,36,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,47,52,59',
'67,70,74,78,83,88,92,616,9,15,623,626,629,110,,,,,,,,,,,,,,,,,,,,162',
',,139,,,72,76,,87,,,630,,,,,,,618,620,622,625,,,,,,84,89,93,4,10,16',
',,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56',
'60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,',
'25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61',
',,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38',
',,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88',
'92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,',
',47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,662,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78',
'83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38',
',,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,585,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33',
'39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,112,,,47,52,59,67,70,74,78,83,88,92,616,9,15,623',
'626,629,110,,,,,,,,,,,,,,,,,,,,869,,,139,,,72,76,,87,,,630,,,,,,,618',
'620,622,625,,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,',
'82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,',
'47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88',
'92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131',
',20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,',
',,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47',
'52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,572,,131,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39',
'18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,892,,131,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',860,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,857,,131,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,389,76,,87,,146,,131',
',20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,',
',,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38',
',,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88',
'92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47',
'52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,852',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,38,',
',47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39',
'18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64',
'69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78',
'83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,591',
',131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,38,',
',47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,33,39,176,180,185,191,196,201,205,210',
',,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215,221,249',
'252,254,256,241,242,244,168,171,173,178,183,189,199,203,207,246,247',
'248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,,,237,257,,,18,22,26,,36,,,39,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47',
'52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,',
',47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,47,52,418,67,70,74,419',
'83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,415,,,139,,,72,76,,87,,,,,',
',,,,,,,,,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,',
'91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59',
'67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26',
',36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97',
',,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,',
',,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16',
',,,33,39,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169',
'172,174,182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168',
'171,173,178,183,189,199,203,207,246,247,248,226,253,,255,,,,,,,,184',
'190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,',
'243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,257,,,18,22',
'26,,36,,,39,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15',
',25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,33,39,-251,-251,-251,,-251,,,,-251,-251,,,,-251',
',-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251,-251,-251,-251,-251',
'-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251,-251,-251,-251,-251',
',-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251,321,,-251',
'-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251,-251,-251,-251',
'-251,,,,-251,-251,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88',
'92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47',
'52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,112,,,47,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,',
',,,,,,,,,,,,,,,162,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4,10',
'16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,112,,,47,52,418,67,70,74,419,83,88,92,',
'9,15,,,,110,,,,,,,,,,,,,,,,,,,,415,,,139,,,72,76,,87,,,,,,,,,,,,,,,',
',,,84,89,93,4,10,16,,,,33,39,176,180,185,191,196,201,205,210,,,228,231',
'232,235,240,,,169,172,174,182,187,193,197,,,211,215,221,249,252,254',
'256,241,242,244,168,171,173,178,183,189,199,203,207,246,247,248,226',
',,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,',
'237,257,,,18,22,26,,36,,,39,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,112,,,47,52,59,67,70,74,78,83,88,92,,9',
'15,,,,110,,,,,,,,,,,,,,,,,,,,162,,,163,,,72,76,,87,,164,,,,,,,,,,,,',
',,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,-486,-486,-486,,-486,,,,-486,-486,,,,-486,,-486,-486,-486,-486',
'-486,-486,-486,,,,,-486,-486,-486,-486,-486,-486,-486,,,,,,,,,,-486',
',,-486,-486,-486,-486,-486,-486,-486,-486,-486,-486,,-486,-486,,-486',
'-486,-486,,,,,,,,,,,,,,,,,,,,-486,,,-486,-486,,-486,-486,,-486,,-486',
',-486,,-486,,,,,,,,-486,,,,,-486,-486,-486,-486,-486,-486,,,,-486,-486',
'18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83,88',
'92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47',
'52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,585,,131,,20,,,,,,,,141,,,,',
'84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78',
'83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,-487,-487,-487,,-487,',
',,-487,-487,,,,-487,,-487,-487,-487,-487,-487,-487,-487,,,,,-487,-487',
'-487,-487,-487,-487,-487,,,,,,,,,,-487,,,-487,-487,-487,-487,-487,-487',
'-487,-487,-487,-487,,-487,-487,,-487,-487,-487,,,,,,,,,,,,,,,,,,,,-487',
',,-487,-487,,-487,-487,,-487,,-487,,-487,,-487,,,,,,,,-487,,,,,-487',
'-487,-487,-487,-487,-487,,,,-487,-487,18,22,26,,36,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59,67',
'70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,112,,,47,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,,,,,,,,,',
',,,,,,,113,,,54,,,72,76,,87,,96,,,,,,,,,,,,,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78',
'83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38',
',,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,520,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39',
'18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64',
'69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,47,52,59,67,70',
'74,78,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,113,,,54,,,72,76,,87',
',96,,,,,,,,,,,697,,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,449,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,33,39,18,22,26,30,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56',
'60,64,69,73,77,,,97,,,,,,28,38,43,46,47,52,59,67,70,74,78,83,88,92,',
'9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,42,,,54,,,72,76,,87,,96,,,,20,,,,',
',,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59',
'67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26',
',36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15',
',25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,38',
',,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33',
'39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64',
'69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29',
'35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84',
'89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,',
'82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,',
'47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,38,,,47,52,59',
'67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22',
'26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73',
'77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,',
',,,,,,,,,,,,,,136,,,139,,490,72,76,,87,,146,,131,,20,,,,,,,,141,,,,',
'84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78',
'83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,',
'47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92',
',9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,30,36,,,,53,63,,,,82,',
'91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,28,38,43,46,47',
'52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,42,,,54',
',,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22',
'26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73',
'77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,',
'82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,',
'47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,760,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39',
'18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,764,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,',
'82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,',
'47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18',
'22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83',
'88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,785',
',131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172',
'174,182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168,171',
'173,178,183,189,199,203,207,246,247,248,226,,,255,,,,,,,,184,190,,200',
'204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,',
'175,179,188,194,198,202,206,212,216,,225,,,237,257,,,18,22,26,,36,,',
'39,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,',
',,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,',
',,,,136,,,139,,,72,76,,87,,520,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15',
',25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25',
'29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74',
'78,83,88,92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',782,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,18,22,26,,36',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,38,,,47,52,59,67,70,74,78,83,88,92,,9,15,,25,29,35,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,779,,131,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,33,39,18,22,26,,36,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,38,,,47,52,59,67,70,74,78,83,88',
'92,,9,15,,25,29,35,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,33,39,176,180,185,191,196,201,205',
'210,,,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215,221',
'249,252,254,256,241,242,244,168,171,173,178,183,189,199,203,207,246',
'247,248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,',
',177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212',
'216,,225,,,237,176,180,185,191,196,201,205,210,,,228,231,232,235,240',
',,169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241,242',
'244,168,171,173,178,183,189,199,203,207,246,247,248,226,341,342,255',
'343,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192',
',,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237',
'176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172,174',
'182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168,171,173',
'178,183,189,199,203,207,246,247,248,226,341,342,255,343,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,,,237,176,180,185,191',
'196,201,205,210,,,228,231,232,235,240,,,169,172,174,182,187,193,197',
',,211,215,221,224,229,233,236,241,242,244,168,171,173,178,183,189,199',
'203,207,213,218,223,226,70,74,234,83,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,220,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,604,365,237,,605,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,715,365,237,,716,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,576,365,237,,577,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,578,371,237',
',579,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,554',
'365,237,,555,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,894,365,237,,895,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,557,371,237,,558,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,,,237,299,300,276,279,282,285,288,290,292,294,296,',
'301,278,,,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,,,,,,,503,371,,,504,,,,,281,,587,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,576,365,237,,577,,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,578,371,237,,579,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,370,371,237,,372,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,364,365,237,,366,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,503,371,237',
',504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,503',
'371,237,,504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,503,371,237,,504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,503,371,237,,504,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,,,237,299,300,276,279,282,285,288,290,292,294,296,',
'301,278,,,284,287,,,,-217,,,,,,,,,,295,,298,,277,280,283,286,289,291',
'293,,297,,,,,,,896,371,,,897,,,,,281,,-217,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,606,371,237,,607,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,,,237,299,300,276,279,282,285,288',
'290,292,294,296,,301,278,,,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,281,642,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,266,281,284,287,,,,,,,,,,,',
',,295,,298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285',
'288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277',
'280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294',
'296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289',
'291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281',
'284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299',
'300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,',
',,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276,279,282',
'285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298',
',277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290,292',
'294,296,,301,278,266,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295',
',298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290',
'292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,,,,,,,,,,,,',
',,,281' ]
        racc_action_table = arr = Array.new(23824, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'67,762,631,631,8,381,569,67,67,67,647,692,67,67,67,417,67,558,708,561',
'415,150,428,44,415,105,67,67,897,428,333,44,324,333,559,67,67,754,67',
'67,67,67,67,846,754,579,569,647,335,499,335,111,561,693,896,307,499',
'639,639,99,636,813,99,708,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'428,539,67,67,67,150,754,67,381,8,67,631,579,67,692,67,635,67,499,67',
'558,67,67,67,67,67,67,67,381,67,105,67,639,762,692,762,110,110,762,417',
'558,99,99,364,67,67,67,67,5,67,364,364,364,67,111,5,364,364,417,364',
'897,894,897,417,324,897,324,386,364,324,464,693,650,693,111,846,693',
'846,364,364,846,364,364,364,364,364,896,307,896,307,634,896,307,813',
'578,813,135,539,813,539,386,464,539,607,5,464,464,364,364,364,364,364',
'364,364,364,364,364,364,364,364,364,366,458,364,364,364,653,364,366',
'366,366,364,108,535,366,366,894,366,364,578,364,135,364,364,364,364',
'364,364,364,7,364,364,364,455,132,606,366,366,557,366,366,366,366,366',
'554,364,364,607,364,552,364,894,364,894,364,223,894,555,337,385,327',
'327,223,337,607,366,366,366,366,366,366,366,366,366,366,366,366,366',
'366,132,236,366,366,366,607,366,655,236,607,366,552,7,385,108,552,348',
'366,660,366,606,366,366,366,366,366,366,366,554,366,535,366,535,7,108',
'535,895,606,593,593,557,555,839,895,366,366,554,366,895,366,400,366',
'19,366,577,577,577,606,577,555,557,606,577,577,391,481,554,577,473,577',
'577,577,577,577,577,577,348,348,348,555,577,577,577,577,577,577,577',
'839,839,839,839,128,895,19,352,400,577,19,481,577,577,577,577,577,577',
'577,577,577,577,213,577,577,218,577,577,577,213,600,41,218,447,66,600',
'41,391,391,615,715,66,418,419,615,713,391,340,577,577,713,577,577,224',
'577,577,851,577,851,577,224,577,446,577,128,128,128,352,352,352,604',
'577,732,732,667,505,577,577,577,577,577,577,505,505,505,577,577,505',
'505,505,715,505,418,419,577,347,104,715,347,418,419,505,715,104,418',
'419,429,340,340,340,505,505,229,505,505,505,505,505,670,229,604,716',
'676,715,721,418,419,604,716,502,789,721,604,716,621,789,502,502,502',
'410,161,502,502,502,159,502,715,161,418,419,505,159,104,604,413,502',
'406,505,619,79,617,413,505,505,502,502,79,502,502,502,502,502,158,370',
'156,866,604,716,888,158,721,156,866,605,505,888,867,599,372,345,605',
'37,345,867,599,605,161,505,208,505,159,130,505,331,502,208,331,380,130',
'373,413,502,868,901,370,79,502,502,370,868,901,541,541,362,541,541,541',
'696,158,372,156,866,37,372,888,730,37,616,502,605,872,872,867,599,273',
'234,576,576,576,699,576,502,234,502,576,576,502,130,346,576,702,576',
'576,576,576,576,576,576,868,901,645,645,576,576,576,576,576,576,576',
'465,730,730,730,730,614,273,613,462,576,273,336,576,576,576,576,576',
'576,576,576,576,576,233,576,576,477,576,576,576,233,480,465,35,35,709',
'465,465,465,465,462,31,31,608,462,462,462,462,712,576,576,485,576,576',
'330,576,576,328,576,717,576,487,576,461,576,630,306,306,630,630,630',
'253,576,310,309,253,253,576,576,576,576,576,576,722,308,641,576,576',
'82,82,82,274,82,488,461,576,82,82,461,461,734,82,735,82,82,82,82,82',
'82,82,630,630,630,630,82,82,82,82,82,82,82,736,264,82,739,263,260,258',
'517,489,82,747,750,82,82,82,82,82,82,82,82,82,82,751,82,82,753,82,82',
'82,517,517,517,517,517,517,517,517,517,517,517,496,517,517,755,497,517',
'517,498,82,759,500,82,589,763,82,82,587,82,586,506,517,584,517,82,517',
'517,517,517,517,517,517,82,517,162,773,775,82,82,82,82,82,82,778,160',
'780,82,82,82,517,149,517,519,82,269,269,269,269,269,147,580,790,269',
'269,145,794,795,269,799,269,269,269,269,269,269,269,800,802,144,808',
'269,269,269,269,269,269,269,810,812,269,143,815,136,134,582,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,822,269,269,823,269',
'269,269,582,582,582,582,582,582,582,582,582,582,582,127,582,582,825',
'121,582,582,830,269,120,833,269,116,115,269,269,113,269,112,269,582',
'522,582,269,582,582,582,582,582,582,582,269,582,109,94,524,269,269,269',
'269,269,269,90,855,81,269,269,858,582,533,863,864,269,610,610,610,610',
'610,610,865,573,50,610,610,46,869,542,610,546,610,610,610,610,610,610',
'610,878,42,881,570,610,610,610,610,610,610,610,38,553,610,148,148,148',
'148,148,610,610,610,610,610,610,610,610,610,610,610,610,610,610,556',
'610,610,889,610,610,610,58,58,58,58,58,450,450,450,450,450,24,18,16',
'10,3,898,900,1,,610,,,610,,,610,610,,610,,610,,,,610,,728,,,728,728',
'728,610,,,,,610,610,610,610,610,610,,,,610,610,738,738,738,738,738,738',
',,,738,738,,,,738,,738,738,738,738,738,738,738,728,728,728,728,738,738',
'738,738,738,738,738,,,738,,,,,,738,738,738,738,738,738,738,738,738,738',
'738,738,738,738,,738,738,,738,738,738,456,456,456,456,456,456,456,456',
'456,456,456,,456,456,,,456,456,,738,,,738,,,738,738,,738,,738,456,,456',
'738,456,456,456,456,456,456,456,738,456,,,,738,738,738,738,738,738,',
',,738,738,453,453,453,453,453,453,,,,453,453,,,,453,,453,453,453,453',
'453,453,453,,,,,453,453,453,453,453,453,453,,,453,,,,,,453,453,453,453',
'453,453,453,453,453,453,453,453,453,453,,453,453,,453,453,453,454,454',
'454,454,454,454,454,,,454,454,,,,,,454,454,,453,,,453,,,453,453,,453',
',453,454,,454,453,454,454,454,454,454,454,454,453,454,,,,453,453,453',
'453,453,453,,,,453,453,745,745,745,745,745,745,,,,745,745,,,,745,,745',
'745,745,745,745,745,745,,,,,745,745,745,745,745,745,745,,,745,,,,,,745',
'745,745,745,745,745,745,745,745,745,745,745,745,745,,745,745,,745,745',
'745,457,457,457,457,457,457,457,,,457,457,,,,,,457,457,,745,,,745,,',
'745,745,,745,,745,457,,457,745,457,457,457,457,457,457,457,745,457,',
',,745,745,745,745,745,745,,,,745,745,766,766,766,766,766,766,,,,766',
'766,,,,766,,766,766,766,766,766,766,766,,,,,766,766,766,766,766,766',
'766,,,766,,,,,,766,766,766,766,766,766,766,766,766,766,766,766,766,766',
',766,766,,766,766,766,460,460,460,460,460,460,460,,,460,460,,,,,,460',
'460,,766,,,766,,,766,766,,766,,766,460,,460,766,460,460,460,460,460',
'460,460,766,460,,,,766,766,766,766,766,766,,,,766,766,767,767,767,767',
'767,767,,,,767,767,,,,767,,767,767,767,767,767,767,767,,,,,767,767,767',
'767,767,767,767,,,767,,,,,,767,767,767,767,767,767,767,767,767,767,767',
'767,767,767,,767,767,,767,767,767,467,,,,,,,,,,,,,,,,467,467,,767,,',
'767,,,767,767,,767,,767,467,,467,767,467,467,467,467,,,467,767,467,',
',,767,767,767,767,767,767,,,,767,767,163,163,163,163,163,163,,,,163',
'163,,,,163,,163,163,163,163,163,163,163,,,,,163,163,163,163,163,163',
'163,,,163,,,,,,163,163,163,163,163,163,163,163,163,163,163,163,163,163',
',163,163,,163,163,163,468,468,468,468,468,468,468,,,468,468,,,,,,468',
'468,,163,,,163,,,163,163,,163,,163,468,,468,163,468,468,468,468,468',
'468,468,163,468,,,,163,163,163,163,163,163,,,,163,163,772,772,772,772',
'772,772,,,,772,772,,,,772,,772,772,772,772,772,772,772,,,,,772,772,772',
'772,772,772,772,,,772,,,,,,772,772,772,772,772,772,772,772,772,772,772',
'772,772,772,,772,772,,772,772,772,469,,,,,,,,,,,,,,,,469,469,,772,,',
'772,,,772,772,,772,,772,469,,469,772,469,469,469,469,,,469,772,469,',
',,772,772,772,772,772,772,,,,772,772,624,624,624,624,624,624,,,,624',
'624,,,,624,,624,624,624,624,624,624,624,,,,,624,624,624,624,624,624',
'624,,,624,,,,,,624,624,624,624,624,624,624,624,624,624,624,624,624,624',
',624,624,,624,624,624,470,470,470,470,470,470,470,470,,470,470,,,,,',
'470,470,,624,,,624,,,624,624,,624,,624,470,,470,624,470,470,470,470',
'470,470,470,624,470,,,,624,624,624,624,624,624,,,,624,624,265,265,265',
'265,265,265,,,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,265,265',
'265,265,265,265,265,,,265,,,,,,265,265,265,265,265,265,265,265,265,265',
'265,265,265,265,,265,265,,265,265,265,472,472,472,472,472,472,472,,',
'472,472,,,,,,472,472,,265,,,265,,,265,265,,265,,265,472,,472,265,472',
'472,472,472,472,472,472,265,472,,,,265,265,265,265,265,265,,,,265,265',
'483,483,483,483,483,483,,,,483,483,,,,483,,483,483,483,483,483,483,483',
',,,,483,483,483,483,483,483,483,,,483,,,,,,483,483,483,483,483,483,483',
'483,483,483,483,483,483,483,,483,483,,483,483,483,474,474,474,474,474',
'474,474,,,474,474,,,,,,474,474,,483,,,483,,,483,483,,483,,483,474,,474',
'483,474,474,474,474,474,474,474,483,474,,,,483,483,483,483,483,483,',
',,483,483,806,806,806,806,806,806,,,,806,806,,,,806,,806,806,806,806',
'806,806,806,,,,,806,806,806,806,806,806,806,,,806,,,,,,806,806,806,806',
'806,806,806,806,806,806,806,806,806,806,,806,806,,806,806,806,478,478',
'478,478,478,478,478,,,478,478,,,,,,478,478,,806,,,806,,,806,806,,806',
',806,478,,478,806,478,478,478,478,478,478,478,806,478,,,,806,806,806',
'806,806,806,,,,806,806,139,139,139,139,139,139,,,,139,139,,,,139,,139',
'139,139,139,139,139,139,,,,,139,139,139,139,139,139,139,,,139,,,,,,139',
'139,139,139,139,139,139,139,139,139,139,139,139,139,,139,139,,139,139',
'139,479,479,479,479,479,479,479,479,479,479,479,,479,479,,,479,479,',
'139,,,139,,,139,139,,139,,139,479,,479,139,479,479,479,479,479,479,479',
'139,479,,,,139,139,139,139,139,139,,,,139,139,819,819,819,819,819,819',
',,,819,819,,,,819,,819,819,819,819,819,819,819,,,,,819,819,819,819,819',
'819,819,,,819,,,,,,819,819,819,819,819,819,819,819,819,819,819,819,819',
'819,,819,819,,819,819,819,463,,,,,,,,,,,,,,,,463,463,,819,,,819,,,819',
'819,,819,,819,463,,463,819,463,463,463,463,,,463,819,463,,,,819,819',
'819,819,819,819,,,,819,819,501,501,501,501,501,501,,,,501,501,,,,501',
',501,501,501,501,501,501,501,,,,,501,501,501,501,501,501,501,,,501,',
',,,,501,501,501,501,501,501,501,501,501,501,501,501,501,501,,501,501',
',501,501,501,466,,,,,,,,,,,,,,,,466,466,,501,,,501,,,501,501,,501,,501',
'466,,466,501,466,466,466,466,,,466,501,466,,,,501,501,501,501,501,501',
',,,501,501,302,302,302,302,302,302,,,,302,302,,,,302,,302,302,302,302',
'302,302,302,,,,,302,302,302,302,302,302,302,,,302,,,,,,302,302,302,302',
'302,302,302,302,302,302,302,302,302,302,,302,302,,302,302,302,475,,',
',,,,,,,,,,,,,475,475,,302,,,302,,,302,302,,302,,302,475,,475,302,475',
'475,475,475,,,,302,,,,,302,302,302,302,302,302,,,,302,302,824,824,824',
'824,824,824,,,,824,824,,,,824,,824,824,824,824,824,824,824,,,,,824,824',
'824,824,824,824,824,,,824,,,,,,824,824,824,824,824,824,824,824,824,824',
'824,824,824,824,,824,824,,824,824,824,476,,,,,,,,,,,,,,,,476,476,,824',
',,824,,,824,824,,824,,824,476,,,824,476,476,476,476,,,,824,,,,,824,824',
'824,824,824,824,,,,824,824,720,720,720,720,720,720,,,,720,720,,,,720',
',720,720,720,720,720,720,720,,,,,720,720,720,720,720,720,720,,,720,',
',,,,720,720,720,720,720,720,720,720,720,720,720,720,720,720,,720,720',
',720,720,720,471,,,,,,,,,,,,,,,,471,471,,720,,,720,,,720,720,,720,,720',
'471,,471,720,471,471,471,471,,,,720,,,,,720,720,720,720,720,720,,,,720',
'720,871,871,871,871,871,871,,,,871,871,,,,871,,871,871,871,871,871,871',
'871,,,,,871,871,871,871,871,871,871,,,871,,,,,,871,871,871,871,871,871',
'871,871,871,871,871,871,871,871,,871,871,,871,871,871,,,,,,,,,,,,,,',
',,,,,871,,,871,,,871,871,,871,,871,,,,871,,,,,,,,871,,,,,871,871,871',
'871,871,871,,,,871,871,311,311,311,311,311,311,,,,311,311,,,,311,,311',
'311,311,311,311,311,311,,,,,311,311,311,311,311,311,311,,,311,,,,,,311',
'311,311,311,311,311,311,311,311,311,311,311,311,311,,311,311,,311,311',
'311,,,,,,,,,,,,,,,,,,,,311,,,311,,,311,311,,311,,311,,,,311,,,,,,,,311',
',,,,311,311,311,311,311,311,,,,311,311,540,540,540,540,540,540,,,,540',
'540,,,,540,,540,540,540,540,540,540,540,,,,,540,540,540,540,540,540',
'540,,,540,,,,,,540,540,540,540,540,540,540,540,540,540,540,540,540,540',
',540,540,,540,540,540,,,,,,,,,,,,,,,,,,,,540,,,540,,,540,540,,540,,540',
',,,540,,,,,,,,540,,,,,540,540,540,540,540,540,,,,540,540,835,835,835',
'835,835,835,,,,835,835,,,,835,,835,835,835,835,835,835,835,,,,,835,835',
'835,835,835,835,835,,,835,,,,,,835,835,835,835,835,835,835,835,835,835',
'835,835,835,835,,835,835,,835,835,835,,,,,,,,,,,,,,,,,,,,835,,,835,',
',835,835,,835,,835,,,,835,,,,,,,,835,,,,,835,835,835,835,835,835,,,',
'835,835,838,838,838,838,838,838,,,,838,838,,,,838,,838,838,838,838,838',
'838,838,,,,,838,838,838,838,838,838,838,,,838,,,,,,838,838,838,838,838',
'838,838,838,838,838,838,838,838,838,,838,838,,838,838,838,,,,,,,,,,',
',,,,,,,,,838,,,838,,,838,838,,838,,838,,,,838,,,,,,,,838,,,,,838,838',
'838,838,838,838,,,,838,838,521,521,521,521,521,521,,,,521,521,,,,521',
',521,521,521,521,521,521,521,,,,,521,521,521,521,521,521,521,,,521,',
',,,,521,521,521,521,521,521,521,521,521,521,521,521,521,521,,521,521',
',521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,521,,521,,,,521',
',,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,54,54,54,54,54,54',
',,,54,54,,,,54,,54,54,54,54,54,54,54,,,,,54,54,54,54,54,54,54,,,54,',
',,,,54,54,54,54,54,54,54,54,54,54,54,54,54,54,,54,54,,54,54,54,,,,,',
',,,,,,,,,,,,,,54,,,54,,,54,54,,54,,54,,,,54,,,,,,,,54,,,,,54,54,54,54',
'54,54,,,,54,54,849,849,849,849,849,849,,,,849,849,,,,849,,849,849,849',
'849,849,849,849,,,,,849,849,849,849,849,849,849,,,849,,,,,,849,849,849',
'849,849,849,849,849,849,849,849,849,849,849,,849,849,,849,849,849,,',
',,,,,,,,,,,,,,,,,849,,,849,,,849,849,,849,,849,,,,849,,,,,,,,849,,,',
',849,849,849,849,849,849,,,,849,849,698,698,698,698,698,698,,,,698,698',
',,,698,,698,698,698,698,698,698,698,,,,,698,698,698,698,698,698,698',
',,698,,,,,,698,698,698,698,698,698,698,698,698,698,698,698,698,698,',
'698,698,,698,698,698,,,,,,,,,,,,,,,,,,,,698,,,698,,,698,698,,698,,698',
',,,698,,,,,,,,698,,,,,698,698,698,698,698,698,,,,698,698,695,695,695',
'695,695,695,,,,695,695,,,,695,,695,695,695,695,695,695,695,,,,,695,695',
'695,695,695,695,695,,,695,,,,,,695,695,695,695,695,695,695,695,695,695',
'695,695,695,695,,695,695,,695,695,695,,,,,,,,,,,,,,,,,,,,695,,,695,',
',695,695,,695,,695,,,,695,,,,,,,,695,,,,,695,695,695,695,695,695,,,',
'695,695,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,2,2,2,2,2,2,2,,,2',
',,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,',
'2,,,2,2,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,350,350,350,,350',
',,,350,350,,,,350,,350,350,350,350,350,350,350,,,,,350,350,350,350,350',
'350,350,,,,,,,,,,350,,,350,350,350,350,350,350,350,350,350,350,,350',
'350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,350,,350,,350,,',
',350,,,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,63,63,63,,63',
',,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,63,63,63,63,63,63,63,,,63,',
',,,,,63,,,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,',
',,,,,,,,63,,,63,,,63,63,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63',
',,,63,63,860,860,860,,860,,,,860,860,,,,860,,860,860,860,860,860,860',
'860,,,,,860,860,860,860,860,860,860,,,,,,,,,,860,,,860,860,860,860,860',
'860,860,860,860,860,,860,860,,860,860,860,,,,,,,,,,,,,,,,,,,,860,,,860',
',,860,860,,860,,,,,,860,,,,,,,,860,,,,,860,860,860,860,860,860,,,,860',
'860,60,60,60,,60,,,,60,60,,,,60,,60,60,60,60,60,60,60,,,,,60,60,60,60',
'60,60,60,,,,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60,60',
',,,,,,,,,,,,,,,,,,,60,,,60,60,,60,60,,60,,60,,60,,60,,,,,,,,60,,,,,60',
'60,60,60,60,60,,,,60,60,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72',
'72,72,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72',
'72,72,72,,72,72,,72,72,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,72,,,',
',,72,,,,,,,,72,,,,,72,72,72,72,72,72,,,,72,72,76,76,76,,76,,,,76,76',
',,,76,,76,76,76,76,76,76,76,,,,,76,76,76,76,76,76,76,,,,,,,,,,76,,,76',
'76,76,76,76,76,76,76,76,76,,76,76,,76,76,76,,,,,,,,,,,,,,,,,,,,76,,',
'76,,,76,76,,76,,76,,,,76,,,,,,,,76,,,,,76,76,76,76,76,76,,,,76,76,78',
'78,78,,78,,,,78,78,,,,78,,78,78,78,78,78,78,78,,78,,,78,78,78,78,78',
'78,78,,,,,,,,,,78,,,78,78,78,78,78,78,78,78,78,78,,78,78,,78,78,78,',
',,,,,,,,,,,,,,,,,,78,,,78,78,,78,78,,78,,78,,78,,78,,,,,,,,78,,78,,',
'78,78,78,78,78,78,,,,78,78,59,59,59,,59,,,,59,59,,,,59,,59,59,59,59',
'59,59,59,,59,,,59,59,59,59,59,59,59,,,,,,,,,,59,,,59,59,59,59,59,59',
'59,59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,59,,59,59,,59',
',59,,59,,59,,,,,,,,59,,59,,,59,59,59,59,59,59,,,,59,59,857,857,857,',
'857,,,,857,857,,,,857,,857,857,857,857,857,857,857,,,,,857,857,857,857',
'857,857,857,,,,,,,,,,857,,,857,857,857,857,857,857,857,857,857,857,',
'857,857,,857,857,857,,,,,,,,,,,,,,,,,,,,857,,,857,,,857,857,,857,,,',
',,857,,,,,,,,857,,,,,857,857,857,857,857,857,,,,857,857,398,398,398',
',398,,,,398,398,,,,398,,398,398,398,398,398,398,398,,,,,398,398,398',
'398,398,398,398,,,,,,,,,,398,,,398,398,398,398,398,398,398,398,398,398',
',398,398,,398,398,398,,,,,,,,,,,,,,,,,,,,398,,,398,,,398,398,,398,,',
',,,398,,,,,,,,398,,,,,398,398,398,398,398,398,,,,398,398,396,396,396',
',396,,,,396,396,,,,396,,396,396,396,396,396,396,396,,,,,396,396,396',
'396,396,396,396,,,,,,,,,,396,,,396,396,396,396,396,396,396,396,396,396',
',396,396,,396,396,396,,,,,,,,,,,,,,,,,,,,396,,,396,,,396,396,,396,,396',
',,,396,,,,,,,,396,,,,,396,396,396,396,396,396,,,,396,396,87,87,87,,87',
',,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,87,87,87,87,87,87,87,,,,,,',
',,,87,,,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,,,,,,,,,',
',,,,,,87,,,87,,,87,87,,87,,,,,,87,,,,,,,,87,,,,,87,87,87,87,87,87,,',
',87,87,852,852,852,,852,,,,852,852,,,,852,,852,852,852,852,852,852,852',
',,,,852,852,852,852,852,852,852,,,,,,,,,,852,,,852,852,852,852,852,852',
'852,852,852,852,,852,852,,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,',
',852,852,,852,,,,,,852,,,,,,,,852,,,,,852,852,852,852,852,852,,,,852',
'852,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,56,56,56,56',
'56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56',
',,,,,,,,,,,,,,,,,,,56,,,56,56,,56,56,,56,,56,,56,,56,,,,,,,,56,,,,,56',
'56,56,56,56,56,,,,56,56,96,96,96,,96,,,,96,96,,,,96,,96,96,96,96,96',
'96,96,,,,,96,96,96,96,96,96,96,,,,,,,,,,96,,,96,96,96,96,96,96,96,96',
'96,96,792,96,96,792,792,792,96,,,,,,,,,,,,,,,,,,,,96,,,96,,,96,96,,96',
',,792,,,,,,,792,792,792,792,,,,,,96,96,96,96,96,96,,,,96,96,97,97,97',
',97,,,,97,97,,,,97,,97,97,97,97,97,97,97,,,,,97,97,97,97,97,97,97,,',
'97,,,,,,,97,,,97,97,97,97,97,97,97,97,97,97,,97,97,,97,97,97,,,,,,,',
',,,,,,,,,,,,97,,,97,,,97,97,,97,,,,,,97,,,,,,,,97,,,,,97,97,97,97,97',
'97,,,,97,97,527,527,527,,527,,,,527,527,,,,527,,527,527,527,527,527',
'527,527,,,,,527,527,527,527,527,527,527,,,,,,,,,,527,,,527,527,527,527',
'527,527,527,527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527',
',,527,,,527,527,,527,,,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527',
',,,527,527,53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,53',
'53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53,53,53,53,53,,53',
'53,,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,53,,,,,,53,,,,,,,,53',
',,,,53,53,53,53,53,53,,,,53,53,520,520,520,,520,,,,520,520,,,,520,,520',
'520,520,520,520,520,520,,,,,520,520,520,520,520,520,520,,,,,,,,,,520',
',,520,520,520,520,520,520,520,520,520,520,,520,520,,520,520,520,,,,',
',,,,,,,,,,,,,,,520,,,520,,,520,520,,520,,,,,,520,,,,,,,,520,,,,,520',
'520,520,520,520,520,,,,520,520,103,103,103,,103,,,,103,103,,,,103,,103',
'103,103,103,103,103,103,,,,,103,103,103,103,103,103,103,,,,,,,,,,103',
',,103,103,103,103,103,103,103,103,103,103,,103,103,,103,103,103,,,,',
',,,,,,,,,,,,,,,103,,,103,,,103,103,,103,,103,,,,103,,,,,,,,103,,,,,103',
'103,103,103,103,103,,,,103,103,514,514,514,,514,,,,514,514,,,,514,,514',
'514,514,514,514,514,514,,,,,514,514,514,514,514,514,514,,,,,,,,,,514',
',,514,514,514,514,514,514,514,514,514,514,,514,514,,514,514,514,,,,',
',,,,,,,,,,,,,,,514,,,514,,,514,514,,514,,,,,,514,,,,,,,,514,,,,,514',
'514,514,514,514,514,,,,514,514,511,511,511,,511,,,,511,511,,,,511,,511',
'511,511,511,511,511,511,,,,,511,511,511,511,511,511,511,,,,,,,,,,511',
',,511,511,511,511,511,511,511,511,511,511,,511,511,,511,511,511,,,,',
',,,,,,,,,,,,,,,511,,,511,,,511,511,,511,,511,,,,511,,,,,,,,511,,,,,511',
'511,511,511,511,511,,,,511,511,401,401,401,,401,,,,401,401,,,,401,,401',
'401,401,401,401,401,401,,,,,401,401,401,401,401,401,401,,,,,,,,,,401',
',,401,401,401,401,401,401,401,401,401,401,,401,401,,401,401,401,,,,',
',,,,,,,,,,,,,,,401,,,401,,,401,401,,401,,,,,,401,,,,,,,,401,,,,,401',
'401,401,401,401,401,,,,401,401,403,403,403,,403,,,,403,403,,,,403,,403',
'403,403,403,403,403,403,,,,,403,403,403,403,403,403,403,,,,,,,,,,403',
',,403,403,403,403,403,403,403,403,403,403,,403,403,,403,403,403,,,,',
',,,,,,,,,,,,,,,403,,,403,,,403,403,,403,,403,,403,,403,,,,,,,,403,,',
',,403,403,403,403,403,403,,,,403,403,845,845,845,,845,,,,845,845,,,',
'845,,845,845,845,845,845,845,845,,,,,845,845,845,845,845,845,845,,,',
',,,,,,845,,,845,845,845,845,845,845,845,845,845,845,435,845,845,435',
'435,435,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845,845,,845,,,435,,,,,,',
'435,435,435,435,,,,,,845,845,845,845,845,845,,,,845,845,405,405,405',
',405,,,,405,405,,,,405,,405,405,405,405,405,405,405,,,,,405,405,405',
'405,405,405,405,,,,,,,,,,405,,,405,405,405,405,405,405,405,405,405,405',
',405,405,,405,405,405,,,,,,,,,,,,,,,,,,,,405,,,405,,,405,405,,405,,',
',,,405,,,,,,,,405,,,,,405,405,405,405,405,405,,,,405,405,585,585,585',
',585,,,,585,585,,,,585,,585,585,585,585,585,585,585,,,,,585,585,585',
'585,585,585,585,,,,,,,,,,585,,,585,585,585,585,585,585,585,585,585,585',
',585,585,,585,585,585,,,,,,,,,,,,,,,,,,,,585,,,585,,,585,585,,585,,',
',,,585,,,,,,,,585,,,,,585,585,585,585,585,585,,,,585,585,51,51,51,,51',
',,,51,51,,,,51,,51,51,51,51,51,51,51,,,,,51,51,51,51,51,51,51,,,,,,',
',,,51,,,51,51,51,51,51,51,51,51,51,51,,51,51,,51,51,51,,,,,,,,,,,,,',
',,,,,,51,,,51,,,51,51,,51,,51,,51,,51,,,,,,,,51,,,,,51,51,51,51,51,51',
',,,51,51,389,389,389,,389,,,,389,389,,,,389,,389,389,389,389,389,389',
'389,,,,,389,389,389,389,389,389,389,,,389,,,,,,,389,,,389,389,389,389',
'389,389,389,389,389,389,,389,389,,389,389,389,,,,,,,,,,,,,,,,,,,,389',
',,389,,,389,389,,389,,389,,389,,389,,,,,,,,389,,,,,389,389,389,389,389',
'389,,,,389,389,879,879,879,,879,,,,879,879,,,,879,,879,879,879,879,879',
'879,879,,,,,879,879,879,879,879,879,879,,,,,,,,,,879,,,879,879,879,879',
'879,879,879,879,879,879,,879,879,,879,879,879,,,,,,,,,,,,,,,,,,,,879',
',,879,,,879,879,,879,,879,,879,,879,,,,,,,,879,,,,,879,879,879,879,879',
'879,,,,879,879,831,831,831,,831,,,,831,831,,,,831,,831,831,831,831,831',
'831,831,,,,,831,831,831,831,831,831,831,,,,,,,,,,831,,,831,831,831,831',
'831,831,831,831,831,831,,831,831,,831,831,831,,,,,,,,,,,,,,,,,,,,831',
',,831,,,831,831,,831,,831,,831,,831,,,,,,,,831,,,,,831,831,831,831,831',
'831,,,,831,831,828,828,828,,828,,,,828,828,,,,828,,828,828,828,828,828',
'828,828,,,,,828,828,828,828,828,828,828,,,,,,,,,,828,,,828,828,828,828',
'828,828,828,828,828,828,,828,828,,828,828,828,,,,,,,,,,,,,,,,,,,,828',
',,828,,,828,828,,828,,828,,828,,828,,,,,,,,828,,,,,828,828,828,828,828',
'828,,,,828,828,124,124,124,,124,,,,124,124,,,,124,,124,124,124,124,124',
'124,124,,,,,124,124,124,124,124,124,124,,,,,,,,,,124,,,124,124,124,124',
'124,124,124,124,124,124,,124,124,,124,124,124,,,,,,,,,,,,,,,,,,,,124',
',,124,,,124,124,,124,,124,,124,,124,,,,,,,,124,,,,,124,124,124,124,124',
'124,,,,124,124,572,572,572,,572,,,,572,572,,,,572,,572,572,572,572,572',
'572,572,,,,,572,572,572,572,572,572,572,,,,,,,,,,572,,,572,572,572,572',
'572,572,572,572,572,572,,572,572,,572,572,572,,,,,,,,,,,,,,,,,,,,572',
',,572,,,572,572,,572,,,,,,572,,,,,,,,572,,,,,572,572,572,572,572,572',
',,,572,572,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544',
'544,,,,,544,544,544,544,544,544,544,,,,,,,,,,544,,,544,544,544,544,544',
'544,544,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544',
',,544,544,,544,,,,,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544',
'544,545,545,545,,545,,,,545,545,,,,545,,545,545,545,545,545,545,545',
',,,,545,545,545,545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545,545',
'545,545,545,545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,',
',545,545,,545,,,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545',
'545,131,131,131,,131,,,,131,131,,,,131,,131,131,131,131,131,131,131',
',,,,131,131,131,131,131,131,131,,,,,,,,,,131,,,131,131,131,131,131,131',
'131,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,',
',131,131,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131',
'131,591,591,591,,591,,,,591,591,,,,591,,591,591,591,591,591,591,591',
',,,,591,591,591,591,591,591,591,,,,,,,,,,591,,,591,591,591,591,591,591',
'591,591,591,591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,',
',591,591,,591,,,,,,591,,,,,,,,591,,,,,591,591,591,591,591,591,,,,591',
'591,820,820,820,,820,,,,820,820,,,,820,,820,820,820,820,820,820,820',
',,,,820,820,820,820,820,820,820,,,,,,,,,,820,,,820,820,820,820,820,820',
'820,820,820,820,,820,820,,820,820,820,,,,,,,,,,,,,,,,,,,,820,,,820,',
',820,820,,820,,820,,,,820,,,,,,,,820,,,,,820,820,820,820,820,820,,,',
'820,820,596,596,596,,596,,,,596,596,,,,596,,596,596,596,596,596,596',
'596,,,,,596,596,596,596,596,596,596,,,,,,,,,,596,,,596,596,596,596,596',
'596,596,596,596,596,,596,596,,596,596,596,,,,,,,,,,,,,,,,,,,,596,,,596',
',,596,596,,596,,596,,,,596,,,,,,,,596,,,,,596,596,596,596,596,596,,',
',596,596,887,887,887,,887,,,,887,887,,,,887,,887,887,887,887,887,887',
'887,,,,,887,887,887,887,887,887,887,,,,,,,,,,887,,,887,887,887,887,887',
'887,887,887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887',
',,887,887,,887,,887,,,,887,,,,,,,,887,,,,,887,887,887,887,887,887,,',
',887,887,407,407,407,,407,,,,407,407,,,,407,,407,407,407,407,407,407',
'407,,,,,407,407,407,407,407,407,407,,,,,,,,,,407,,,407,407,407,407,407',
'407,407,407,407,407,,407,407,,407,407,407,,,,,,,,,,,,,,,,,,,,407,,,407',
',,407,407,,407,,407,,407,,407,,,,,,,,407,,,,,407,407,407,407,407,407',
',,,407,407,550,550,550,,550,,,,550,550,,,,550,,550,550,550,550,550,550',
'550,,,,,550,550,550,550,550,550,550,,,,,,,,,,550,,,550,550,550,550,550',
'550,550,550,550,550,,550,550,,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550',
',,550,550,,550,,,,,,550,,,,,,,,550,,,,,550,550,550,550,550,550,,,,550',
'550,141,141,141,,141,,,,141,141,,,,141,,141,141,141,141,141,141,141',
',,,,141,141,141,141,141,141,141,,,,,,,,,,141,,,141,141,141,141,141,141',
'141,141,141,141,,141,141,,141,141,141,,,,,,,,,,,,,,,,,,,,141,,,141,',
',141,141,,141,,,,,,141,,,,,,,,141,,,,,141,141,141,141,141,141,,,,141',
'141,691,691,691,,691,,,,691,691,,,,691,,691,691,691,691,691,691,691',
',,,,691,691,691,691,691,691,691,,,,,,,,,,691,,,691,691,691,691,691,691',
'691,691,691,691,,691,691,,691,691,691,,,,,,,,,,,,,,,,,,,,691,,,691,',
',691,691,,691,,,,,,691,,,,,,,,691,,,,,691,691,691,691,691,691,,,,691',
'691,30,30,30,30,30,30,30,30,,,30,30,30,30,30,,,30,30,30,30,30,30,30',
',,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30',
'30,,,30,,,,,,,,30,30,,30,30,30,30,,30,30,,,30,,,,,30,30,30,30,,,,,,',
',,,,,,30,30,,30,30,30,30,30,30,30,30,30,,30,,,30,30,,,376,376,376,,376',
',,30,376,376,,,,376,,376,376,376,376,376,376,376,,,,,376,376,376,376',
'376,376,376,,,,,,,,,,376,,,376,376,376,376,376,376,376,376,376,376,',
'376,376,,376,376,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376,376,,376,,376',
',,,376,,,,,,,,376,,,,,376,376,376,376,376,376,,,,376,376,146,146,146',
',146,,,,146,146,,,,146,,146,146,146,146,146,146,146,,,,,146,146,146',
'146,146,146,146,,,,,,,,,,146,,,146,146,146,146,146,146,146,146,146,146',
',146,146,,146,146,146,,,,,,,,,,,,,,,,,,,,146,,,146,,,146,146,,146,,',
',,,146,,,,,,,,146,,,,,146,146,146,146,146,146,,,,146,146,785,785,785',
',785,,,,785,785,,,,785,,785,785,785,785,785,785,785,,,,,785,785,785',
'785,785,785,785,,,,,,,,,,785,,,785,785,785,785,785,785,785,785,785,785',
',785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,785,,',
',,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785,785,783,783,783',
',783,,,,783,783,,,,783,,783,783,783,783,783,783,783,,,,,783,783,783',
'783,783,783,783,,,,,,,,,,783,,,783,783,783,783,783,783,783,783,783,783',
',783,783,,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,783,,',
',,,783,,,,,,,,783,,,,,783,783,783,783,783,783,,,,783,783,782,782,782',
',782,,,,782,782,,,,782,,782,782,782,782,782,782,782,,,,,782,782,782',
'782,782,782,782,,,,,,,,,,782,,,782,782,782,782,782,782,782,782,782,782',
',782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,782,,',
',,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782,29,29,29,,29',
',,,29,29,,,,29,,29,29,29,29,29,29,29,,,,,29,29,29,29,29,29,29,,,,,,',
',,,29,,,29,29,29,29,29,29,29,29,29,29,,29,29,,29,29,29,,,,,,,,,,,,,',
',,,,,,29,,,29,,,29,29,,29,,,,,,29,,,,,,,,29,,,,,29,29,29,29,29,29,,',
',29,29,154,154,154,,154,,,,154,154,,,,154,,154,154,154,154,154,154,154',
',,,,154,154,154,154,154,154,154,,,,,,,,,,154,,,154,154,154,154,154,154',
'154,154,154,154,,154,154,,,,154,,,,,,,,,,,,,,,,,,,,154,,,154,,,154,154',
',154,,,,,,,,,,,,,,,,,,,154,154,154,154,154,154,,,,154,154,155,155,155',
',155,,,,155,155,,,,155,,155,155,155,155,155,155,155,,,,,155,155,155',
'155,155,155,155,,,,,,,,,,155,,,155,155,155,155,155,155,155,155,155,155',
',155,155,,155,155,155,,,,,,,,,,,,,,,,,,,,155,,,155,,,155,155,,155,,',
',,,155,,,,,,,,155,,,,,155,155,155,155,155,155,,,,155,155,412,412,412',
',412,,,,412,412,,,,412,,412,412,412,412,412,412,412,,,,,412,412,412',
'412,412,412,412,,,412,,,,,,,412,,,412,412,412,412,412,412,412,412,412',
'412,,412,412,,412,412,412,,,,,,,,,,,,,,,,,,,,412,,,412,,,412,412,,412',
',,,,,412,,,,,,,,412,,,,,412,412,412,412,412,412,,,,412,412,28,28,28',
'28,28,28,28,28,,,28,28,28,28,28,,,28,28,28,28,28,28,28,,,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,28,,,,',
',,,28,28,,28,28,28,28,,28,28,,,28,,,,,28,28,28,28,,,,,,,,,,,,,28,28',
',28,28,28,28,28,28,28,28,28,,28,,,28,28,,,61,61,61,,61,,,28,61,61,,',
',61,,61,61,61,61,61,61,61,,,,,61,61,61,61,61,61,61,,,,,,,,,,61,,,61',
'61,61,61,61,61,61,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,',
'61,,,61,61,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,779',
'779,779,,779,,,,779,779,,,,779,,779,779,779,779,779,779,779,,,,,779',
'779,779,779,779,779,779,,,,,,,,,,779,,,779,779,779,779,779,779,779,779',
'779,779,,779,779,,779,779,779,,,,,,,,,,,,,,,,,,,,779,,,779,,,779,779',
',779,,,,,,779,,,,,,,,779,,,,,779,779,779,779,779,779,,,,779,779,368',
'368,368,,368,,,,368,368,,,,368,,368,368,368,368,368,368,368,,,,,368',
'368,368,368,368,368,368,,,,,,,,,,368,,,368,368,368,368,368,368,368,368',
'368,368,,368,368,,368,368,368,,,,,,,,,,,,,,,,,,,,368,,,368,368,,368',
'368,,368,,368,,368,,368,,,,,,,,368,,,,,368,368,368,368,368,368,,,,368',
'368,25,25,25,,25,,,,25,25,,,,25,,25,25,25,25,25,25,25,,,,,25,25,25,25',
'25,25,25,,,,,,,,,,25,,,25,25,25,25,25,25,25,25,25,25,,25,25,,25,25,25',
',,,,,,,,,,,,,,,,,,,25,,,25,,,25,25,,25,,,,,,25,,,,,,,,25,,,,,25,25,25',
'25,25,25,,,,25,25,892,892,892,,892,,,,892,892,,,,892,,892,892,892,892',
'892,892,892,,,,,892,892,892,892,892,892,892,,,,,,,,,,892,,,892,892,892',
'892,892,892,892,892,892,892,,892,892,,892,892,892,,,,,,,,,,,,,,,,,,',
',892,,,892,,,892,892,,892,,,,,,892,,,,,,,,892,,,,,892,892,892,892,892',
'892,,,,892,892,164,164,164,,164,,,,164,164,,,,164,,164,164,164,164,164',
'164,164,,,,,164,164,164,164,164,164,164,,,,,,,,,,164,,,164,164,164,164',
'164,164,164,164,164,164,,164,164,,,,164,,,,,,,,,,,,,,,,,,,,164,,,164',
',,164,164,,164,,,,,,,,,,,,,,,,,,,164,164,164,164,164,164,,,,164,164',
'165,165,165,,165,,,,165,165,,,,165,,165,165,165,165,165,165,165,,,,',
'165,165,165,165,165,165,165,,,,,,,,,,165,,,165,165,165,165,165,165,165',
'165,165,165,,165,165,,,,165,,,,,,,,,,,,,,,,,,,,165,,,165,,,165,165,',
'165,,,,,,,,,,,,,,,,,,,165,165,165,165,165,165,,,,165,165,633,633,633',
'633,633,633,633,633,,,633,633,633,633,633,,,633,633,633,633,633,633',
'633,,,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,,,633,,,,,,,,633,633,,633,633,633,633,,633',
'633,,,633,,,,,633,633,633,633,,,,,,,,,,,,,633,633,,633,633,633,633,633',
'633,633,633,633,,633,,,633,633,,,21,21,21,,21,,,633,21,21,,,,21,,21',
'21,21,21,21,21,21,,,,,21,21,21,21,21,21,21,,,,,,,,,,21,,,21,21,21,21',
'21,21,21,21,21,21,,21,21,,,,21,,,,,,,,,,,,,,,,,,,,21,,,21,,,21,21,,21',
',21,,,,,,,,,,,,,,,,,21,21,21,21,21,21,,,,21,21,20,20,20,,20,,,,20,20',
',,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20,20,20,,,,,,,,,,20,,,20',
'20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,,,,,,,,,,,,,,,,,,,20,,',
'20,,,20,20,,20,,,,,,20,,,,,,,,20,,,,,20,20,20,20,20,20,,,,20,20,764',
'764,764,,764,,,,764,764,,,,764,,764,764,764,764,764,764,764,,,,,764',
'764,764,764,764,764,764,,,,,,,,,,764,,,764,764,764,764,764,764,764,764',
'764,764,,764,764,,764,764,764,,,,,,,,,,,,,,,,,,,,764,,,764,,,764,764',
',764,,,,,,764,,,,,,,,764,,,,,764,764,764,764,764,764,,,,764,764,365',
'365,365,,365,,,,365,365,,,,365,,365,365,365,365,365,365,365,,,,,365',
'365,365,365,365,365,365,,,,,,,,,,365,,,365,365,365,365,365,365,365,365',
'365,365,,365,365,,365,365,365,,,,,,,,,,,,,,,,,,,,365,,,365,365,,365',
'365,,365,,365,,365,,365,,,,,,,,365,,,,,365,365,365,365,365,365,,,,365',
'365,760,760,760,,760,,,,760,760,,,,760,,760,760,760,760,760,760,760',
',,,,760,760,760,760,760,760,760,,,,,,,,,,760,,,760,760,760,760,760,760',
'760,760,760,760,,760,760,,760,760,760,,,,,,,,,,,,,,,,,,,,760,,,760,',
',760,760,,760,,,,,,760,,,,,,,,760,,,,,760,760,760,760,760,760,,,,760',
'760,560,560,560,,560,,,,560,560,,,,560,,560,560,560,560,560,560,560',
',,,,560,560,560,560,560,560,560,,,560,,,,,,,560,,,560,560,560,560,560',
'560,560,560,560,560,,560,560,,560,560,560,,,,,,,,,,,,,,,,,,,,560,,,560',
',,560,560,,560,,,,,,560,,,,,,,,560,,,,,560,560,560,560,560,560,,,,560',
'560,642,642,642,,642,,,,642,642,,,,642,,642,642,642,642,642,642,642',
',,,,642,642,642,642,642,642,642,,,,,,,,,,642,,,642,642,642,642,642,642',
'642,642,642,642,,642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,',
',642,642,,642,,,,,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642',
'642,654,654,654,,654,,,,654,654,,,,654,,654,654,654,654,654,654,654',
',,,,654,654,654,654,654,654,654,,,,,,,,,,654,,,654,654,654,654,654,654',
'654,654,654,654,,654,654,,654,654,654,,,,,,,,,,,,,,,,,,,,654,,,654,',
',654,654,,654,,654,,654,,654,,,,,,,,654,,,,,654,654,654,654,654,654',
',,,654,654,746,746,746,,746,,,,746,746,,,,746,,746,746,746,746,746,746',
'746,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746,746,746',
'746,746,746,746,746,746,,746,746,,746,746,746,,,,,,,,,,,,,,,,,,,,746',
',,746,,,746,746,,746,,,,,,746,,,,,,,,746,,,,,746,746,746,746,746,746',
',,,746,746,363,363,363,,363,,,,363,363,,,,363,,363,363,363,363,363,363',
'363,,,,,363,363,363,363,363,363,363,,,,,,,,,,363,,,363,363,363,363,363',
'363,363,363,363,363,,363,363,,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363',
'363,,363,363,,363,,363,,363,,363,,,,,,,,363,,,,,363,363,363,363,363',
'363,,,,363,363,551,551,551,,551,,,,551,551,,,,551,,551,551,551,551,551',
'551,551,,,,,551,551,551,551,551,551,551,,,,,,,,,,551,,,551,551,551,551',
'551,551,551,551,551,551,,551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551',
',,551,,,551,551,,551,,,,,,551,,,,,,,,551,,,,,551,551,551,551,551,551',
',,,551,551,6,6,6,,6,,,,6,6,,,,6,,6,6,6,6,6,6,6,,,,,6,6,6,6,6,6,6,,,',
',,,,,,6,,,6,6,6,6,6,6,6,6,6,6,,6,6,,,,6,,,,,,,,,,,,,,,,,,,,6,,,6,,,6',
'6,,6,,6,,,,,,,,,,,,,,,,,6,6,6,6,6,6,,,,6,6,261,261,261,,261,,,,261,261',
',,,261,,261,261,261,261,261,261,261,,,,,261,261,261,261,261,261,261',
',,261,,,,,,,261,,,261,261,261,261,261,261,261,261,261,261,,261,261,',
'261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,261,,,,,,261,,,',
',,,,261,,,,,261,261,261,261,261,261,,,,261,261,262,262,262,,262,,,,262',
'262,,,,262,,262,262,262,262,262,262,262,,,,,262,262,262,262,262,262',
'262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,262,262,,262,262',
',262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,262,,,,,,262,,',
',,,,,262,,,,,262,262,262,262,262,262,,,,262,262,741,741,741,,741,,,',
'741,741,,,,741,,741,741,741,741,741,741,741,,,,,741,741,741,741,741',
'741,741,,,,,,,,,,741,,,741,741,741,741,741,741,741,741,741,741,,741',
'741,,741,741,741,,,,,,,,,,,,,,,,,,,,741,,,741,,,741,741,,741,,741,,',
',741,,,,,,,,741,,,,,741,741,741,741,741,741,,,,741,741,17,17,17,,17',
',,,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17,17,17,17,17,17,,,,,,',
',,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17,,17,17,17,,,,,,,,,,,,,',
',,,,,,17,,,17,,,17,17,,17,,17,,17,,17,,,,,,,,17,,,,,17,17,17,17,17,17',
',,,17,17,564,564,564,,564,,,,564,564,,,,564,,564,564,564,564,564,564',
'564,,,,,564,564,564,564,564,564,564,,,,,,,,,,564,,,564,564,564,564,564',
'564,564,564,564,564,,564,564,,,,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564',
'564,,564,,564,,,,,,,,,,,564,,,,,,564,564,564,564,564,564,,,,564,564',
'267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,',
'267,267,267,267,267,267,267,,,,,,,,,,267,,,267,267,267,267,267,267,267',
'267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,267,',
'267,267,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267',
'267,14,14,14,14,14,,,,14,14,,,,14,,14,14,14,14,14,14,14,,,,,14,14,14',
'14,14,14,14,,,14,,,,,,14,14,14,14,14,14,14,14,14,14,14,14,14,14,,14',
'14,,14,14,14,,,,,,,,,,,,,,,,,,,,14,,,14,,,14,14,,14,,14,,,,14,,,,,,',
',14,,,,,14,14,14,14,14,14,,,,14,14,452,452,452,,452,,,,452,452,,,,452',
',452,452,452,452,452,452,452,,,,,452,452,452,452,452,452,452,,,,,,,',
',,452,,,452,452,452,452,452,452,452,452,452,452,,452,452,,452,452,452',
',,,,,,,,,,,,,,,,,,,452,,,452,,,452,452,,452,,,,,,452,,,,,,,,452,,,,',
'452,452,452,452,452,452,,,,452,452,662,662,662,,662,,,,662,662,,,,662',
',662,662,662,662,662,662,662,,,,,662,662,662,662,662,662,662,,,,,,,',
',,662,,,662,662,662,662,662,662,662,662,662,662,,662,662,,662,662,662',
',,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,662,,,,,,662,,,,,,,,662,,,,',
'662,662,662,662,662,662,,,,662,662,276,276,276,,276,,,,276,276,,,,276',
',276,276,276,276,276,276,276,,,,,276,276,276,276,276,276,276,,,,,,,',
',,276,,,276,276,276,276,276,276,276,276,276,276,,276,276,,276,276,276',
',,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,276,,,,,,276,,,,,,,,276,,,,',
'276,276,276,276,276,276,,,,276,276,277,277,277,,277,,,,277,277,,,,277',
',277,277,277,277,277,277,277,,,,,277,277,277,277,277,277,277,,,,,,,',
',,277,,,277,277,277,277,277,277,277,277,277,277,,277,277,,277,277,277',
',,,,,,,,,,,,,,,,,,,277,,,277,,,277,277,,277,,,,,,277,,,,,,,,277,,,,',
'277,277,277,277,277,277,,,,277,277,278,278,278,,278,,,,278,278,,,,278',
',278,278,278,278,278,278,278,,,,,278,278,278,278,278,278,278,,,,,,,',
',,278,,,278,278,278,278,278,278,278,278,278,278,,278,278,,278,278,278',
',,,,,,,,,,,,,,,,,,,278,,,278,,,278,278,,278,,,,,,278,,,,,,,,278,,,,',
'278,278,278,278,278,278,,,,278,278,279,279,279,,279,,,,279,279,,,,279',
',279,279,279,279,279,279,279,,,,,279,279,279,279,279,279,279,,,,,,,',
',,279,,,279,279,279,279,279,279,279,279,279,279,,279,279,,279,279,279',
',,,,,,,,,,,,,,,,,,,279,,,279,,,279,279,,279,,,,,,279,,,,,,,,279,,,,',
'279,279,279,279,279,279,,,,279,279,280,280,280,,280,,,,280,280,,,,280',
',280,280,280,280,280,280,280,,,,,280,280,280,280,280,280,280,,,,,,,',
',,280,,,280,280,280,280,280,280,280,280,280,280,,280,280,,280,280,280',
',,,,,,,,,,,,,,,,,,,280,,,280,,,280,280,,280,,,,,,280,,,,,,,,280,,,,',
'280,280,280,280,280,280,,,,280,280,281,281,281,,281,,,,281,281,,,,281',
',281,281,281,281,281,281,281,,,,,281,281,281,281,281,281,281,,,,,,,',
',,281,,,281,281,281,281,281,281,281,281,281,281,,281,281,,281,281,281',
',,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,281,,,,,,281,,,,,,,,281,,,,',
'281,281,281,281,281,281,,,,281,281,282,282,282,,282,,,,282,282,,,,282',
',282,282,282,282,282,282,282,,,,,282,282,282,282,282,282,282,,,,,,,',
',,282,,,282,282,282,282,282,282,282,282,282,282,,282,282,,282,282,282',
',,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,282,,,,,,282,,,,,,,,282,,,,',
'282,282,282,282,282,282,,,,282,282,283,283,283,,283,,,,283,283,,,,283',
',283,283,283,283,283,283,283,,,,,283,283,283,283,283,283,283,,,,,,,',
',,283,,,283,283,283,283,283,283,283,283,283,283,,283,283,,283,283,283',
',,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,283,,,,,,283,,,,,,,,283,,,,',
'283,283,283,283,283,283,,,,283,283,284,284,284,,284,,,,284,284,,,,284',
',284,284,284,284,284,284,284,,,,,284,284,284,284,284,284,284,,,,,,,',
',,284,,,284,284,284,284,284,284,284,284,284,284,,284,284,,284,284,284',
',,,,,,,,,,,,,,,,,,,284,,,284,,,284,284,,284,,,,,,284,,,,,,,,284,,,,',
'284,284,284,284,284,284,,,,284,284,285,285,285,,285,,,,285,285,,,,285',
',285,285,285,285,285,285,285,,,,,285,285,285,285,285,285,285,,,,,,,',
',,285,,,285,285,285,285,285,285,285,285,285,285,,285,285,,285,285,285',
',,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,285,,,,,,285,,,,,,,,285,,,,',
'285,285,285,285,285,285,,,,285,285,286,286,286,,286,,,,286,286,,,,286',
',286,286,286,286,286,286,286,,,,,286,286,286,286,286,286,286,,,,,,,',
',,286,,,286,286,286,286,286,286,286,286,286,286,,286,286,,286,286,286',
',,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,286,,,,,,286,,,,,,,,286,,,,',
'286,286,286,286,286,286,,,,286,286,287,287,287,,287,,,,287,287,,,,287',
',287,287,287,287,287,287,287,,,,,287,287,287,287,287,287,287,,,,,,,',
',,287,,,287,287,287,287,287,287,287,287,287,287,,287,287,,287,287,287',
',,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,287,,,,,,287,,,,,,,,287,,,,',
'287,287,287,287,287,287,,,,287,287,288,288,288,,288,,,,288,288,,,,288',
',288,288,288,288,288,288,288,,,,,288,288,288,288,288,288,288,,,,,,,',
',,288,,,288,288,288,288,288,288,288,288,288,288,,288,288,,288,288,288',
',,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,288,,,,,,288,,,,,,,,288,,,,',
'288,288,288,288,288,288,,,,288,288,289,289,289,,289,,,,289,289,,,,289',
',289,289,289,289,289,289,289,,,,,289,289,289,289,289,289,289,,,,,,,',
',,289,,,289,289,289,289,289,289,289,289,289,289,,289,289,,289,289,289',
',,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,289,,,,,,289,,,,,,,,289,,,,',
'289,289,289,289,289,289,,,,289,289,290,290,290,,290,,,,290,290,,,,290',
',290,290,290,290,290,290,290,,,,,290,290,290,290,290,290,290,,,,,,,',
',,290,,,290,290,290,290,290,290,290,290,290,290,,290,290,,290,290,290',
',,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,290,,,,,,290,,,,,,,,290,,,,',
'290,290,290,290,290,290,,,,290,290,291,291,291,,291,,,,291,291,,,,291',
',291,291,291,291,291,291,291,,,,,291,291,291,291,291,291,291,,,,,,,',
',,291,,,291,291,291,291,291,291,291,291,291,291,,291,291,,291,291,291',
',,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,291,,,,,,291,,,,,,,,291,,,,',
'291,291,291,291,291,291,,,,291,291,292,292,292,,292,,,,292,292,,,,292',
',292,292,292,292,292,292,292,,,,,292,292,292,292,292,292,292,,,,,,,',
',,292,,,292,292,292,292,292,292,292,292,292,292,,292,292,,292,292,292',
',,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,292,,,,,,292,,,,,,,,292,,,,',
'292,292,292,292,292,292,,,,292,292,293,293,293,,293,,,,293,293,,,,293',
',293,293,293,293,293,293,293,,,,,293,293,293,293,293,293,293,,,,,,,',
',,293,,,293,293,293,293,293,293,293,293,293,293,,293,293,,293,293,293',
',,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,293,,,,,,293,,,,,,,,293,,,,',
'293,293,293,293,293,293,,,,293,293,294,294,294,,294,,,,294,294,,,,294',
',294,294,294,294,294,294,294,,,,,294,294,294,294,294,294,294,,,,,,,',
',,294,,,294,294,294,294,294,294,294,294,294,294,,294,294,,294,294,294',
',,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,294,,,,,,294,,,,,,,,294,,,,',
'294,294,294,294,294,294,,,,294,294,295,295,295,,295,,,,295,295,,,,295',
',295,295,295,295,295,295,295,,,,,295,295,295,295,295,295,295,,,,,,,',
',,295,,,295,295,295,295,295,295,295,295,295,295,,295,295,,295,295,295',
',,,,,,,,,,,,,,,,,,,295,,,295,,,295,295,,295,,,,,,295,,,,,,,,295,,,,',
'295,295,295,295,295,295,,,,295,295,296,296,296,,296,,,,296,296,,,,296',
',296,296,296,296,296,296,296,,,,,296,296,296,296,296,296,296,,,,,,,',
',,296,,,296,296,296,296,296,296,296,296,296,296,,296,296,,296,296,296',
',,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,296,,,,,,296,,,,,,,,296,,,,',
'296,296,296,296,296,296,,,,296,296,297,297,297,,297,,,,297,297,,,,297',
',297,297,297,297,297,297,297,,,,,297,297,297,297,297,297,297,,,,,,,',
',,297,,,297,297,297,297,297,297,297,297,297,297,,297,297,,297,297,297',
',,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,297,,,,,,297,,,,,,,,297,,,,',
'297,297,297,297,297,297,,,,297,297,298,298,298,,298,,,,298,298,,,,298',
',298,298,298,298,298,298,298,,,,,298,298,298,298,298,298,298,,,,,,,',
',,298,,,298,298,298,298,298,298,298,298,298,298,,298,298,,298,298,298',
',,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,298,,,,,,298,,,,,,,,298,,,,',
'298,298,298,298,298,298,,,,298,298,299,299,299,,299,,,,299,299,,,,299',
',299,299,299,299,299,299,299,,,,,299,299,299,299,299,299,299,,,,,,,',
',,299,,,299,299,299,299,299,299,299,299,299,299,,299,299,,299,299,299',
',,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,299,,,,,,299,,,,,,,,299,,,,',
'299,299,299,299,299,299,,,,299,299,300,300,300,,300,,,,300,300,,,,300',
',300,300,300,300,300,300,300,,,,,300,300,300,300,300,300,300,,,,,,,',
',,300,,,300,300,300,300,300,300,300,300,300,300,,300,300,,300,300,300',
',,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,300,,,,,,300,,,,,,,,300,,,,',
'300,300,300,300,300,300,,,,300,300,301,301,301,,301,,,,301,301,,,,301',
',301,301,301,301,301,301,301,,,,,301,301,301,301,301,301,301,,,,,,,',
',,301,,,301,301,301,301,301,301,301,301,301,301,,301,301,,301,301,301',
',,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,301,,,,,,301,,,,,,,,301,,,,',
'301,301,301,301,301,301,,,,301,301,11,11,11,,11,,,,11,11,,,,11,,11,11',
'11,11,11,11,11,,,,,11,11,11,11,11,11,11,,,,,,,,,,11,,,11,11,11,11,11',
'11,11,11,11,11,,11,11,,11,11,11,,,,,,,,,,,,,,,,,,,,11,,,11,,,11,11,',
'11,,11,,11,,11,,,,,,,,11,,,,,11,11,11,11,11,11,,,,11,11,449,449,449',
',449,,,,449,449,,,,449,,449,449,449,449,449,449,449,,,,,449,449,449',
'449,449,449,449,,,449,,,,,,,449,,,449,449,449,449,449,449,449,449,449',
'449,,449,449,,449,449,449,,,,,,,,,,,,,,,,,,,,449,,,449,,,449,449,,449',
',,,,,449,,,,,,,,449,,,,,449,449,449,449,449,449,,,,449,449,354,354,354',
',354,,,,354,354,,,,354,,354,354,354,354,354,354,354,,,,,354,354,354',
'354,354,354,354,,,354,,,,,,,354,,,354,354,354,354,354,354,354,354,354',
'354,,354,354,,354,354,354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,354',
',,,,,354,,,,,,,,354,,,,,354,354,354,354,354,354,,,,354,354,727,727,727',
',727,,,,727,727,,,,727,,727,727,727,727,727,727,727,,,,,727,727,727',
'727,727,727,727,,,,,,,,,,727,,,727,727,727,727,727,727,727,727,727,727',
',727,727,,727,727,727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,727,,',
',,,727,,,,,,,,727,,,,,727,727,727,727,727,727,,,,727,727,664,664,664',
',664,,,,664,664,,,,664,,664,664,664,664,664,664,664,,,,,664,664,664',
'664,664,664,664,,,,,,,,,,664,,,664,664,664,664,664,664,664,664,664,664',
',664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,664,,',
',,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664,664,353,353,353',
',353,,,,353,353,,,,353,,353,353,353,353,353,353,353,,,,,353,353,353',
'353,353,353,353,,,,,,,,,,353,,,353,353,353,353,353,353,353,353,353,353',
',353,353,,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353,353,,353,,',
',,,353,,,,,,,,353,,,,,353,353,353,353,353,353,,,,353,353,426,426,426',
',426,,,,426,426,,,,426,,426,426,426,426,426,426,426,,,,,426,426,426',
'426,426,426,426,,,,,,,,,,426,,,426,426,426,426,426,426,426,426,426,426',
',426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426,,,426,426,,426,,426',
',,,426,,,,,,,,426,,,,,426,426,426,426,426,426,,,,426,426,313,313,313',
',313,,,,313,313,,,,313,,313,313,313,313,313,313,313,,,,,313,313,313',
'313,313,313,313,,,,,,,,,,313,,,313,313,313,313,313,313,313,313,313,313',
',313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,,313,313,313,,313',
',313,,313,,313,,,,,,,,313,,,,,313,313,313,313,313,313,,,,313,313,314',
'314,314,,314,,,,314,314,,,,314,,314,314,314,314,314,314,314,,,,,314',
'314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314,314,314,314,314',
'314,314,314,,314,314,,314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314',
'314,,314,,,,,,314,,,,,,,,314,,,,,314,314,314,314,314,314,,,,314,314',
'315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315,315,315,,,,',
'315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,315,315,315,315',
'315,315,315,315,,315,315,,315,315,315,,,,,,,,,,,,,,,,,,,,315,,,315,',
',315,315,,315,,,,,,315,,,,,,,,315,,,,,315,315,315,315,315,315,,,,315',
'315,316,316,316,,316,,,,316,316,,,,316,,316,316,316,316,316,316,316',
',,,,316,316,316,316,316,316,316,,,316,,,,,,,316,,,316,316,316,316,316',
'316,316,316,316,316,,316,316,,316,316,316,,,,,,,,,,,,,,,,,,,,316,,,316',
',,316,316,,316,,,,,,316,,,,,,,,316,,,,,316,316,316,316,316,316,,,,316',
'316,317,317,317,,317,,,,317,317,,,,317,,317,317,317,317,317,317,317',
',,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317,317,317',
'317,317,317,317,317,,317,317,,317,317,317,,,,,,,,,,,,,,,,,,,,317,,,317',
',,317,317,,317,,,,,,317,,,,,,,,317,,,,,317,317,317,317,317,317,,,,317',
'317,318,318,318,318,318,,,,318,318,,,,318,,318,318,318,318,318,318,318',
',,,,318,318,318,318,318,318,318,,,318,,,,,,318,318,318,318,318,318,318',
'318,318,318,318,318,318,318,,318,318,,318,318,318,,,,,,,,,,,,,,,,,,',
',318,,,318,,,318,318,,318,,318,,,,318,,,,,,,,318,,,,,318,318,318,318',
'318,318,,,,318,318,321,321,321,,321,,,,321,321,,,,321,,321,321,321,321',
'321,321,321,,,,,321,321,321,321,321,321,321,,,,,,,,,,321,,,321,321,321',
'321,321,321,321,321,321,321,,321,321,,321,321,321,,,,,,,,,,,,,,,,,,',
',321,,,321,,,321,321,,321,,321,,321,,321,,,,,,,,321,,,,,321,321,321',
'321,321,321,,,,321,321,351,351,351,,351,,,,351,351,,,,351,,351,351,351',
'351,351,351,351,,,,,351,351,351,351,351,351,351,,,351,,,,,,,351,,,351',
'351,351,351,351,351,351,351,351,351,,351,351,,351,351,351,,,,,,,,,,',
',,,,,,,,,351,,,351,,,351,351,,351,,,,,,351,,,,,,,,351,,,,,351,351,351',
'351,351,351,,,,351,351,665,665,665,,665,,,,665,665,,,,665,,665,665,665',
'665,665,665,665,,,,,665,665,665,665,665,665,665,,,,,,,,,,665,,,665,665',
'665,665,665,665,665,665,665,665,,665,665,,665,665,665,,,,,,,,,,,,,,',
',,,,,665,,,665,,,665,665,,665,,665,,,,665,,,,,,,,665,,,,,665,665,665',
'665,665,665,,,,665,665,669,669,669,,669,,,,669,669,,,,669,,669,669,669',
'669,669,669,669,,,,,669,669,669,669,669,669,669,,,,,,,,,,669,,,669,669',
'669,669,669,669,669,669,669,669,,669,669,,669,669,669,,,,,,,,,,,,,,',
',,,,,669,,,669,,,669,669,,669,,669,,,,669,,,,,,,,669,,,,,669,669,669',
'669,669,669,,,,669,669,719,719,719,,719,,,,719,719,,,,719,,719,719,719',
'719,719,719,719,,,,,719,719,719,719,719,719,719,,,719,,,,,,,719,,,719',
'719,719,719,719,719,719,719,719,719,,719,719,,719,719,719,,,,,,,,,,',
',,,,,,,,,719,,,719,,,719,719,,719,,,,,,719,,,,,,,,719,,,,,719,719,719',
'719,719,719,,,,719,719,444,444,444,,444,,,,444,444,,,,444,,444,444,444',
'444,444,444,444,,,,,444,444,444,444,444,444,444,,,,,,,,,,444,,,444,444',
'444,444,444,444,444,444,444,444,,444,444,,444,444,444,,,,,,,,,,,,,,',
',,,,,444,,,444,,,444,444,,444,,,,,,444,,,,,,,,444,,,,,444,444,444,444',
'444,444,,,,444,444,399,399,399,,399,,,,399,399,,,,399,,399,399,399,399',
'399,399,399,,,,,399,399,399,399,399,399,399,,,,,,,,,,399,,,399,399,399',
'399,399,399,399,399,399,399,,399,399,,399,399,399,,,,,,,,,,,,,,,,,,',
',399,,,399,,,399,399,,399,,,,,,399,,,,,,,,399,,,,,399,399,399,399,399',
'399,,,,399,399,710,710,710,,710,,,,710,710,,,,710,,710,710,710,710,710',
'710,710,,,,,710,710,710,710,710,710,710,,,,,,,,,,710,,,710,710,710,710',
'710,710,710,710,710,710,,710,710,,710,710,710,,,,,,,,,,,,,,,,,,,,710',
',,710,,,710,710,,710,,710,,710,,710,,,,,,,,710,,,,,710,710,710,710,710',
'710,,,,710,710,332,332,332,,332,,,,332,332,,,,332,,332,332,332,332,332',
'332,332,,,,,332,332,332,332,332,332,332,,,,,,,,,,332,,,332,332,332,332',
'332,332,332,332,332,332,,332,332,,332,332,332,,,,,,,,,,,,,,,,,,,,332',
',,332,,,332,332,,332,,,,,,332,,,,,,,,332,,,,,332,332,332,332,332,332',
',,,332,332,437,437,437,437,437,437,437,437,,,437,437,437,437,437,,,437',
'437,437,437,437,437,437,,,437,437,437,437,437,437,437,437,437,437,437',
'437,437,437,437,437,437,437,437,437,437,437,437,,,437,,,,,,,,437,437',
',437,437,437,437,,437,437,,,437,,,,,437,437,437,437,,,,,,,,,,,,,437',
'437,,437,437,437,437,437,437,437,437,437,,437,,,437,437,,,334,334,334',
',334,,,437,334,334,,,,334,,334,334,334,334,334,334,334,,,,,334,334,334',
'334,334,334,334,,,,,,,,,,334,,,334,334,334,334,334,334,334,334,334,334',
',334,334,,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,,,334,334,,334,,334',
',,,334,,,,,,,,334,,,,,334,334,334,334,334,334,,,,334,334,707,707,707',
',707,,,,707,707,,,,707,,707,707,707,707,707,707,707,,,,,707,707,707',
'707,707,707,707,,,,,,,,,,707,,,707,707,707,707,707,707,707,707,707,707',
',707,707,,707,707,707,,,,,,,,,,,,,,,,,,,,707,,,707,,,707,707,,707,,',
',,,707,,,,,,,,707,,,,,707,707,707,707,707,707,,,,707,707,706,706,706',
',706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,706,706,706',
'706,706,706,706,,,,,,,,,,706,,,706,706,706,706,706,706,706,706,706,706',
',706,706,,706,706,706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,706,,',
',,,706,,,,,,,,706,,,,,706,706,706,706,706,706,,,,706,706,705,705,705',
',705,,,,705,705,,,,705,,705,705,705,705,705,705,705,,,,,705,705,705',
'705,705,705,705,,,,,,,,,,705,,,705,705,705,705,705,705,705,705,705,705',
',705,705,,705,705,705,,,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,705,,',
',,,705,,,,,,,,705,,,,,705,705,705,705,705,705,,,,705,705,436,436,436',
',436,,,,436,436,,,,436,,436,436,436,436,436,436,436,,,,,436,436,436',
'436,436,436,436,,,436,,,,,,,436,,,436,436,436,436,436,436,436,436,436',
'436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,436',
',,,,,436,,,,,,,,436,,,,,436,436,436,436,436,436,,,,436,436,703,703,703',
',703,,,,703,703,,,,703,,703,703,703,703,703,703,703,,,,,703,703,703',
'703,703,703,703,,,,,,,,,,703,,,703,703,703,703,703,703,703,703,703,703',
',703,703,,703,703,703,,,,,,,,,,,,,,,,,,,,703,,,703,,,703,703,,703,,703',
',703,,703,,,,,,,,703,,,,,703,703,703,703,703,703,,,,703,703,700,700',
'700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,700,700',
'700,700,700,700,700,,,,,,,,,,700,,,700,700,700,700,700,700,700,700,700',
'700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,700',
',700,,700,,700,,,,,,,,700,,,,,700,700,700,700,700,700,,,,700,700,445',
'445,445,,445,,,,445,445,,,,445,,445,445,445,445,445,445,445,,,,,445',
'445,445,445,445,445,445,,,,,,,,,,445,,,445,445,445,445,445,445,445,445',
'445,445,,445,445,,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445',
',445,,,,,,445,,,,,,,,445,,,,,445,445,445,445,445,445,,,,445,445,611',
'611,611,611,611,611,611,611,,,611,611,611,611,611,,,611,611,611,611',
'611,611,611,,,611,611,611,611,611,611,611,611,611,611,611,611,611,611',
'611,611,611,611,611,611,611,611,611,,,611,,,,,,,,611,611,,611,611,611',
'611,,611,611,,,611,,,,,611,611,611,611,,,,,,,,,,,,,611,611,,611,611',
'611,611,611,611,611,611,611,,611,,,611,257,257,257,257,257,257,257,257',
',,257,257,257,257,257,,,257,257,257,257,257,257,257,,,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,,,,,,,257,257,,257,257,257,257,,257,257,,,257',
',,,,257,257,257,257,,,,,,,,,,,,,257,257,,257,257,257,257,257,257,257',
'257,257,,257,,,257,84,84,84,84,84,84,84,84,,,84,84,84,84,84,,,84,84',
'84,84,84,84,84,,,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,,,,,,,84,84,,84,84,84,84,,84,84,,,84,',
',,,84,84,84,84,,,,,,,,,,,,,84,84,,84,84,84,84,84,84,84,84,84,,84,,,84',
'26,26,26,26,26,26,26,26,,,26,26,26,26,26,,,26,26,26,26,26,26,26,,,26',
'26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,,,,,,,26,26,,26,26,26,26,,26,26,,,26,,,,,26,26,26,26,,,,,,26',
',,,,,,26,26,,26,26,26,26,26,26,26,26,26,,26,424,424,26,,424,,,,,,,,424',
'424,,424,424,424,424,,424,424,,,424,,,,,424,424,424,424,,,,,,,,,,,,',
'424,424,,424,424,424,424,424,424,424,424,424,,424,594,594,424,,594,',
',,,,,,594,594,,594,594,594,594,,594,594,,,594,,,,,594,594,594,594,,',
',,,,,,,,,,594,594,,594,594,594,594,594,594,594,594,594,,594,422,422',
'594,,422,,,,,,,,422,422,,422,422,422,422,,422,422,,,422,,,,,422,422',
'422,422,,,,,,,,,,,,,422,422,,422,422,422,422,422,422,422,422,422,,422',
'423,423,422,,423,,,,,,,,423,423,,423,423,423,423,,423,423,,,423,,,,',
'423,423,423,423,,,,,,,,,,,,,423,423,,423,423,423,423,423,423,423,423',
'423,,423,374,374,423,,374,,,,,,,,374,374,,374,374,374,374,,374,374,',
',374,,,,,374,374,374,374,,,,,,,,,,,,,374,374,,374,374,374,374,374,374',
'374,374,374,,374,885,885,374,,885,,,,,,,,885,885,,885,885,885,885,,885',
'885,,,885,,,,,885,885,885,885,,,,,,,,,,,,,885,885,,885,885,885,885,885',
'885,885,885,885,,885,375,375,885,,375,,,,,,,,375,375,,375,375,375,375',
',375,375,,,375,,,,,375,375,375,375,,,,,,,,,,,,,375,375,,375,375,375',
'375,375,375,375,375,375,,375,,,375,834,834,834,834,834,834,834,834,834',
'834,834,,834,834,,,834,834,,,,,,,,,,,,,,834,,834,,834,834,834,834,834',
'834,834,,834,,,,,,,595,595,,,595,,,,,834,,834,595,595,,595,595,595,595',
',595,595,,,595,,,,,595,595,595,595,,,,,,,,,,,,,595,595,,595,595,595',
'595,595,595,595,595,595,,595,394,394,595,,394,,,,,,,,394,394,,394,394',
'394,394,,394,394,,,394,,,,,394,394,394,394,,,,,,,,,,,,,394,394,,394',
'394,394,394,394,394,394,394,394,,394,395,395,394,,395,,,,,,,,395,395',
',395,395,395,395,,395,395,,,395,,,,,395,395,395,395,,,,,,,,,,,,,395',
'395,,395,395,395,395,395,395,395,395,395,,395,102,102,395,,102,,,,,',
',,102,102,,102,102,102,102,,102,102,,,102,,,,,102,102,102,102,,,,,,',
',,,,,,102,102,,102,102,102,102,102,102,102,102,102,,102,101,101,102',
',101,,,,,,,,101,101,,101,101,101,101,,101,101,,,101,,,,,101,101,101',
'101,,,,,,,,,,,,,101,101,,101,101,101,101,101,101,101,101,101,,101,326',
'326,101,,326,,,,,,,,326,326,,326,326,326,326,,326,326,,,326,,,,,326',
'326,326,326,,,,,,,,,,,,,326,326,,326,326,326,326,326,326,326,326,326',
',326,325,325,326,,325,,,,,,,,325,325,,325,325,325,325,,325,325,,,325',
',,,,325,325,325,325,,,,,,,,,,,,,325,325,,325,325,325,325,325,325,325',
'325,325,,325,651,651,325,,651,,,,,,,,651,651,,651,651,651,651,,651,651',
',,651,,,,,651,651,651,651,,,,,,,,,,,,,651,651,,651,651,651,651,651,651',
'651,651,651,,651,652,652,651,,652,,,,,,,,652,652,,652,652,652,652,,652',
'652,,,652,,,,,652,652,652,652,,,,,,,,,,,,,652,652,,652,652,652,652,652',
'652,652,652,652,,652,,,652,571,571,571,571,571,571,571,571,571,571,571',
',571,571,,,571,571,,,,571,,,,,,,,,,571,,571,,571,571,571,571,571,571',
'571,,571,,,,,,,886,886,,,886,,,,,571,,571,886,886,,886,886,886,886,',
'886,886,,,886,,,,,886,886,886,886,,,,,,,,,,,,,886,886,,886,886,886,886',
'886,886,886,886,886,,886,425,425,886,,425,,,,,,,,425,425,,425,425,425',
'425,,425,425,,,425,,,,,425,425,425,425,,,,,,,,,,,,,425,425,,425,425',
'425,425,425,425,425,425,425,,425,,,425,459,459,459,459,459,459,459,459',
'459,459,459,,459,459,,,459,459,,,,,,,,,,,,,,459,,459,,459,459,459,459',
'459,459,459,,459,,448,448,448,448,448,448,448,448,448,448,448,,448,448',
'459,459,448,448,,,,,,,,,,,,,,448,,448,,448,448,448,448,448,448,448,',
'448,512,512,512,512,512,512,512,512,512,512,512,,512,512,,448,512,512',
',,,,,,,,,,,,,512,,512,,512,512,512,512,512,512,512,,512,137,137,137',
'137,137,137,137,137,137,137,137,,137,137,512,512,137,137,,,,,,,,,,,',
',,137,,137,,137,137,137,137,137,137,137,,137,687,687,687,687,687,687',
'687,687,687,687,687,,687,687,,137,687,687,,,,,,,,,,,,,,687,,687,,687',
'687,687,687,687,687,687,,687,744,744,744,744,744,744,744,744,744,744',
'744,,744,744,,687,744,744,,,,,,,,,,,,,,744,,744,,744,744,744,744,744',
'744,744,,744,537,537,537,537,537,537,537,537,537,537,537,,537,537,,744',
'537,537,,,,,,,,,,,,,,537,,537,,537,537,537,537,537,537,537,,537,45,45',
'45,45,45,45,45,45,45,45,45,,45,45,,537,45,45,,,,,,,,,,,,,,45,,45,,45',
'45,45,45,45,45,45,,45,757,757,757,757,757,757,757,757,757,757,757,,757',
'757,,45,757,757,,,,,,,,,,,,,,757,,757,,757,757,757,757,757,757,757,',
'757,689,689,689,689,689,689,689,689,689,689,689,,689,689,757,757,689',
'689,,,,,,,,,,,,,,689,,689,,689,689,689,689,689,689,689,,689,640,640',
'640,640,640,640,640,640,640,640,640,,640,640,,689,640,640,,,,,,,,,,',
',,,640,,640,,640,640,640,640,640,640,640,,640,685,685,685,685,685,685',
'685,685,685,685,685,,685,685,,640,685,685,,,,,,,,,,,,,,685,,685,,685',
'685,685,685,685,685,685,,685,758,758,758,758,758,758,758,758,758,758',
'758,,758,758,,685,758,758,,,,,,,,,,,,,,758,,758,,758,758,758,758,758',
'758,758,,758,683,683,683,683,683,683,683,683,683,683,683,,683,683,,758',
'683,683,,,,,,,,,,,,,,683,,683,,683,683,683,683,683,683,683,,683,420',
'420,420,420,420,420,420,420,420,420,420,,420,420,,683,420,420,,,,,,',
',,,,,,,420,,420,,420,420,420,420,420,420,420,,420,769,769,769,769,769',
'769,769,769,769,769,769,,769,769,,420,769,769,,,,,,,,,,,,,,769,,769',
',769,769,769,769,769,769,769,,769,,,,,,,,,,,,,,,,769' ]
        racc_action_check = arr = Array.new(23824, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1062,  4369,  1059,   nil,    51, 13465,   202,   -21,   nil,
   932, 17785,   nil,   nil, 14305,   nil,   931, 13945,   976,   245,
 12265, 12145,   nil,   nil,   930, 11553, 21824,   nil, 11081, 10601,
  9889,   648,   nil,   nil,   nil,   617,   nil,   471,   894,   nil,
   nil,   273,   953,   nil,   -89, 23348,   885,   nil,   nil,   nil,
   963,  7729,   nil,  6529,  3885,   nil,  6049,   nil,  1007,  5329,
  4849, 11193,   nil,  4609,   nil,   nil,   323,     0,   nil,   nil,
   nil,   nil,  4969,   nil,   nil,   nil,  5089,   nil,  5209,   448,
   nil,   844,   728,   nil, 21715,   nil,   nil,  5809,   nil,   nil,
   842,   nil,   nil,   nil,   879,   nil,  6169,  6289,   nil,     2,
   nil, 22585, 22526,  6769,   385,     0,   nil,   nil,   186,   938,
    56,    27,   825,   892,   nil,   855,   854,   nil,   nil,   nil,
   851,   840,   nil,   nil,  8329,   nil,   nil,   810,   311,   nil,
   490,  8809,   148,   nil,   810,    90,   841, 23172,   nil,  2433,
   nil,  9649,   nil,   763,   755,   782, 10121,   736,   981,   733,
   -36,   nil,   nil,   nil, 10721, 10841,   463,   nil,   461,   433,
   721,   429,   783,  1707, 11793, 11913,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   487,   nil,
   nil,   nil,   nil,   311,   nil,   nil,   nil,   nil,   314,   nil,
   nil,   nil,   nil,   178,   342,   nil,   nil,   nil,   nil,   401,
   nil,   nil,   nil,   590,   534,   nil,   203,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   662,   nil,   nil,   nil, 21606,   705,   nil,
   643, 13585, 13705,   703,   700,  2070,   nil, 14185,   nil,   854,
   nil,   nil,   nil,   524,   625,   nil, 14665, 14785, 14905, 15025,
 15145, 15265, 15385, 15505, 15625, 15745, 15865, 15985, 16105, 16225,
 16345, 16465, 16585, 16705, 16825, 16945, 17065, 17185, 17305, 17425,
 17545, 17665,  2796,   nil,   nil,   nil,   673,    43,   638,   628,
   627,  3280,   nil, 18625, 18745, 18865, 18985, 19105, 19225,   nil,
   nil, 19345,   nil,   nil,    20, 22703, 22644,   223,   608,   nil,
   574,   445, 20305,   -92, 20537,    34,   527,   134,   nil,   nil,
   354,   nil,   nil,   nil,   nil,   431,   513,   337,   236,   nil,
  4489, 19465,   314, 18385, 18025,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   500, 13225,   121, 12505,   199,   nil, 11433,   nil,
   453,   nil,   468,   482, 22119, 22237, 10001,   nil,   nil,   nil,
   484,   -19,   nil,   nil,   nil,   185,    73,   nil,   nil,  7849,
   nil,   284,   nil,   nil, 22408, 22467,  5689,   nil,  5569, 20065,
   243,  7129,   nil,  7249,   nil,  7489,   395,  9409,   nil,   nil,
   377,   nil, 10961,   443,   nil,   -29,   nil,    14,   381,   382,
 23656,   nil, 22001, 22060, 21883, 22992, 18505,   nil,   -53,   382,
   nil,   nil,   nil,   nil,   nil,  7377, 21017, 20425,   nil,   nil,
   nil,   nil,   nil,   nil, 19945, 21377,   419,   388, 23084, 17905,
  1012,   nil, 14425,  1223,  1223,   167,  1102,  1344,   136, 23039,
  1465,   641,   587,  2554,    84,   579,  2675,  1586,  1707,  1828,
  1949,  3038,  2070,   281,  2191,  2796,  2917,   604,  2312,  2433,
   564,   270,   nil,  2191,   nil,   681,   nil,   578,   647,   683,
   nil,   nil,   nil,   nil,   nil,   nil,   715,   780,   688,   -26,
   688,  2675,   493,   nil,   nil,   439,   700,   nil,   nil,   nil,
   nil,  7009, 23128,   nil,  6889,   nil,   nil,   728,   nil,   729,
  6649,  3764,   941,   nil,   948,   nil,   nil,  6409,   nil,   nil,
   nil,   nil,   nil,   853,   nil,   185,   nil, 23304,   nil,    53,
  3401,   534,   902,   nil,  8569,  8689,   904,   nil,   nil,   nil,
  9529, 13345,   163,   930,   218,   231,   951,   212,    -7,   -57,
 12745,   -53,   nil,   nil, 14065,   nil,   nil,   nil,   nil,   -79,
   920, 22868,  8449,   864,   nil,   nil,   608,   329,    88,   -39,
   771,   nil,   854,   nil,   739,  7609,   696,   723,   nil,   730,
   nil,  8929,   nil,   280, 21942, 22349,  9169,   nil,   nil,   476,
   272,   nil,   nil,   nil,   409,   472,   209,   157,   594,   nil,
   981, 21497,   nil,   601,   599,   281,   472,   399,   nil,   397,
   nil,   373,   nil,   nil,  1949,   nil,   nil,   nil,   nil,   nil,
   658,   -33,   nil, 12033,   104,    30,    46,   nil,   nil,    22,
 23480,   618, 12865,   nil,   nil,   621,   nil,   -78,   nil,   nil,
    62, 22762, 22821,   116, 12985,   270,   nil,   nil,   nil,   nil,
   207,   nil, 14545,   nil, 18265, 19585,   nil,   429,   nil, 19705,
   473,   nil,   nil,   nil,   nil,   nil,   377,   nil,   nil,   nil,
   nil,   nil,   nil, 23612,   nil, 23524,   nil, 23216,   nil, 23436,
   nil,  9769,   -13,    27,   nil,  4248,   486,   nil,  4127,   525,
 21257,   nil,   499, 21137,   nil, 20897, 20777, 20657,   -66,   552,
 20185,   nil,   565,   287,   nil,   379,   410,   610,   nil, 19825,
  3038,   413,   716,   nil,   nil,   nil,   nil, 18145,  1032,   nil,
   550,   nil,   340,   nil,   733,   622,   675,   nil,  1102,   758,
   nil, 13825,   nil,   nil, 23260,  1344, 13105,   764,   nil,   nil,
   687,   698,   nil,   761,   -38,   797,   nil, 23392, 23568,   687,
 12625,   nil,   -11,   691, 12385,   nil,  1465,  1586,   nil, 23700,
   nil,   nil,  1828,   828,   nil,   729,   nil,   nil,   720, 11313,
   722,   nil, 10481, 10361,   nil, 10241,   nil,   nil,   nil,   372,
   854,   nil,  6177,   nil,   742,   743,   nil,   nil,   nil,   741,
   753,   nil,   791,   nil,   nil,   nil,  2312,   nil,   796,   nil,
   764,   nil,   881,    49,   nil,   805,   nil,   nil,   nil,  2554,
  9049,   nil,   902,   905,  2917,   823,   nil,   nil,  8209,   nil,
   811,  8089,   nil,   814, 22284,  3522,   nil,   nil,  3643,   270,
   nil,   nil,   nil,   nil,   nil,  7369,    31,   nil,   nil,  4006,
   nil,   406,  5929,   nil,   nil,   963,   nil,  5449,   851,   nil,
  4729,   nil,   nil,   970,   971,   863,   464,   475,   501,   941,
   nil,  3159,   591,   nil,   nil,   nil,   nil,   nil,   880,  7969,
   nil,   882,   nil,   nil,   nil, 22178, 22933,  9289,   467,  1034,
   nil,   nil, 11673,   nil,   127,   238,    42,    16,   969,   nil,
   936,   502,   nil ]

racc_action_default = [
    -1,  -506,  -504,  -506,  -504,  -506,  -506,  -251,  -291,  -420,
  -504,  -322,   -61,    -2,  -506,  -421,  -504,  -323,  -307,  -273,
  -506,   -65,  -314,  -324,  -506,  -506,  -506,  -325,  -506,  -506,
  -506,   -34,   -71,  -387,  -380,  -506,  -275,  -435,  -495,  -414,
  -382,  -493,  -506,   -20,  -383,   -40,  -506,  -434,  -384,    -5,
   -42,  -285,  -433,  -506,  -504,   -43,  -288,  -266,    -6,  -424,
  -356,  -506,  -267,  -506,  -430,  -381,   -47,  -483,  -268,  -429,
  -426,  -269,  -506,  -431,  -425,  -270,  -504,  -432,  -427,  -216,
  -271,  -506,  -493,  -428,  -504,  -272,   -35,  -504,  -437,  -504,
  -506,  -295,  -438,  -504,  -506,  -298,   -70,  -506,   903,  -506,
  -402,  -506,  -506,  -504,  -506,  -350,  -322,  -323,  -273,  -506,
  -506,  -435,  -495,  -506,  -285,  -288,  -356,  -326,  -338,  -339,
  -506,   -53,  -360,  -357,  -506,  -290,  -292,  -506,  -506,  -392,
  -506,  -506,  -273,  -238,  -261,  -435,  -506,  -217,  -230,  -504,
   -45,  -506,  -478,  -506,  -505,  -506,  -506,  -505,    -8,  -506,
  -506,  -398,   -46,  -310,  -506,  -506,  -506,  -209,  -506,   -82,
   -66,   -75,  -506,  -504,   -68,  -506,   -73,  -193,  -168,  -150,
  -121,  -169,  -139,  -170,  -153,  -108,  -141,  -129,  -171,  -126,
  -152,  -130,  -157,  -172,  -127,  -142,  -117,  -159,  -124,  -136,
  -128,  -165,  -118,  -151,  -123,  -435,  -138,  -144,  -119,  -143,
  -125,  -158,  -120,  -134,  -109,  -148,  -115,  -135,  -506,  -317,
  -147,  -160,  -113,  -132,  -110,  -167,  -106,   -99,  -133,  -111,
  -473,  -162,  -100,   -96,  -161,  -107,   -98,  -114,  -163,  -154,
  -116,  -146,  -145,  -164,   -97,  -140,  -149,  -131,  -472,  -112,
  -166,  -137,  -156,  -122,  -155,  -101,  -132,  -133,   -96,  -161,
  -102,    -9,  -154,  -506,  -164,   -97,  -149,  -506,  -194,  -103,
   -14,  -506,  -506,  -422,  -423,  -504,  -496,  -506,  -501,  -494,
  -500,  -502,    -4,  -281,  -506,  -385,  -506,  -506,  -506,  -506,
  -506,  -506,  -506,  -506,  -506,  -506,  -506,  -506,  -506,  -506,
  -506,  -506,  -506,  -506,  -506,  -506,  -506,  -506,  -506,  -506,
  -506,  -506,  -504,  -344,  -347,   -44,   -41,  -506,   -61,  -506,
  -506,  -504,   -60,  -506,  -506,  -506,  -506,  -506,  -506,   -59,
  -355,  -504,  -208,   -39,  -506,  -506,  -506,  -277,  -506,  -218,
  -495,  -497,  -506,  -497,  -506,  -506,  -494,  -493,  -413,  -415,
  -506,  -417,  -416,  -418,  -475,  -497,  -506,  -497,  -506,  -400,
  -506,  -506,  -506,  -506,  -506,   -69,   -38,  -404,  -389,  -407,
  -405,  -403,  -251,  -490,  -484,  -489,  -485,  -354,  -504,  -487,
  -484,  -486,  -485,  -506,  -506,  -506,  -504,  -304,  -422,  -423,
  -506,  -281,  -351,   -54,   -50,  -504,  -504,  -252,  -253,  -254,
  -390,  -506,  -394,  -391,  -506,  -506,  -504,  -258,  -506,  -506,
  -281,  -506,  -260,  -506,  -231,  -506,  -505,  -506,  -233,  -396,
  -506,  -397,  -506,  -506,  -273,  -506,   -94,  -506,   -91,   -92,
  -182,   -30,  -506,  -506,  -506,  -506,  -504,   -74,   -81,  -506,
   -67,  -315,  -492,  -491,  -319,  -453,  -506,  -506,   -13,   -12,
   -11,  -104,   -36,   -37,  -506,  -506,  -372,  -506,  -214,  -506,
    -7,  -503,  -506,  -504,  -203,  -189,  -184,  -204,  -188,  -506,
  -205,  -185,  -210,  -200,  -186,  -211,  -202,  -201,  -212,  -199,
  -213,  -195,  -206,  -187,  -207,  -196,  -197,  -190,  -198,  -183,
  -506,  -504,  -329,  -504,  -328,  -327,  -279,   -62,  -506,  -506,
  -287,   -15,   -16,   -17,   -18,   -19,  -506,  -230,  -495,  -495,
  -505,  -504,  -251,  -484,  -485,  -251,  -495,  -283,  -219,  -498,
  -220,  -499,  -495,  -222,  -499,   -31,  -261,  -173,   -23,  -506,
  -506,  -504,  -506,  -363,  -506,  -419,  -477,  -499,  -284,  -476,
  -401,  -386,   -33,   -32,   -24,  -506,  -388,  -175,   -25,  -506,
  -504,  -506,   -57,  -353,  -506,  -506,   -55,  -229,  -352,  -228,
  -506,  -506,  -282,  -506,  -488,  -280,  -504,  -484,  -485,  -506,
  -506,  -504,  -361,  -342,  -506,  -340,  -358,  -250,  -256,  -506,
  -506,   -40,  -506,  -505,  -393,  -395,  -488,  -280,  -484,  -485,
  -506,  -480,  -173,  -259,  -262,  -506,  -505,  -506,  -237,  -506,
  -479,  -506,  -399,  -311,  -506,  -506,  -504,   -93,   -91,   -92,
  -506,  -440,  -308,  -439,   -78,   -80,  -484,  -485,  -506,   -72,
  -504,  -506,  -461,  -466,  -506,  -506,  -457,  -471,  -464,  -471,
  -463,  -471,  -468,  -455,  -504,  -467,  -454,  -452,  -458,  -456,
  -453,  -495,   -10,  -506,  -191,  -192,  -504,  -370,  -276,  -506,
  -181,  -506,  -506,   -22,  -345,  -504,  -330,   -62,  -286,  -224,
  -506,  -506,  -506,  -506,  -506,  -504,   -49,  -349,   -48,  -348,
  -506,  -262,  -506,  -223,  -506,  -506,  -265,  -506,  -302,  -506,
  -506,  -332,  -296,  -333,  -331,  -299,  -506,  -412,  -409,  -410,
  -411,  -406,   -58,  -179,   -29,  -180,   -56,  -177,   -27,  -178,
   -28,  -506,  -282,  -506,   -51,  -504,  -506,  -341,  -504,  -506,
  -506,  -255,  -505,  -506,  -243,  -506,  -506,  -506,  -282,  -505,
  -506,  -235,  -505,  -506,   -95,   -91,   -92,  -506,  -442,  -506,
  -504,   -76,  -506,  -320,  -465,  -469,  -444,  -506,  -506,  -448,
  -506,  -450,  -506,  -451,  -506,  -495,  -506,  -105,  -504,  -504,
  -336,  -504,  -289,   -21,  -215,  -504,  -506,  -506,  -334,  -225,
  -504,  -504,  -226,  -506,  -495,  -506,  -278,  -495,  -174,  -263,
  -506,  -303,  -506,  -365,  -506,  -301,  -504,  -504,  -408,  -176,
   -26,  -305,  -504,  -506,  -343,  -506,  -257,  -240,  -505,  -506,
  -505,  -249,  -506,  -506,  -232,  -506,  -234,  -312,  -282,  -506,
  -506,  -316,  -453,  -460,  -471,  -471,  -470,  -459,  -462,  -506,
  -471,  -318,  -506,  -474,  -337,    -3,  -504,  -379,  -504,  -374,
  -373,  -375,  -506,  -506,  -293,  -506,  -294,  -221,  -264,  -504,
  -506,  -367,  -506,  -506,  -504,  -506,  -362,  -359,  -506,  -239,
  -505,  -506,  -245,  -505,  -505,  -504,  -441,  -309,  -504,  -506,
  -446,  -447,  -449,  -443,  -378,  -506,  -506,  -377,  -346,  -504,
  -227,  -504,  -506,  -297,  -300,  -506,   -52,  -506,  -505,  -241,
  -506,  -244,  -236,  -506,  -506,  -471,  -506,   -90,   -83,  -506,
  -376,  -504,  -504,  -369,  -368,  -364,  -366,  -306,  -505,  -506,
  -246,  -505,  -313,  -321,  -445,  -506,  -506,  -504,   -89,  -372,
  -335,  -242,  -506,  -247,  -488,   -88,  -484,  -485,  -506,  -371,
  -505,   -84,  -248 ]

clist = [
'5,109,447,328,104,250,209,250,138,130,267,119,5,522,138,130,251,383',
'259,158,147,590,499,117,636,133,147,144,515,320,373,133,597,144,627',
'624,148,272,117,308,355,217,392,217,532,217,747,323,138,130,310,130',
'5,739,562,566,798,140,121,130,147,130,672,152,339,133,675,144,745,795',
'130,800,755,330,130,417,483,238,335,271,130,307,346,126,380,320,431',
'570,387,382,568,324,633,501,158,130,347,305,160,217,330,130,602,345',
'99,772,561,312,430,657,337,319,659,117,208,434,363,7,265,506,271,138',
'130,351,766,354,7,767,590,7,560,824,7,147,154,720,412,5,133,713,144',
'421,510,100,513,835,165,610,308,129,644,435,413,130,611,151,526,792',
'529,429,481,5,158,413,699,798,7,386,7,7,388,117,698,385,695,762,7,875',
'7,669,865,117,117,808,340,846,741,7,275,348,274,7,128,352,391,437,150',
'7,681,541,540,719,670,735,794,260,269,805,797,2,436,714,7,1,,329,,,7',
',771,408,,100,,,344,,349,627,694,,100,,,,,339,,7,,,329,,729,,731,,733',
',,,362,368,7,,,,,130,130,,530,5,,,,5,874,,7,,217,890,,,,,7,,,,,,,,,',
',,,450,,,,,308,,,,5,,508,559,,575,,488,,5,138,130,130,130,130,130,5',
'590,497,130,518,,147,580,590,,,133,,144,147,543,130,524,,133,534,500',
',538,495,,491,492,493,494,,722,130,130,519,130,130,608,,754,,657,659',
'489,,734,,,,,519,498,,,,,,330,130,271,7,7,,535,7,,539,,7,,,130,,363',
',627,838,330,130,,,,573,,,,,567,,,,,,363,130,,586,542,250,,,7,,546,',
'840,841,330,130,632,7,842,7,7,7,7,7,7,130,809,7,363,682,363,,,686,,',
'590,,130,,7,,5,217,,,603,,790,,,496,,,,,7,7,899,7,7,650,653,,,,,502',
'505,660,,588,5,,,663,,,,,,,7,884,590,,,,,,5,94,,,,7,,,549,,,,7,94,,',
'329,,,,5,,,543,717,565,565,556,7,,873,684,819,,,,329,688,690,5,,,7,130',
',,362,368,,130,130,,7,94,656,,,658,,130,696,,,104,,7,329,,,7,119,,,863',
'674,556,864,556,674,,,,117,849,,,,,,693,,,723,,330,130,,,,7,,,,,736',
',,,,5,363,250,,,,,871,7,,,,565,737,5,,,,217,,,,,,,,,,7,94,718,,,549',
',,549,,,704,217,,,753,130,726,,7,,,,7,711,94,,586,,7,7,,,,,,,,,7,,770',
',,,,,,,763,,,,130,,,,5,,549,5,,,,565,,,,,,,802,,780,,7,,,777,,778,130',
'5,,,,,,,7,815,,,817,,674,,,,329,5,,,7,,,,5,130,,556,789,,,,787,,,,,',
'519,,,,,,94,5,5,,94,,7,5,,,,813,740,781,,,137,,,,784,740,137,786,,157',
',,,,167,740,,,258,,,94,,750,751,5,,7,,,94,7,,,7,898,,94,5,,137,,,5,',
',,,836,,322,,,,5,7,7,5,858,,,,,,866,137,,,5,,,,,829,7,832,137,,,,,7',
'7,117,,,,,,,5,,137,,,,,,,807,19,811,7,7,108,330,130,,7,,549,549,19,137',
',,,,,159,137,363,,,,859,,,861,862,322,,,,,137,,,,,,,7,,420,,,,,,,,19',
'880,,7,,,,,7,,,,,,,,847,,,7,94,891,7,,893,,,,,,,,,7,,,,,,,,,159,902',
',,,,,13,94,,,,,7,,,,740,,,,,,,,,94,,,7,,,,,,,,,740,,,,,19,,,94,,,,,',
',329,,,,,414,309,,,448,,556,94,,19,159,414,,454,455,456,457,458,459',
'460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476',
'477,478,479,,81,,,,118,,,,,,137,,81,,,,,,137,,,,,,,,,,,512,,517,,,,',
',94,,,,,,,,,309,137,,,537,94,81,,,,,,,,,,,,,,,,,,309,19,,137,,19,,,',
',,,,,,,571,,,,,,,137,,420,137,,582,,137,,537,,137,,,,19,,,,,,,,,19,',
',,,94,137,19,94,,,,,,,,,,,,81,,,,634,635,,,,,94,,640,,,,,,,,,,,,81,',
',,94,,,,,,,94,,,,,,,,,,,,,,,,,,,37,,94,94,111,,,,94,,,,37,,,,,137,480',
'161,137,,,,195,,137,309,,,,,,137,,,,,,,,,94,,,,,,,,683,685,37,,,94,687',
'689,,,94,,,,,,,,19,,,94,81,,94,,81,,137,,,,,,,94,,,,,,137,,,161,,,137',
'19,,,,137,,,,,94,,81,,,,,,,19,,81,,,,,,,81,,,,,,,,,,,19,37,,,,,,,,,',
',744,,,,195,,,19,677,,,,137,37,161,195,306,,,,757,641,758,137,,,306',
'137,,,,108,,,,327,,,,397,,,,,,306,,,,769,,645,,,406,,,,137,,356,137',
',683,687,689,,,137,655,,,,,,,,19,,,,,,,,137,,,,667,,19,,,,,,,,137,,',
',,,,,,676,,,,81,,,37,,,137,37,,,137,,,,,,,,,,,,,,,137,,,137,769,81,834',
',,,,,,,,37,,,,,,,,81,37,19,,,19,,,37,,,,,,,,,,137,,81,,,,,,137,19,,137',
',,,,,,,,,81,,,,,,19,,,,,137,,19,,,137,,,137,,,,,118,442,443,,,,,,,,19',
'19,,,137,,19,,,516,,,137,,,,,137,,,,,,,,533,,,,,773,,,775,,,81,,,,19',
',,,306,306,306,306,,,81,,,19,,,,,19,,,,,,569,,,,,19,37,,19,804,581,',
',,584,867,812,306,589,19,306,,,,,,,,,,,,,,,,37,822,823,,,19,,825,,,',
',,,,,,,37,327,,81,,,81,,,,,,,,,,,,,,37,,,844,593,,,,81,,,,,,,,851,,',
'37,,855,,,,,81,,631,,,,,81,,,,,,,,639,,111,,,872,,661,,,589,,,81,81',
',666,,,81,,,,661,,,,889,,,,,,,,,,,,,,,,,,,,,37,,,,,81,,,,,,,,,37,,,',
'81,,702,,,81,,,,,,,,,,709,81,,,81,,712,,,,,870,,,,81,,,,,,,,,,,,,,,306',
',,,,,,81,,,,,,,,,,,,,,,37,,,37,,,,,,,,,,,,,,584,,,,,,,,37,,,759,,,,516',
',,,,,,,,,,37,,,,,,,37,,,,,,,,,,,,,,,,589,,,,,37,37,589,,,,37,,,,,,,',
',,,,,793,,,,,,,,,,,,,,810,,,,,,,37,,,,,,,,,,,,818,37,,,821,,37,,,,,',
',,306,,,37,,830,37,,833,,,,,868,,,,37,,,,,,,,,,306,,,,,,,,,,,,37,,,',
',,,661,,,,,,,,584,,,589,,,,,,,,,,,,,,,,,,,,,876,,,,,878,,,881,,,,,,',
',,,,,,,,,,,,589,,,,,,,,,,,,,900' ]
        racc_goto_table = arr = Array.new(2211, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'20,82,3,21,20,51,48,51,29,20,53,18,20,81,29,20,13,35,13,20,57,147,32',
'54,5,61,57,55,23,58,21,61,46,55,141,85,11,9,54,40,44,49,129,49,23,49',
'79,17,29,20,41,20,20,6,36,36,143,31,34,20,57,20,80,31,48,61,80,55,108',
'139,20,139,6,29,20,47,78,74,9,84,20,15,75,76,53,58,47,65,63,58,62,15',
'52,78,20,20,57,31,43,49,29,20,83,55,126,38,37,34,44,59,15,34,59,54,86',
'87,49,39,88,89,84,29,20,90,91,92,39,93,147,39,94,95,39,57,96,97,98,20',
'61,99,55,17,56,10,56,100,101,102,40,10,36,103,20,20,104,10,56,105,56',
'41,107,20,20,20,66,143,39,111,39,39,31,54,112,113,114,115,39,116,39',
'117,139,54,54,118,126,119,120,39,124,125,27,39,127,126,128,26,130,39',
'131,132,133,135,81,136,138,14,12,7,142,4,146,46,39,1,,10,,,39,,80,60',
',10,,,10,,10,141,36,,10,,,,,48,,39,,,10,,140,,140,,140,,,,33,33,39,',
',,,20,20,,129,20,,,,20,6,,39,,49,79,,,,,39,,,,,,,,,,,,,11,,,,,40,,,',
'20,,53,21,,129,,41,,20,29,20,20,20,20,20,20,147,29,20,17,,57,21,147',
',,61,,55,57,58,20,9,,61,17,55,,17,11,,15,15,15,15,,3,20,20,55,20,20',
'21,,32,,59,59,31,,3,,,,,55,31,,,,,,29,20,84,39,39,,15,39,,15,,39,,,20',
',49,,141,85,29,20,,,,57,,,,,61,,,,,,49,20,,57,34,51,,,39,,34,,140,140',
'29,20,13,39,140,39,39,39,39,39,39,20,23,39,49,35,49,,,35,,,147,,20,',
'39,,20,49,,,84,,3,,,10,,,,,39,39,5,39,39,53,53,,,,,33,33,53,,60,20,',
',53,,,,,,,39,140,147,,,,,,20,19,,,,39,,,10,,,,39,19,,,10,,,,20,,,58',
'21,10,10,33,39,,81,17,78,,,,10,17,17,20,,,39,20,,,33,33,,20,20,,39,19',
'34,,,34,,20,82,,,20,,39,10,,,39,18,,,3,84,33,3,33,84,,,,54,78,,,,,,15',
',,48,,29,20,,,,39,,,,,53,,,,,20,49,51,,,,,78,39,,,,10,13,20,,,,49,,',
',,,,,,,39,19,84,,,10,,,10,,,60,49,,,29,20,84,,39,,,,39,60,19,,57,,39',
'39,,,,,,,,,39,,17,,,,,,,,55,,,,20,,,,20,,10,20,,,,10,,,,,,,53,,57,,39',
',,61,,55,20,20,,,,,,,39,53,,,53,,84,,,,10,20,,,39,,,,20,20,,33,15,,',
',84,,,,,,55,,,,,,19,20,20,,19,,39,20,,,,15,10,60,,,28,,,,60,10,28,60',
',28,,,,,28,10,,,28,,,19,,33,33,20,,39,,,19,39,,,39,21,,19,20,,28,,,20',
',,,,84,,28,,,,20,39,39,20,57,,,,,,20,28,,,20,,,,,60,39,60,28,,,,,39',
'39,54,,,,,,,20,,28,,,,,,,10,22,10,39,39,22,29,20,,39,,10,10,22,28,,',
',,,22,28,49,,,,60,,,60,60,28,,,,,28,,,,,,,39,,28,,,,,,,,22,60,,39,,',
',,39,,,,,,,,10,,,39,19,60,39,,60,,,,,,,,,39,,,,,,,,,22,60,,,,,,2,19',
',,,,39,,,,10,,,,,,,,,19,,,39,,,,,,,,,10,,,,,22,,,19,,,,,,,10,,,,,22',
'2,,,28,,33,19,,22,22,22,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,,16,,,,16,,,,,,28,,16,,,,,,28,,,,,',
',,,,,28,,28,,,,,,19,,,,,,,,,2,28,,,28,19,16,,,,,,,,,,,,,,,,,,2,22,,28',
',22,,,,,,,,,,,28,,,,,,,28,,28,28,,28,,28,,28,,28,,,,22,,,,,,,,,22,,',
',,19,28,22,19,,,,,,,,,,,,16,,,,28,28,,,,,19,,28,,,,,,,,,,,,16,,,,19',
',,,,,,19,,,,,,,,,,,,,,,,,,,45,,19,19,45,,,,19,,,,45,,,,,28,2,45,28,',
',,45,,28,2,,,,,,28,,,,,,,,,19,,,,,,,,28,28,45,,,19,28,28,,,19,,,,,,',
',22,,,19,16,,19,,16,,28,,,,,,,19,,,,,,28,,,45,,,28,22,,,,28,,,,,19,',
'16,,,,,,,22,,16,,,,,,,16,,,,,,,,,,,22,45,,,,,,,,,,,28,,,,45,,,22,22',
',,,28,45,45,45,25,,,,28,2,28,28,,,25,28,,,,22,,,,25,,,,24,,,,,,25,,',
',28,,2,,,24,,,,28,,25,28,,28,28,28,,,28,2,,,,,,,,22,,,,,,,,28,,,,2,',
'22,,,,,,,,28,,,,,,,,,2,,,,16,,,45,,,28,45,,,28,,,,,,,,,,,,,,,28,,,28',
'28,16,28,,,,,,,,,45,,,,,,,,16,45,22,,,22,,,45,,,,,,,,,,28,,16,,,,,,28',
'22,,28,,,,,,,,,,16,,,,,,22,,,,,28,,22,,,28,,,28,,,,,16,25,25,,,,,,,',
'22,22,,,28,,22,,,24,,,28,,,,,28,,,,,,,,24,,,,,2,,,2,,,16,,,,22,,,,25',
'25,25,25,,,16,,,22,,,,,22,,,,,,24,,,,,22,45,,22,2,24,,,,24,22,2,25,24',
'22,25,,,,,,,,,,,,,,,,45,2,2,,,22,,2,,,,,,,,,,,45,25,,16,,,16,,,,,,,',
',,,,,,45,,,2,25,,,,16,,,,,,,,2,,,45,,2,,,,,16,,25,,,,,16,,,,,,,,25,',
'45,,,2,,24,,,24,,,16,16,,24,,,16,,,,24,,,,2,,,,,,,,,,,,,,,,,,,,,45,',
',,,16,,,,,,,,,45,,,,16,,24,,,16,,,,,,,,,,24,16,,,16,,24,,,,,16,,,,16',
',,,,,,,,,,,,,,25,,,,,,,16,,,,,,,,,,,,,,,45,,,45,,,,,,,,,,,,,,24,,,,',
',,,45,,,24,,,,24,,,,,,,,,,,45,,,,,,,45,,,,,,,,,,,,,,,,24,,,,,45,45,24',
',,,45,,,,,,,,,,,,,24,,,,,,,,,,,,,,24,,,,,,,45,,,,,,,,,,,,24,45,,,24',
',45,,,,,,,,25,,,45,,24,45,,24,,,,,45,,,,45,,,,,,,,,,25,,,,,,,,,,,,45',
',,,,,,24,,,,,,,,24,,,24,,,,,,,,,,,,,,,,,,,,,24,,,,,24,,,24,,,,,,,,,',
',,,,,,,,,24,,,,,,,,,,,,,24' ]
        racc_goto_check = arr = Array.new(2211, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   213,   978,  -263,   209,  -422,  -583,  -532,   nil,    -4,
   139,    22,   165,   -12,   175,    28,  1069,   -14,     5,   498,
    -2,   -73,   877,  -306,  1318,  1373,   -56,   147,   768,    -3,
   nil,    46,  -299,   151,    51,  -104,  -331,  -278,  -589,   115,
   -15,    -4,   nil,    77,   -56,  1260,  -383,   -79,   -20,    15,
   nil,   -23,  -349,   -28,    17,    16,  -189,     9,   -31,  -393,
    74,    14,  -299,   -36,   nil,  -302,  -404,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    51,    -5,    75,   nil,  -231,  -599,
  -473,  -322,    -5,  -315,    38,  -400,    88,   -93,    82,  -208,
    32,  -548,    30,  -548,  -247,  -640,   116,  -467,   -17,  -454,
  -642,   124,  -284,   -58,  -280,  -566,   nil,  -143,  -576,   nil,
   nil,    44,  -394,    51,  -388,  -494,  -674,  -344,  -558,  -623,
  -451,   nil,   nil,   nil,   144,   100,   100,   182,    66,   -86,
   180,  -343,  -161,  -159,   nil,  -400,  -427,   nil,  -524,  -659,
  -373,  -401,  -520,  -674,   nil,   nil,   -10,  -386 ]

racc_goto_default = [
   nil,   nil,   446,   nil,   nil,   nil,   748,   nil,    41,   nil,
    49,    58,   336,   nil,   nil,   nil,   143,    86,    90,   145,
   156,   nil,   132,   nil,   134,    31,   nil,   nil,    45,    50,
    55,   nil,    66,   553,   nil,   nil,   nil,   nil,   nil,   105,
    12,   nil,    21,    24,    32,   135,   416,   nil,   245,   369,
   222,    65,   nil,   nil,    79,   331,   nil,   333,   547,   548,
   404,   583,   nil,   nil,   124,   nil,   nil,   402,    57,    62,
    68,    71,    75,    80,    85,   nil,   125,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   485,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   304,   nil,   nil,   367,
   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    34,    40,    44,    48,   nil,   nil,   nil,   nil,   361,
   nil,   nil,   nil,   nil,   338,   nil,   615,   617,   619,   621,
   nil,   796,   628,   612,   613,   614,   nil,   142 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 145, :_reduce_101,
  1, 145, :_reduce_102,
  1, 146, :_reduce_103,
  0, 184, :_reduce_104,
  4, 146, :_reduce_105,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_173,
  5, 160, :_reduce_174,
  3, 160, :_reduce_175,
  6, 160, :_reduce_176,
  5, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  4, 160, :_reduce_181,
  3, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  4, 160, :_reduce_191,
  4, 160, :_reduce_192,
  2, 160, :_reduce_193,
  2, 160, :_reduce_194,
  3, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  2, 160, :_reduce_208,
  2, 160, :_reduce_209,
  3, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  5, 160, :_reduce_215,
  1, 160, :_reduce_none,
  1, 156, :_reduce_217,
  1, 153, :_reduce_none,
  2, 153, :_reduce_219,
  2, 153, :_reduce_220,
  5, 153, :_reduce_221,
  2, 153, :_reduce_222,
  3, 153, :_reduce_223,
  3, 190, :_reduce_224,
  4, 190, :_reduce_225,
  4, 190, :_reduce_226,
  6, 190, :_reduce_227,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 163, :_reduce_230,
  2, 163, :_reduce_231,
  5, 163, :_reduce_232,
  2, 163, :_reduce_233,
  5, 163, :_reduce_234,
  4, 163, :_reduce_235,
  7, 163, :_reduce_236,
  3, 163, :_reduce_237,
  1, 163, :_reduce_none,
  4, 194, :_reduce_239,
  3, 194, :_reduce_240,
  5, 194, :_reduce_241,
  7, 194, :_reduce_242,
  2, 194, :_reduce_243,
  5, 194, :_reduce_244,
  4, 194, :_reduce_245,
  6, 194, :_reduce_246,
  7, 194, :_reduce_247,
  9, 194, :_reduce_248,
  3, 194, :_reduce_249,
  1, 194, :_reduce_none,
  0, 196, :_reduce_251,
  2, 166, :_reduce_252,
  1, 195, :_reduce_none,
  0, 197, :_reduce_254,
  3, 195, :_reduce_255,
  0, 198, :_reduce_256,
  4, 195, :_reduce_257,
  2, 193, :_reduce_258,
  2, 192, :_reduce_259,
  1, 192, :_reduce_none,
  1, 187, :_reduce_261,
  3, 187, :_reduce_262,
  3, 155, :_reduce_263,
  4, 155, :_reduce_264,
  2, 155, :_reduce_265,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_274,
  0, 220, :_reduce_275,
  4, 186, :_reduce_276,
  0, 221, :_reduce_277,
  5, 186, :_reduce_278,
  3, 186, :_reduce_279,
  3, 186, :_reduce_280,
  2, 186, :_reduce_281,
  4, 186, :_reduce_282,
  3, 186, :_reduce_283,
  3, 186, :_reduce_284,
  1, 186, :_reduce_285,
  4, 186, :_reduce_286,
  3, 186, :_reduce_287,
  1, 186, :_reduce_288,
  5, 186, :_reduce_289,
  2, 186, :_reduce_290,
  1, 186, :_reduce_none,
  2, 186, :_reduce_292,
  6, 186, :_reduce_293,
  6, 186, :_reduce_294,
  0, 222, :_reduce_295,
  0, 223, :_reduce_296,
  7, 186, :_reduce_297,
  0, 224, :_reduce_298,
  0, 225, :_reduce_299,
  7, 186, :_reduce_300,
  5, 186, :_reduce_301,
  4, 186, :_reduce_302,
  5, 186, :_reduce_303,
  0, 226, :_reduce_304,
  0, 227, :_reduce_305,
  9, 186, :_reduce_306,
  0, 228, :_reduce_307,
  0, 229, :_reduce_308,
  7, 186, :_reduce_309,
  0, 230, :_reduce_310,
  0, 231, :_reduce_311,
  0, 232, :_reduce_312,
  9, 186, :_reduce_313,
  0, 233, :_reduce_314,
  0, 234, :_reduce_315,
  6, 186, :_reduce_316,
  0, 235, :_reduce_317,
  6, 186, :_reduce_318,
  0, 236, :_reduce_319,
  0, 237, :_reduce_320,
  9, 186, :_reduce_321,
  1, 186, :_reduce_322,
  1, 186, :_reduce_323,
  1, 186, :_reduce_324,
  1, 186, :_reduce_325,
  1, 152, :_reduce_326,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 211, :_reduce_none,
  5, 211, :_reduce_335,
  1, 138, :_reduce_none,
  2, 138, :_reduce_337,
  1, 214, :_reduce_none,
  1, 214, :_reduce_339,
  1, 168, :_reduce_none,
  2, 168, :_reduce_341,
  1, 168, :_reduce_342,
  3, 168, :_reduce_343,
  0, 239, :_reduce_344,
  0, 240, :_reduce_345,
  6, 238, :_reduce_346,
  2, 164, :_reduce_347,
  4, 164, :_reduce_348,
  4, 164, :_reduce_349,
  0, 242, :_reduce_350,
  3, 209, :_reduce_351,
  4, 209, :_reduce_352,
  4, 209, :_reduce_353,
  3, 209, :_reduce_354,
  2, 209, :_reduce_355,
  1, 209, :_reduce_356,
  0, 243, :_reduce_357,
  0, 244, :_reduce_358,
  6, 208, :_reduce_359,
  0, 245, :_reduce_360,
  0, 246, :_reduce_361,
  6, 208, :_reduce_362,
  0, 249, :_reduce_363,
  6, 213, :_reduce_364,
  1, 247, :_reduce_none,
  4, 247, :_reduce_366,
  2, 247, :_reduce_367,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  0, 252, :_reduce_370,
  7, 137, :_reduce_371,
  0, 137, :_reduce_372,
  1, 250, :_reduce_373,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  2, 251, :_reduce_376,
  1, 251, :_reduce_none,
  2, 139, :_reduce_378,
  1, 139, :_reduce_none,
  1, 200, :_reduce_380,
  1, 200, :_reduce_381,
  1, 200, :_reduce_none,
  1, 201, :_reduce_383,
  1, 255, :_reduce_none,
  2, 255, :_reduce_385,
  3, 256, :_reduce_386,
  1, 256, :_reduce_387,
  3, 202, :_reduce_388,
  3, 203, :_reduce_389,
  3, 204, :_reduce_390,
  3, 204, :_reduce_391,
  1, 259, :_reduce_392,
  3, 259, :_reduce_393,
  1, 260, :_reduce_none,
  2, 260, :_reduce_395,
  3, 205, :_reduce_396,
  3, 205, :_reduce_397,
  1, 262, :_reduce_398,
  3, 262, :_reduce_399,
  1, 257, :_reduce_400,
  2, 257, :_reduce_401,
  1, 258, :_reduce_402,
  2, 258, :_reduce_403,
  1, 261, :_reduce_404,
  0, 264, :_reduce_405,
  3, 261, :_reduce_406,
  0, 265, :_reduce_407,
  4, 261, :_reduce_408,
  1, 263, :_reduce_409,
  1, 263, :_reduce_410,
  1, 263, :_reduce_411,
  1, 263, :_reduce_none,
  2, 183, :_reduce_413,
  1, 183, :_reduce_414,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  3, 254, :_reduce_419,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 253, :_reduce_422,
  2, 253, :_reduce_423,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_429,
  1, 177, :_reduce_430,
  1, 177, :_reduce_431,
  1, 177, :_reduce_432,
  1, 177, :_reduce_433,
  1, 177, :_reduce_434,
  1, 206, :_reduce_435,
  1, 151, :_reduce_436,
  1, 154, :_reduce_437,
  1, 154, :_reduce_438,
  1, 215, :_reduce_439,
  0, 267, :_reduce_440,
  4, 215, :_reduce_441,
  2, 215, :_reduce_442,
  4, 217, :_reduce_443,
  2, 217, :_reduce_444,
  6, 268, :_reduce_445,
  4, 268, :_reduce_446,
  4, 268, :_reduce_447,
  2, 268, :_reduce_448,
  4, 268, :_reduce_449,
  2, 268, :_reduce_450,
  2, 268, :_reduce_451,
  1, 268, :_reduce_452,
  0, 268, :_reduce_453,
  1, 274, :_reduce_454,
  1, 274, :_reduce_455,
  1, 274, :_reduce_456,
  1, 274, :_reduce_457,
  1, 269, :_reduce_458,
  3, 269, :_reduce_459,
  3, 275, :_reduce_460,
  1, 270, :_reduce_461,
  3, 270, :_reduce_462,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  2, 271, :_reduce_465,
  1, 271, :_reduce_466,
  1, 277, :_reduce_none,
  1, 277, :_reduce_none,
  2, 273, :_reduce_469,
  2, 272, :_reduce_470,
  0, 272, :_reduce_471,
  1, 218, :_reduce_none,
  0, 278, :_reduce_473,
  5, 218, :_reduce_474,
  1, 207, :_reduce_475,
  2, 207, :_reduce_476,
  2, 207, :_reduce_477,
  1, 189, :_reduce_none,
  3, 189, :_reduce_479,
  3, 279, :_reduce_480,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 216, :_reduce_500,
  1, 216, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_503,
  0, 142, :_reduce_504,
  0, 199, :_reduce_505 ]

racc_reduce_n = 506

racc_shift_n = 903

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tSYMBOL => 121,
  :tNL => 122,
  :tEH => 123,
  :tCOLON => 124,
  :tCOMMA => 125,
  :tSPACE => 126,
  :tSEMI => 127,
  :tLAST_TOKEN => 128,
  :tEQL => 129,
  :tLOWEST => 130,
  "[" => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "\"[\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "@36",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2]).endline(self.lexer.lineno)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_22(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = s(:return, ret_args(val[1]))
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:break, ret_args(val[1]))
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:next, ret_args(val[1]))
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.endline = self.lexer.lineno
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_80(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_101(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

def _reduce_102(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_103(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_104(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_105(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

def _reduce_173(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_174(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], s(:resbody, s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_175(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_176(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_180(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_183(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      result = new_call val[0], :+, s(:arglist, val[2])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :-, s(:arglist, val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :*, s(:arglist, val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :"/", s(:arglist, val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :%, s(:arglist, val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :**, s(:arglist, val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_193(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@", s(:arglist)
                      end
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_call val[1], :"-@", s(:arglist)
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[0], :"|", s(:arglist, val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"^", s(:arglist, val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"&", s(:arglist, val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"<=>", s(:arglist, val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :">", s(:arglist, val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">=", s(:arglist, val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :"<", s(:arglist, val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<=", s(:arglist, val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"==", s(:arglist, val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"===", s(:arglist, val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                    
    result
end

def _reduce_206(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_207(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_209(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~", s(:arglist)
                    
    result
end

def _reduce_210(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", s(:arglist, val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", s(:arglist, val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 216 omitted

def _reduce_217(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 218 omitted

def _reduce_219(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_221(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_224(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_226(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_227(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 228 omitted

# reduce 229 omitted

def _reduce_230(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = self.arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = self.arg_concat val[0], val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      args = self.list_prepend val[0], val[2]
                      result = self.arg_blk_pass args, val[3]
                    
    result
end

def _reduce_240(val, _values, result)
                      result = self.arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = self.arg_concat s(:array, val[0]), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = self.arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values))
                      result = self.arg_blk_pass result, val[5]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = self.arg_blk_pass result, val[8]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_252(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_256(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_257(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_262(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_275(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_276(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                      result.endline = self.lexer.lineno
                    
    result
end

def _reduce_277(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_278(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_280(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_290(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line ||= iter.line
                    
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_295(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_298(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_299(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_case nil, val[3]
                    
    result
end

def _reduce_304(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_308(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_class val
                      result.endline = self.lexer.lineno
                      self.env.unextend
                    
    result
end

def _reduce_310(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_311(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_sclass val
                      result.endline = self.lexer.lineno
                      self.env.unextend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_315(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_module val
                      result.endline = self.lexer.lineno
                      self.env.unextend
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = lexer.lineno, lexer.src.beginning_of_line?
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_defn val
                      result.endline = lexer.lineno
                      self.env.unextend
                      self.in_def = false
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_320(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_defs val
                      result.endline = self.lexer.lineno
                      self.env.unextend
                      self.in_single -= 1
                    
    result
end

def _reduce_322(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_323(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = 0
                    
    result
end

def _reduce_342(val, _values, result)
                      result = 0
                    
    result
end

def _reduce_343(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_344(val, _values, result)
                      self.env.extend :dynamic
                    
    result
end

def _reduce_345(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_346(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body

                      self.env.unextend
                    
    result
end

def _reduce_347(val, _values, result)
                      raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_351(val, _values, result)
                      result = new_call(nil, val[0].to_sym, val[2]).endline(self.lexer.lineno)
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_355(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_357(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_358(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_359(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.endline = self.lexer.lineno
                      result.line = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_361(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_362(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.endline = self.lexer.lineno
                      result.line = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_364(val, _values, result)
                      result = s(:when, val[2], val[4])
                      result.line = val[1]
                      result.endline = self.lexer.lineno
                      result << val[5] if val[5]
                    
    result
end

# reduce 365 omitted

def _reduce_366(val, _values, result)
                      result = self.list_append val[0], s(:when, val[3], nil)
                    
    result
end

def _reduce_367(val, _values, result)
                      result = s(:array, s(:when, val[1], nil))
                    
    result
end

# reduce 368 omitted

# reduce 369 omitted

def _reduce_370(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_371(val, _values, result)
                      klasses, var, body, rest = val[2], val[3], val[5], val[6]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = s(:resbody, klasses, body)
                      result.line = val[1]
                      result.endline = self.lexer.lineno
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_372(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_373(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 374 omitted

# reduce 375 omitted

def _reduce_376(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_381(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 382 omitted

def _reduce_383(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_388(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_392(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_393(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_396(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_400(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_401(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_402(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_403(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_405(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_406(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_407(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
                    
    result
end

def _reduce_408(val, _values, result)
                      lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
                    
    result
end

def _reduce_409(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_410(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_411(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 412 omitted

def _reduce_413(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_414(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 420 omitted

# reduce 421 omitted

def _reduce_422(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_423(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

def _reduce_429(val, _values, result)
 result = :nil      
    result
end

def _reduce_430(val, _values, result)
 result = :self     
    result
end

def _reduce_431(val, _values, result)
 result = :true     
    result
end

def _reduce_432(val, _values, result)
 result = :false    
    result
end

def _reduce_433(val, _values, result)
 result = :__FILE__ 
    result
end

def _reduce_434(val, _values, result)
 result = :__LINE__ 
    result
end

def _reduce_435(val, _values, result)
                      result = self.gettable val[0]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_437(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_438(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_442(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = args val[0], val[2], val[4], val[5]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = args val[0], val[2],    nil, val[3]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = args val[0],    nil, val[2], val[3]
                    
    result
end

def _reduce_448(val, _values, result)
                      result = args val[0],    nil,    nil, val[1]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = args    nil, val[0], val[2], val[3]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = args    nil, val[0],    nil, val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = args    nil,    nil, val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = args    nil,    nil,    nil, val[0]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = args    nil,    nil,    nil,    nil
                    
    result
end

def _reduce_454(val, _values, result)
                      yyerror "formal argument cannot be a constant: #{val[0]}"
                    
    result
end

def _reduce_455(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_456(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_457(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_459(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_461(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = self.append_to_block val[0], val[2]
                    
    result
end

# reduce 463 omitted

# reduce 464 omitted

def _reduce_465(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_466(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 467 omitted

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = nil
                    
    result
end

# reduce 472 omitted

def _reduce_473(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_477(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 478 omitted

def _reduce_479(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_480(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

def _reduce_500(val, _values, result)
 yyerrok 
    result
end

# reduce 501 omitted

# reduce 502 omitted

def _reduce_503(val, _values, result)
 yyerrok 
    result
end

def _reduce_504(val, _values, result)
 result = nil 
    result
end

def _reduce_505(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
